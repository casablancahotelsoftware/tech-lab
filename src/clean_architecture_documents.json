[
  {
    "page_content": "[File: Program.cs | Type: csharp]\\n\\nvar builder = DistributedApplication.CreateBuilder(args);\n\nbuilder.AddProject<Projects.NimblePros_SampleToDo_Web>(\"web\");\n\nbuilder.Build().Run();",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.AspireHost\\Program.cs",
      "file_type": "csharp",
      "token_count": 31,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using Ardalis.GuardClauses;\nglobal using Ardalis.Result;\nglobal using Ardalis.SharedKernel;\nglobal using Ardalis.SmartEnum;\nglobal using Ardalis.Specification;\nglobal using MediatR;\nglobal using Microsoft.Extensions.Logging;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 50,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Contributor.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate.Events;\n\nnamespace NimblePros.SampleToDo.Core.ContributorAggregate;\n\npublic class Contributor : EntityBase, IAggregateRoot\n{\n  public ContributorName Name { get; private set; }\n\n  public Contributor(ContributorName name)\n  {\n    Name = name;\n  }\n\n  public void UpdateName(ContributorName newName)\n  {\n    if (Name.Equals(newName)) return;\n    Name = newName;\n    this.RegisterDomainEvent(new ContributorNameUpdatedEvent(this));\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ContributorAggregate\\Contributor.cs",
      "file_type": "csharp",
      "token_count": 110,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: CoreServiceExtensions.cs | Type: csharp]\\n\\n﻿using Microsoft.Extensions.DependencyInjection;\nusing NimblePros.SampleToDo.Core.Interfaces;\nusing NimblePros.SampleToDo.Core.Services;\n\nnamespace NimblePros.SampleToDo.Core;\n\npublic static class CoreServiceExtensions\n{\n  public static IServiceCollection AddCoreServices(this IServiceCollection services, ILogger logger)\n  {\n    services.AddScoped<IToDoItemSearchService, ToDoItemSearchService>();\n    services.AddScoped<IDeleteContributorService, DeleteContributorService>();\n    \n    logger.LogInformation(\"{Project} services registered\", \"Core\");\n\n    return services;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\CoreServiceExtensions.cs",
      "file_type": "csharp",
      "token_count": 108,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorNameUpdatedEvent.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.ContributorAggregate.Events;\n\ninternal class ContributorNameUpdatedEvent(Contributor contributor) : DomainEventBase\n{\n  public Contributor Contributor { get; private set; } = contributor;\n\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ContributorAggregate\\Events\\ContributorNameUpdatedEvent.cs",
      "file_type": "csharp",
      "token_count": 45,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorName.cs | Type: csharp]\\n\\n﻿using Vogen;\n\nnamespace NimblePros.SampleToDo.Core.ContributorAggregate;\n\n[ValueObject<string>(conversions: Conversions.SystemTextJson)]\npublic partial struct ContributorName\n{\n  private static Validation Validate(in string name) => String.IsNullOrEmpty(name) ?\n    Validation.Invalid(\"Name cannot be empty\") :\n    Validation.Ok;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ContributorAggregate\\ContributorName.cs",
      "file_type": "csharp",
      "token_count": 67,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorByIdSpec.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.ContributorAggregate.Specifications;\n\npublic class ContributorByIdSpec : Specification<Contributor>\n{\n  public ContributorByIdSpec(int contributorId)\n  {\n    Query\n        .Where(contributor => contributor.Id == contributorId);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ContributorAggregate\\Specifications\\ContributorByIdSpec.cs",
      "file_type": "csharp",
      "token_count": 56,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorDeletedEvent.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.ContributorAggregate.Events;\n\n/// <summary>\n/// A domain event that is dispatched whenever a contributor is deleted.\n/// The DeleteContributorService is used to dispatch this event.\n/// </summary>\ninternal class ContributorDeletedEvent(int contributorId) : DomainEventBase\n{\n  public int ContributorId { get; set; } = contributorId;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ContributorAggregate\\Events\\ContributorDeletedEvent.cs",
      "file_type": "csharp",
      "token_count": 78,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: IDeleteContributorService.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.Interfaces;\n\npublic interface IDeleteContributorService\n{\n  // This service and method exist to provide a place in which to fire domain events\n  // when deleting this aggregate root entity\n  public Task<Result> DeleteContributor(int contributorId);\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\Interfaces\\IDeleteContributorService.cs",
      "file_type": "csharp",
      "token_count": 58,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorDeletedHandler.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate.Events;\nusing NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.Core.ProjectAggregate.Specifications;\n\nnamespace NimblePros.SampleToDo.Core.ContributorAggregate.Handlers;\n\n/// <summary>\n/// NOTE: Internal because ContributorDeleted is also marked as internal.\n/// </summary>\ninternal class ContributorDeletedHandler : INotificationHandler<ContributorDeletedEvent>\n{\n  private readonly IRepository<Project> _repository;\n  private readonly ILogger<ContributorDeletedHandler> _logger;\n\n  public ContributorDeletedHandler(IRepository<Project> repository,\n    ILogger<ContributorDeletedHandler> logger)\n  {\n    _repository = repository;\n    _logger = logger;\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ContributorAggregate\\Handlers\\ContributorDeletedHandler.cs",
      "file_type": "csharp",
      "token_count": 146,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorDeletedHandler.cs | Type: csharp | Part 2 of 2]\\n\\npublic async Task Handle(ContributorDeletedEvent domainEvent, CancellationToken cancellationToken)\n  {\n    _logger.LogInformation(\"Removing deleted contributor {contributorId} from all projects...\", domainEvent.ContributorId);\n    // Perform eventual consistency removal of contributors from projects when one is deleted\n    var projectSpec = new ProjectsWithItemsByContributorIdSpec(domainEvent.ContributorId);\n    var projects = await _repository.ListAsync(projectSpec, cancellationToken);\n    foreach (var project in projects)\n    {\n      project.Items\n        .Where(item => item.ContributorId == domainEvent.ContributorId)\n        .ToList()\n        .ForEach(item => item.RemoveContributor());\n      await _repository.UpdateAsync(project, cancellationToken);\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ContributorAggregate\\Handlers\\ContributorDeletedHandler.cs",
      "file_type": "csharp",
      "token_count": 152,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: IToDoItemSearchService.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.Core.Interfaces;\n\npublic interface IToDoItemSearchService\n{\n  Task<Result<ToDoItem>> GetNextIncompleteItemAsync(ProjectId projectId);\n  Task<Result<List<ToDoItem>>> GetAllIncompleteItemsAsync(ProjectId projectId, string searchString);\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\Interfaces\\IToDoItemSearchService.cs",
      "file_type": "csharp",
      "token_count": 64,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Priority.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.ProjectAggregate;\n\npublic class Priority : SmartEnum<Priority>\n{\n  public static readonly Priority Backlog = new(nameof(Backlog), 0);\n  public static readonly Priority Critical = new(nameof(Critical), 1);\n\n  protected Priority(string name, int value) : base(name, value) { }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\Priority.cs",
      "file_type": "csharp",
      "token_count": 70,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorNameUpdatedEventLoggingHandler.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate.Events;\n\nnamespace NimblePros.SampleToDo.Core.ContributorAggregate.Handlers;\n\ninternal class ContributorNameUpdatedEventLoggingHandler(ILogger<ContributorNameUpdatedEventLoggingHandler> logger) : INotificationHandler<ContributorNameUpdatedEvent>\n{\n  private readonly ILogger<ContributorNameUpdatedEventLoggingHandler> _logger = logger;\n\n  public Task Handle(ContributorNameUpdatedEvent notification, CancellationToken cancellationToken)\n  {\n    int contributorId = notification.Contributor.Id;\n    string newName = notification.Contributor.Name.Value;\n    _logger.LogInformation(\"Contributor {contributorId}'s name was updated to {newName}\", contributorId, newName);\n    return Task.CompletedTask;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ContributorAggregate\\Handlers\\ContributorNameUpdatedEventLoggingHandler.cs",
      "file_type": "csharp",
      "token_count": 153,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ProjectId.cs | Type: csharp]\\n\\n﻿using Vogen;\nnamespace NimblePros.SampleToDo.Core.ProjectAggregate;\n\n[ValueObject<int>]\npublic partial struct ProjectId;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\ProjectId.cs",
      "file_type": "csharp",
      "token_count": 26,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ProjectStatus.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.ProjectAggregate;\n\npublic enum ProjectStatus\n{\n  InProgress, // NOTE: Better to use a SmartEnum if you want spaces in your strings e.g. \"In Progress\"\n  Complete\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\ProjectStatus.cs",
      "file_type": "csharp",
      "token_count": 47,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: IEmailSender.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.Interfaces;\n\npublic interface IEmailSender\n{\n  Task SendEmailAsync(string to, string from, string subject, string body);\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\Interfaces\\IEmailSender.cs",
      "file_type": "csharp",
      "token_count": 34,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ToDoItem.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate.Events;\n\nnamespace NimblePros.SampleToDo.Core.ProjectAggregate;\n\npublic class ToDoItem : EntityBase<ToDoItem, ToDoItemId>\n{\n  public ToDoItem() : this(Priority.Backlog)\n  {\n  }\n\n  public ToDoItem(Priority priority)\n  {\n    Priority = priority;\n  }\n\n  public string Title { get; set; } = string.Empty;\n  public string Description { get; set; } = string.Empty;\n  public int? ContributorId { get; private set; } // tasks don't have anyone assigned when first created\n  public bool IsDone { get; private set; }\n\n  public Priority Priority { get; private set; }\n\n\n  public void MarkComplete()\n  {\n    if (!IsDone)\n    {\n      IsDone = true;\n\n      RegisterDomainEvent(new ToDoItemCompletedEvent(this));\n    }\n  }\n\n  public void AddContributor(int contributorId)\n  {\n    Guard.Against.Null(contributorId);\n    ContributorId = contributorId;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\ToDoItem.cs",
      "file_type": "csharp",
      "token_count": 211,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ToDoItem.cs | Type: csharp | Part 2 of 2]\\n\\nvar contributorAddedToItem = new ContributorAddedToItemEvent(this, contributorId);\n    base.RegisterDomainEvent(contributorAddedToItem);\n  }\n\n  public void RemoveContributor()\n  {\n    ContributorId = null;\n  }\n\n  public override string ToString()\n  {\n    string status = IsDone ? \"Done!\" : \"Not done.\";\n    return $\"{Id}: Status: {status} - {Title} - {Description}\";\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\ToDoItem.cs",
      "file_type": "csharp",
      "token_count": 92,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Project.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate.Events;\n\nnamespace NimblePros.SampleToDo.Core.ProjectAggregate;\n\npublic class Project : EntityBase<Project, ProjectId>, IAggregateRoot\n{\n  public ProjectName Name { get; private set; }\n\n  private readonly List<ToDoItem> _items = new();\n  public IEnumerable<ToDoItem> Items => _items.AsReadOnly();\n  public ProjectStatus Status => _items.All(i => i.IsDone) ? ProjectStatus.Complete : ProjectStatus.InProgress;\n\n  public Project(ProjectName name)\n  {\n    Name = name;\n  }\n\n  public void AddItem(ToDoItem newItem)\n  {\n    Guard.Against.Null(newItem);\n    _items.Add(newItem);\n\n    var newItemAddedEvent = new NewItemAddedEvent(this, newItem);\n    base.RegisterDomainEvent(newItemAddedEvent);\n  }\n\n  public void UpdateName(ProjectName newName)\n  {\n    Name = newName;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\Project.cs",
      "file_type": "csharp",
      "token_count": 191,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ProjectName.cs | Type: csharp]\\n\\n﻿using Vogen;\n\n[assembly: VogenDefaults(\n        staticAbstractsGeneration: StaticAbstractsGeneration.MostCommon | StaticAbstractsGeneration.InstanceMethodsAndProperties)]\n\n\nnamespace NimblePros.SampleToDo.Core.ProjectAggregate;\n\n// NOTE: Structs do not require conversion to work with EF Core\n[ValueObject<string>(conversions: Conversions.SystemTextJson)]\npublic partial struct ProjectName\n{\n  private static Validation Validate(in string name) => String.IsNullOrEmpty(name) ? \n    Validation.Invalid(\"Name cannot be empty\") : \n    Validation.Ok;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\ProjectName.cs",
      "file_type": "csharp",
      "token_count": 112,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorAddedToItemEvent.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.ProjectAggregate.Events;\n\npublic class ContributorAddedToItemEvent : DomainEventBase\n{\n  public int ContributorId { get; set; }\n  public ToDoItem Item { get; set; }\n\n  public ContributorAddedToItemEvent(ToDoItem item, int contributorId)\n  {\n    Item = item;\n    ContributorId = contributorId;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\Events\\ContributorAddedToItemEvent.cs",
      "file_type": "csharp",
      "token_count": 79,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ItemCompletedEmailNotificationHandler.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.Interfaces;\nusing NimblePros.SampleToDo.Core.ProjectAggregate.Events;\n\nnamespace NimblePros.SampleToDo.Core.ProjectAggregate.Handlers;\n\npublic class ItemCompletedEmailNotificationHandler : INotificationHandler<ToDoItemCompletedEvent>\n{\n  private readonly IEmailSender _emailSender;\n\n  // In a REAL app you might want to use the Outbox pattern and a command/queue here...\n  public ItemCompletedEmailNotificationHandler(IEmailSender emailSender)\n  {\n    _emailSender = emailSender;\n  }\n\n  // configure a test email server to demo this works\n  // https://ardalis.com/configuring-a-local-test-email-server\n  public Task Handle(ToDoItemCompletedEvent domainEvent, CancellationToken cancellationToken)\n  {\n    Guard.Against.Null(domainEvent, nameof(domainEvent));\n\n    return _emailSender.SendEmailAsync(\"test@test.com\", \"test@test.com\", $\"{domainEvent.CompletedItem.Title} was completed.\", domainEvent.CompletedItem.ToString());\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\Handlers\\ItemCompletedEmailNotificationHandler.cs",
      "file_type": "csharp",
      "token_count": 202,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ToDoItemId.cs | Type: csharp]\\n\\n﻿using Vogen;\nnamespace NimblePros.SampleToDo.Core.ProjectAggregate;\n\n[ValueObject<int>]\npublic partial struct ToDoItemId;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\ToDoItemId.cs",
      "file_type": "csharp",
      "token_count": 26,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: IncompleteItemsSearchSpec.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.ProjectAggregate.Specifications;\n\npublic class IncompleteItemsSearchSpec : Specification<ToDoItem>\n{\n  public IncompleteItemsSearchSpec(string searchString)\n  {\n    Query\n        .Where(item => !item.IsDone &&\n        (item.Title.Contains(searchString) ||\n        item.Description.Contains(searchString)));\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\Specifications\\IncompleteItemsSearchSpec.cs",
      "file_type": "csharp",
      "token_count": 70,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: IncompleteItemsSpec.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.ProjectAggregate.Specifications;\n\npublic class IncompleteItemsSpec : Specification<ToDoItem>\n{\n  public IncompleteItemsSpec()\n  {\n    Query.Where(item => !item.IsDone);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\Specifications\\IncompleteItemsSpec.cs",
      "file_type": "csharp",
      "token_count": 47,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ToDoItemCompletedEvent.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.ProjectAggregate.Events;\n\npublic class ToDoItemCompletedEvent : DomainEventBase\n{\n  public ToDoItem CompletedItem { get; set; }\n\n  public ToDoItemCompletedEvent(ToDoItem completedItem)\n  {\n    CompletedItem = completedItem;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\Events\\ToDoItemCompletedEvent.cs",
      "file_type": "csharp",
      "token_count": 59,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: NewItemAddedEvent.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.ProjectAggregate.Events;\n\npublic class NewItemAddedEvent : DomainEventBase\n{\n  public ToDoItem NewItem { get; set; }\n  public Project Project { get; set; }\n\n  public NewItemAddedEvent(Project project,\n      ToDoItem newItem)\n  {\n    Project = project;\n    NewItem = newItem;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\Events\\NewItemAddedEvent.cs",
      "file_type": "csharp",
      "token_count": 75,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ProjectByIdWithItemsSpec.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.ProjectAggregate.Specifications;\n\npublic class ProjectByIdWithItemsSpec : Specification<Project>\n{\n  public ProjectByIdWithItemsSpec(ProjectId projectId)\n  {\n    Query\n        .Where(project => project.Id == projectId)\n        .Include(project => project.Items);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\Specifications\\ProjectByIdWithItemsSpec.cs",
      "file_type": "csharp",
      "token_count": 61,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: DeleteContributorService.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\nusing NimblePros.SampleToDo.Core.ContributorAggregate.Events;\nusing NimblePros.SampleToDo.Core.Interfaces;\n\nnamespace NimblePros.SampleToDo.Core.Services;\n\npublic class DeleteContributorService : IDeleteContributorService\n{\n  private readonly IRepository<Contributor> _repository;\n  private readonly IMediator _mediator;\n  private readonly ILogger<DeleteContributorService> _logger;\n\n  public DeleteContributorService(IRepository<Contributor> repository,\n    IMediator mediator,\n    ILogger<DeleteContributorService> logger)\n  {\n    _repository = repository;\n    _mediator = mediator;\n    _logger = logger;\n  }\n\n  public async Task<Result> DeleteContributor(int contributorId)\n  {\n    _logger.LogInformation(\"Deleting Contributor {contributorId}\", contributorId);\n    var aggregateToDelete = await _repository.GetByIdAsync(contributorId);\n    if (aggregateToDelete == null) return Result.NotFound();",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\Services\\DeleteContributorService.cs",
      "file_type": "csharp",
      "token_count": 199,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: DeleteContributorService.cs | Type: csharp | Part 2 of 2]\\n\\nawait _repository.DeleteAsync(aggregateToDelete);\n    var domainEvent = new ContributorDeletedEvent(contributorId);\n    await _mediator.Publish(domainEvent);\n    return Result.Success();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\Services\\DeleteContributorService.cs",
      "file_type": "csharp",
      "token_count": 40,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ProjectsWithItemsByContributorId.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Core.ProjectAggregate.Specifications;\n\npublic class ProjectsWithItemsByContributorIdSpec : Specification<Project>\n{\n  public ProjectsWithItemsByContributorIdSpec(int contributorId)\n  {\n    Query\n        .Where(project => project.Items.Any(item => item.ContributorId == contributorId))\n        .Include(project => project.Items);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\ProjectAggregate\\Specifications\\ProjectsWithItemsByContributorId.cs",
      "file_type": "csharp",
      "token_count": 76,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using System.Net.Mail;\nglobal using System.Reflection;\nglobal using Ardalis.SharedKernel;\nglobal using Ardalis.Specification.EntityFrameworkCore;\nglobal using Microsoft.Data.SqlClient;\nglobal using Microsoft.EntityFrameworkCore;\nglobal using Microsoft.EntityFrameworkCore.Metadata.Builders;\nglobal using Microsoft.Extensions.DependencyInjection;\nglobal using Microsoft.Extensions.Logging;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 58,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: AppDbContext.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\nusing NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Data;\n\npublic class AppDbContext : DbContext\n{\n  private readonly IDomainEventDispatcher? _dispatcher;\n\n  public AppDbContext(DbContextOptions<AppDbContext> options,\n    IDomainEventDispatcher? dispatcher)\n      : base(options)\n  {\n    _dispatcher = dispatcher;\n  }\n\n  public DbSet<ToDoItem> ToDoItems => Set<ToDoItem>();\n  public DbSet<Project> Projects => Set<Project>();\n  public DbSet<Contributor> Contributors => Set<Contributor>();\n\n  protected override void OnModelCreating(ModelBuilder modelBuilder)\n  {\n    base.OnModelCreating(modelBuilder);\n    modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());\n  }\n\n  protected override void ConfigureConventions(ModelConfigurationBuilder configurationBuilder)\n  {\n    base.ConfigureConventions(configurationBuilder);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\AppDbContext.cs",
      "file_type": "csharp",
      "token_count": 180,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: AppDbContext.cs | Type: csharp | Part 2 of 2]\\n\\n//configurationBuilder.RegisterAllInVogenEfCoreConverters();\n  }\n\n  public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = new CancellationToken())\n  {\n    int result = await base.SaveChangesAsync(cancellationToken).ConfigureAwait(false);\n\n    // ignore events if no dispatcher provided\n    if (_dispatcher == null) return result;\n\n    // dispatch events only if save was successful\n    var entitiesWithEvents = ChangeTracker.Entries<HasDomainEventsBase>()\n        .Select(e => e.Entity)\n        .Where(e => e.DomainEvents.Any())\n        .ToArray();\n\n    await _dispatcher.DispatchAndClearEvents(entitiesWithEvents);\n\n    return result;\n  }\n\n  public override int SaveChanges()\n  {\n    return SaveChangesAsync().GetAwaiter().GetResult();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\AppDbContext.cs",
      "file_type": "csharp",
      "token_count": 156,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorConfiguration.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Data.Config;\n\npublic class ContributorConfiguration : IEntityTypeConfiguration<Contributor>\n{\n  public void Configure(EntityTypeBuilder<Contributor> builder)\n  {\n    builder.Property(p => p.Name)\n      .HasVogenConversion()\n      .HasMaxLength(DataSchemaConstants.DEFAULT_NAME_LENGTH)\n      .IsRequired();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Config\\ContributorConfiguration.cs",
      "file_type": "csharp",
      "token_count": 82,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService.cs | Type: csharp | Part 1 of 3]\\n\\n﻿using NimblePros.SampleToDo.Core.Interfaces;\nusing NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.Core.ProjectAggregate.Specifications;\n\nnamespace NimblePros.SampleToDo.Core.Services;\n\npublic class ToDoItemSearchService : IToDoItemSearchService\n{\n  private readonly IRepository<Project> _repository;\n\n  public ToDoItemSearchService(IRepository<Project> repository)\n  {\n    _repository = repository;\n  }\n\n  public async Task<Result<List<ToDoItem>>> GetAllIncompleteItemsAsync(ProjectId projectId, string searchString)\n  {\n    if (string.IsNullOrEmpty(searchString))\n    {\n      var errors = new List<ValidationError>\n      {\n        new() { Identifier = nameof(searchString), ErrorMessage = $\"{nameof(searchString)} is required.\" }\n      };\n\n      return Result<List<ToDoItem>>.Invalid(errors);\n    }\n\n    var projectSpec = new ProjectByIdWithItemsSpec(projectId);\n    var project = await _repository.FirstOrDefaultAsync(projectSpec);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\Services\\ToDoItemSearchService.cs",
      "file_type": "csharp",
      "token_count": 192,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService.cs | Type: csharp | Part 2 of 3]\\n\\n// TODO: Optionally use Ardalis.GuardClauses Guard.Against.NotFound and catch\n    if (project == null)\n    {\n      return Result<List<ToDoItem>>.NotFound();\n    }\n\n    var incompleteSpec = new IncompleteItemsSearchSpec(searchString);\n    try\n    {\n      var items = incompleteSpec.Evaluate(project.Items).ToList();\n\n      return new Result<List<ToDoItem>>(items);\n    }\n    catch (Exception ex)\n    {\n      // TODO: Log details here\n      return Result<List<ToDoItem>>.Error( ex.Message );\n    }\n  }\n\n  public async Task<Result<ToDoItem>> GetNextIncompleteItemAsync(ProjectId projectId)\n  {\n    var projectSpec = new ProjectByIdWithItemsSpec(projectId);\n    var project = await _repository.FirstOrDefaultAsync(projectSpec);\n    if (project == null)\n    {\n      return Result<ToDoItem>.NotFound();\n    }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\Services\\ToDoItemSearchService.cs",
      "file_type": "csharp",
      "token_count": 185,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService.cs | Type: csharp | Part 3 of 3]\\n\\nvar incompleteSpec = new IncompleteItemsSpec();\n    var items = incompleteSpec.Evaluate(project.Items).ToList();\n    if (!items.Any())\n    {\n      return Result<ToDoItem>.NotFound();\n    }\n\n    return new Result<ToDoItem>(items.First());\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\Services\\ToDoItemSearchService.cs",
      "file_type": "csharp",
      "token_count": 55,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: InfrastructureServiceExtensions.cs | Type: csharp | Part 1 of 5]\\n\\n﻿using Microsoft.Extensions.Configuration;\nusing NimblePros.SampleToDo.Core.Interfaces;\nusing NimblePros.SampleToDo.Infrastructure.Data;\nusing NimblePros.SampleToDo.Infrastructure.Data.Queries;\nusing NimblePros.SampleToDo.Infrastructure.Email;\nusing NimblePros.SampleToDo.UseCases.Contributors.Queries.List;\nusing NimblePros.SampleToDo.UseCases.Projects.ListIncompleteItems;\nusing NimblePros.SampleToDo.UseCases.Projects.ListShallow;\nusing NimblePros.Metronome;\n\nnamespace NimblePros.SampleToDo.Infrastructure;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\InfrastructureServiceExtensions.cs",
      "file_type": "csharp",
      "token_count": 103,
      "chunk_index": 0,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: InfrastructureServiceExtensions.cs | Type: csharp | Part 2 of 5]\\n\\nnamespace NimblePros.SampleToDo.Infrastructure;\n\npublic static class InfrastructureServiceExtensions\n{\n  public static IServiceCollection AddInfrastructureServices(\n    this IServiceCollection services,\n    IConfiguration configuration,\n    ILogger logger,\n    string environmentName)\n  {\n    if (environmentName == \"Development\")\n    {\n      RegisterDevelopmentOnlyDependencies(services, configuration);\n    }\n    else if (environmentName == \"Testing\")\n    {\n      RegisterTestingOnlyDependencies(services);\n    }\n    else\n    {\n      RegisterProductionOnlyDependencies(services, configuration);\n    }\n    \n    RegisterEFRepositories(services);\n    \n    logger.LogInformation(\"{Project} services registered\", \"Infrastructure\");\n    \n    return services;\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\InfrastructureServiceExtensions.cs",
      "file_type": "csharp",
      "token_count": 136,
      "chunk_index": 1,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: InfrastructureServiceExtensions.cs | Type: csharp | Part 3 of 5]\\n\\nprivate static void AddDbContextWithSqlite(IServiceCollection services, IConfiguration configuration)\n  {\n    var connectionString = configuration.GetConnectionString(\"SqliteConnection\");\n    services.AddDbContext<AppDbContext>((provider, options) =>\n              options.UseSqlite(connectionString)\n              .AddMetronomeDbTracking(provider));\n  }\n\n\n  private static void RegisterDevelopmentOnlyDependencies(IServiceCollection services, IConfiguration configuration)\n  {\n    AddDbContextWithSqlite(services, configuration);\n    services.AddScoped<IEmailSender, SmtpEmailSender>();\n    services.AddScoped<IListContributorsQueryService, ListContributorsQueryService>();\n    services.AddScoped<IListIncompleteItemsQueryService, ListIncompleteItemsQueryService>();\n    services.AddScoped<IListProjectsShallowQueryService, ListProjectsShallowQueryService>();\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\InfrastructureServiceExtensions.cs",
      "file_type": "csharp",
      "token_count": 150,
      "chunk_index": 2,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: InfrastructureServiceExtensions.cs | Type: csharp | Part 4 of 5]\\n\\nprivate static void RegisterTestingOnlyDependencies(IServiceCollection services)\n  {\n    // do not configure a DbContext here for testing - it's configured in CustomWebApplicationFactory\n\n    services.AddScoped<IEmailSender, FakeEmailSender>();\n    services.AddScoped<IListContributorsQueryService, FakeListContributorsQueryService>();\n    services.AddScoped<IListIncompleteItemsQueryService, FakeListIncompleteItemsQueryService>();\n    services.AddScoped<IListProjectsShallowQueryService, FakeListProjectsShallowQueryService>();\n  }\n\n  private static void RegisterProductionOnlyDependencies(IServiceCollection services, IConfiguration configuration)\n  {\n    AddDbContextWithSqlite(services, configuration);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\InfrastructureServiceExtensions.cs",
      "file_type": "csharp",
      "token_count": 125,
      "chunk_index": 3,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: InfrastructureServiceExtensions.cs | Type: csharp | Part 5 of 5]\\n\\nservices.AddScoped<IEmailSender, SmtpEmailSender>();\n    services.AddScoped<IListContributorsQueryService, ListContributorsQueryService>();\n    services.AddScoped<IListIncompleteItemsQueryService, ListIncompleteItemsQueryService>();\n    services.AddScoped<IListProjectsShallowQueryService, ListProjectsShallowQueryService>();\n  }\n\n  private static void RegisterEFRepositories(IServiceCollection services)\n  {\n    services.AddScoped(typeof(IRepository<>), typeof(EfRepository<>));\n    services.AddScoped(typeof(IReadRepository<>), typeof(EfRepository<>));\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\InfrastructureServiceExtensions.cs",
      "file_type": "csharp",
      "token_count": 107,
      "chunk_index": 4,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: ProjectConfiguration.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Data.Config;\n\npublic class ProjectConfiguration : IEntityTypeConfiguration<Project>\n{\n  public void Configure(EntityTypeBuilder<Project> builder)\n  {\n    builder.Property(p => p.Id)\n      .HasValueGenerator<VogenIdValueGenerator<AppDbContext, Project, ProjectId>>()\n      .HasVogenConversion()\n      .IsRequired();\n    builder.Property(p => p.Name)\n      .HasVogenConversion()\n      .HasMaxLength(DataSchemaConstants.DEFAULT_NAME_LENGTH)\n      .IsRequired();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Config\\ProjectConfiguration.cs",
      "file_type": "csharp",
      "token_count": 114,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: DataSchemaConstants.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Infrastructure.Data.Config;\n\npublic static class DataSchemaConstants\n{\n  public const int DEFAULT_NAME_LENGTH = 100;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Config\\DataSchemaConstants.cs",
      "file_type": "csharp",
      "token_count": 30,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: EfRepository.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Infrastructure.Data;\n\n// inherit from Ardalis.Specification type\npublic class EfRepository<T> : RepositoryBase<T>, IReadRepository<T>, IRepository<T> where T : class, IAggregateRoot\n{\n  public EfRepository(AppDbContext dbContext) : base(dbContext)\n  {\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\EfRepository.cs",
      "file_type": "csharp",
      "token_count": 65,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: VogenIdValueGenerator.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using System.Reflection;\nusing Ardalis.SharedKernel;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.ChangeTracking;\nusing Microsoft.EntityFrameworkCore.ValueGeneration;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Data.Config;\n\ninternal class VogenIdValueGenerator<TContext, TEntityBase, TId> : ValueGenerator<TId>\n    where TContext : DbContext\n    where TEntityBase : EntityBase<TEntityBase, TId>\n    where TId : IVogen<TId, int>\n{\n  private readonly PropertyInfo _matchPropertyGetter;\n\n  public VogenIdValueGenerator()\n  {\n    var matchingProperties =\n        typeof(TContext).GetProperties().Where(p => p.GetGetMethod().IsPublic && p.PropertyType == typeof(DbSet<TEntityBase>)).ToList();\n\n    if (matchingProperties.Count == 0)\n    {\n      throw new InvalidOperationException($\"No properties found in the EFCore context for a DBSet of {nameof(TEntityBase)}\");\n    }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Config\\VogenIdValueGenerator.cs",
      "file_type": "csharp",
      "token_count": 184,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: VogenIdValueGenerator.cs | Type: csharp | Part 2 of 2]\\n\\nif (matchingProperties.Count > 1)\n    {\n      throw new InvalidOperationException($\"Multiple properties found in the EFCore context for a DBSet of {nameof(TEntityBase)}\");\n    }\n\n    _matchPropertyGetter = matchingProperties[0];\n  }\n\n  public override TId Next(EntityEntry entry)\n  {\n    TContext ctx = (TContext)entry.Context;\n\n    DbSet<TEntityBase> entities = (DbSet<TEntityBase>)_matchPropertyGetter.GetValue(ctx);\n\n    var next = Math.Max(\n        MaxFrom(entities.Local),\n        MaxFrom(entities)) + 1;\n\n    return TId.From(next);\n\n    static int MaxFrom(IEnumerable<TEntityBase> es) =>\n        es.Any() ? es.Max(e => e.Id.Value) : 0;\n  }\n\n\n  public override bool GeneratesTemporaryValues => false;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Config\\VogenIdValueGenerator.cs",
      "file_type": "csharp",
      "token_count": 166,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ToDoItemConfiguration.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Data.Config;\n\npublic class ToDoItemConfiguration : IEntityTypeConfiguration<ToDoItem>\n{\n  public void Configure(EntityTypeBuilder<ToDoItem> builder)\n  {\n    builder.Property(p => p.Id)\n      .HasValueGenerator<VogenIdValueGenerator<AppDbContext, ToDoItem, ToDoItemId>>()\n      .HasVogenConversion()\n      .IsRequired();\n    builder.Property(t => t.Title)\n        .IsRequired();\n    builder.Property(t => t.ContributorId)\n        .IsRequired(false);\n    builder.Property(t => t.Priority)\n      .HasConversion(\n          p => p.Value,\n          p => Priority.FromValue(p));\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Config\\ToDoItemConfiguration.cs",
      "file_type": "csharp",
      "token_count": 146,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: VogenEfCoreConverters.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\nusing NimblePros.SampleToDo.Core.ProjectAggregate;\nusing Vogen;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Data.Config;\n\n[EfCoreConverter<ToDoItemId>]\n[EfCoreConverter<ContributorName>]\n[EfCoreConverter<ProjectName>]\n[EfCoreConverter<ProjectId>]\ninternal partial class VogenEfCoreConverters;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Config\\VogenEfCoreConverters.cs",
      "file_type": "csharp",
      "token_count": 81,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: FakeListContributorsQueryService.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.UseCases.Contributors;\nusing NimblePros.SampleToDo.UseCases.Contributors.Queries.List;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Data.Queries;\n\npublic class FakeListContributorsQueryService : IListContributorsQueryService\n{\n  public Task<IEnumerable<ContributorDTO>> ListAsync()\n  {\n    var result = new List<ContributorDTO>() { new ContributorDTO(1, \"Ardalis\"), new ContributorDTO(2, \"Snowfrog\") };\n    return Task.FromResult(result.AsEnumerable());\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Queries\\FakeListContributorsQueryService.cs",
      "file_type": "csharp",
      "token_count": 113,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: FakeListProjectsShallowQueryService.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.UseCases.Projects.ListShallow;\nusing NimblePros.SampleToDo.UseCases.Projects;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Data.Queries;\n\npublic class FakeListProjectsShallowQueryService : IListProjectsShallowQueryService\n{\n  public async Task<IEnumerable<ProjectDTO>> ListAsync()\n  {\n    var testProject = new ProjectDTO(1000, \"Test Project\", \"InProgress\");\n    return await Task.FromResult(new List<ProjectDTO> { testProject });\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Queries\\FakeListProjectsShallowQueryService.cs",
      "file_type": "csharp",
      "token_count": 103,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListContributorsQueryService.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.UseCases.Contributors;\nusing NimblePros.SampleToDo.UseCases.Contributors.Queries.List;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Data.Queries;\n\npublic class ListContributorsQueryService : IListContributorsQueryService\n{\n  // You can use EF, Dapper, SqlClient, etc. for queries\n  private readonly AppDbContext _db;\n\n  public ListContributorsQueryService(AppDbContext db)\n  {\n    _db = db;\n  }\n\n  public async Task<IEnumerable<ContributorDTO>> ListAsync()\n  {\n    var result = await _db.Contributors.FromSqlRaw(\"SELECT Id, Name FROM Contributors\") // don't fetch other big columns\n      .Select(c => new ContributorDTO(c.Id, c.Name.Value))\n      .ToListAsync();\n\n    return result;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Queries\\ListContributorsQueryService.cs",
      "file_type": "csharp",
      "token_count": 170,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: FakeListIncompleteItemsQueryService.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.UseCases.Projects;\nusing NimblePros.SampleToDo.UseCases.Projects.ListIncompleteItems;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Data.Queries;\n\npublic class FakeListIncompleteItemsQueryService : IListIncompleteItemsQueryService\n{\n  public async Task<IEnumerable<ToDoItemDTO>> ListAsync(int projectId)\n  {\n    var testItem = new ToDoItemDTO(Id: 1000, Title: \"test\", Description: \"test description\", IsComplete: false, null);\n    return await Task.FromResult(new List<ToDoItemDTO>() { testItem});\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Queries\\FakeListIncompleteItemsQueryService.cs",
      "file_type": "csharp",
      "token_count": 121,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListProjectsShallowQueryService.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.UseCases.Projects;\nusing NimblePros.SampleToDo.UseCases.Projects.ListShallow;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Data.Queries;\n\npublic class ListProjectsShallowQueryService(AppDbContext db) : \n  IListProjectsShallowQueryService\n{\n  private readonly AppDbContext _db = db;\n\n  public async Task<IEnumerable<ProjectDTO>> ListAsync()\n  {\n    var result = await _db.Projects.FromSqlRaw(\"SELECT Id, Name FROM Projects\") // don't fetch other big columns\n      .Select(x => new ProjectDTO(x.Id.Value, x.Name.Value, x.Status.ToString()))\n      .ToListAsync();\n\n    return result;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Queries\\ListProjectsShallowQueryService.cs",
      "file_type": "csharp",
      "token_count": 141,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListIncompleteItemsQueryService.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.UseCases.Projects;\nusing NimblePros.SampleToDo.UseCases.Projects.ListIncompleteItems;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Data.Queries;\n\npublic class ListIncompleteItemsQueryService : IListIncompleteItemsQueryService\n{\n  private readonly AppDbContext _db;\n\n  public ListIncompleteItemsQueryService(AppDbContext db)\n  {\n    _db = db;\n  }\n\n  public async Task<IEnumerable<ToDoItemDTO>> ListAsync(int projectId)\n  {\n    var projectParameter = new SqlParameter(\"@projectId\", System.Data.SqlDbType.Int);\n    var result = await _db.ToDoItems.FromSqlRaw(\"SELECT Id, Title, Description, IsDone, ContributorId FROM ToDoItems WHERE ProjectId = @ProjectId\",\n      projectParameter) // don't fetch other big columns\n      .Select(x => new ToDoItemDTO(x.Id.Value, x.Title, x.Description, x.IsDone, x.ContributorId))\n      .ToListAsync();\n\n    return result;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Data\\Queries\\ListIncompleteItemsQueryService.cs",
      "file_type": "csharp",
      "token_count": 202,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: MailserverConfiguration.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Infrastructure.Email;\n\npublic class MailserverConfiguration()\n{\n  public string Hostname { get; set; } = \"localhost\";\n  public int Port { get; set; } = 25;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Email\\MailserverConfiguration.cs",
      "file_type": "csharp",
      "token_count": 46,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: FakeEmailSender.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.Interfaces;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Email;\n\npublic class FakeEmailSender : IEmailSender\n{\n  private readonly ILogger<FakeEmailSender> _logger;\n\n  public FakeEmailSender(ILogger<FakeEmailSender> logger)\n  {\n    _logger = logger;\n  }\n  public Task SendEmailAsync(string to, string from, string subject, string body)\n  {\n    _logger.LogInformation(\"Not actually sending an email to {to} from {from} with subject {subject}\", to, from, subject);\n    return Task.CompletedTask;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Email\\FakeEmailSender.cs",
      "file_type": "csharp",
      "token_count": 123,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: MimeKitEmailSender.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Microsoft.Extensions.Options;\nusing MimeKit;\nusing NimblePros.SampleToDo.Core.Interfaces;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Email;\n\npublic class MimeKitEmailSender(ILogger<MimeKitEmailSender> logger,\n  IOptions<MailserverConfiguration> mailserverOptions) : IEmailSender\n{\n  private readonly ILogger<MimeKitEmailSender> _logger = logger;\n  private readonly MailserverConfiguration _mailserverConfiguration = mailserverOptions.Value!;\n\n  public async Task SendEmailAsync(string to, string from, string subject, string body)\n  {\n    _logger.LogWarning(\"Sending email to {to} from {from} with subject {subject} using {type}.\", to, from, subject, ToString());",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Email\\MimeKitEmailSender.cs",
      "file_type": "csharp",
      "token_count": 147,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: MimeKitEmailSender.cs | Type: csharp | Part 2 of 2]\\n\\nusing var client = new MailKit.Net.Smtp.SmtpClient();\n    await client.ConnectAsync(_mailserverConfiguration.Hostname,\n      _mailserverConfiguration.Port, false);\n    var message = new MimeMessage();\n    message.From.Add(new MailboxAddress(from, from));\n    message.To.Add(new MailboxAddress(to, to));\n    message.Subject = subject;\n    message.Body = new TextPart(\"plain\") { Text = body };\n\n    await client.SendAsync(message);\n\n    await client.DisconnectAsync(true,\n      new CancellationToken(canceled: true));\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Email\\MimeKitEmailSender.cs",
      "file_type": "csharp",
      "token_count": 114,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: SmtpEmailSender.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.Interfaces;\n\nnamespace NimblePros.SampleToDo.Infrastructure.Email;\n\npublic class SmtpEmailSender : IEmailSender\n{\n  private readonly ILogger<SmtpEmailSender> _logger;\n\n  public SmtpEmailSender(ILogger<SmtpEmailSender> logger)\n  {\n    _logger = logger;\n  }\n\n  public async Task SendEmailAsync(string to, string from, string subject, string body)\n  {\n    var emailClient = new SmtpClient(\"localhost\");\n    var message = new MailMessage\n    {\n      From = new MailAddress(from),\n      Subject = subject,\n      Body = body\n    };\n    message.To.Add(new MailAddress(to));\n    await emailClient.SendMailAsync(message);\n    _logger.LogWarning(\"Sending email to {to} from {from} with subject {subject}.\", to, from, subject);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\Email\\SmtpEmailSender.cs",
      "file_type": "csharp",
      "token_count": 180,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using Ardalis.Result;\nglobal using Ardalis.SharedKernel;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 14,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorDTO.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Contributors;\npublic record ContributorDTO(int Id, string Name);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\ContributorDTO.cs",
      "file_type": "csharp",
      "token_count": 22,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: CreateContributorHandler.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Contributors.Commands.Create;\n\npublic class CreateContributorHandler : ICommandHandler<CreateContributorCommand, Result<int>>\n{\n  private readonly IRepository<Contributor> _repository;\n\n  public CreateContributorHandler(IRepository<Contributor> repository)\n  {\n    _repository = repository;\n  }\n\n  public async Task<Result<int>> Handle(CreateContributorCommand request,\n    CancellationToken cancellationToken)\n  {\n    var newContributor = new Contributor(request.Name);\n    var createdItem = await _repository.AddAsync(newContributor, cancellationToken);\n\n    return createdItem.Id;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\Commands\\Create\\CreateContributorHandler.cs",
      "file_type": "csharp",
      "token_count": 136,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: CreateContributorCommand.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Contributors.Commands.Create;\n\n/// <summary>\n/// Create a new Contributor.\n/// </summary>\n/// <param name=\"Name\"></param>\npublic record CreateContributorCommand(ContributorName Name) : Ardalis.SharedKernel.ICommand<Result<int>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\Commands\\Create\\CreateContributorCommand.cs",
      "file_type": "csharp",
      "token_count": 72,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: DeleteContributorCommand.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Contributors.Commands.Delete;\n\npublic record DeleteContributorCommand(int ContributorId) : ICommand<Result>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\Commands\\Delete\\DeleteContributorCommand.cs",
      "file_type": "csharp",
      "token_count": 28,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: UpdateContributorCommand.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Contributors.Commands.Update;\n\npublic record UpdateContributorCommand(int ContributorId, ContributorName NewName) : ICommand<Result<ContributorDTO>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\Commands\\Update\\UpdateContributorCommand.cs",
      "file_type": "csharp",
      "token_count": 50,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Extensions.cs | Type: csharp | Part 1 of 5]\\n\\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Diagnostics.HealthChecks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Diagnostics.HealthChecks;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.ServiceDiscovery;\nusing OpenTelemetry;\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Trace;\n\nnamespace Microsoft.Extensions.Hosting;\n\n// Adds common .NET Aspire services: service discovery, resilience, health checks, and OpenTelemetry.\n// This project should be referenced by each service project in your solution.\n// To learn more about using this project, see https://aka.ms/dotnet/aspire/service-defaults\npublic static class Extensions\n{\n    public static TBuilder AddServiceDefaults<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder\n    {\n        builder.ConfigureOpenTelemetry();\n\n        builder.AddDefaultHealthChecks();\n\n        builder.Services.AddServiceDiscovery();",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.ServiceDefaults\\Extensions.cs",
      "file_type": "csharp",
      "token_count": 171,
      "chunk_index": 0,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: Extensions.cs | Type: csharp | Part 2 of 5]\\n\\nbuilder.AddDefaultHealthChecks();\n\n        builder.Services.AddServiceDiscovery();\n\n        builder.Services.ConfigureHttpClientDefaults(http =>\n        {\n            // Turn on resilience by default\n            http.AddStandardResilienceHandler();\n\n            // Turn on service discovery by default\n            http.AddServiceDiscovery();\n        });\n\n        // Uncomment the following to restrict the allowed schemes for service discovery.\n        // builder.Services.Configure<ServiceDiscoveryOptions>(options =>\n        // {\n        //     options.AllowedSchemes = [\"https\"];\n        // });\n\n        return builder;\n    }\n\n    public static TBuilder ConfigureOpenTelemetry<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder\n    {\n        builder.Logging.AddOpenTelemetry(logging =>\n        {\n            logging.IncludeFormattedMessage = true;\n            logging.IncludeScopes = true;\n        });",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.ServiceDefaults\\Extensions.cs",
      "file_type": "csharp",
      "token_count": 161,
      "chunk_index": 1,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: Extensions.cs | Type: csharp | Part 3 of 5]\\n\\nbuilder.Services.AddOpenTelemetry()\n            .WithMetrics(metrics =>\n            {\n                metrics.AddAspNetCoreInstrumentation()\n                    .AddHttpClientInstrumentation()\n                    .AddRuntimeInstrumentation();\n            })\n            .WithTracing(tracing =>\n            {\n                tracing.AddAspNetCoreInstrumentation()\n                    // Uncomment the following line to enable gRPC instrumentation (requires the OpenTelemetry.Instrumentation.GrpcNetClient package)\n                    //.AddGrpcClientInstrumentation()\n                    .AddHttpClientInstrumentation();\n            });\n\n        builder.AddOpenTelemetryExporters();\n\n        return builder;\n    }\n\n    private static TBuilder AddOpenTelemetryExporters<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder\n    {\n        var useOtlpExporter = !string.IsNullOrWhiteSpace(builder.Configuration[\"OTEL_EXPORTER_OTLP_ENDPOINT\"]);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.ServiceDefaults\\Extensions.cs",
      "file_type": "csharp",
      "token_count": 167,
      "chunk_index": 2,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: Extensions.cs | Type: csharp | Part 4 of 5]\\n\\nif (useOtlpExporter)\n        {\n            builder.Services.AddOpenTelemetry().UseOtlpExporter();\n        }\n\n        // Uncomment the following lines to enable the Azure Monitor exporter (requires the Azure.Monitor.OpenTelemetry.AspNetCore package)\n        //if (!string.IsNullOrEmpty(builder.Configuration[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]))\n        //{\n        //    builder.Services.AddOpenTelemetry()\n        //       .UseAzureMonitor();\n        //}\n\n        return builder;\n    }\n\n    public static TBuilder AddDefaultHealthChecks<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder\n    {\n        builder.Services.AddHealthChecks()\n            // Add a default liveness check to ensure app is responsive\n            .AddCheck(\"self\", () => HealthCheckResult.Healthy(), [\"live\"]);\n\n        return builder;\n    }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.ServiceDefaults\\Extensions.cs",
      "file_type": "csharp",
      "token_count": 166,
      "chunk_index": 3,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: Extensions.cs | Type: csharp | Part 5 of 5]\\n\\nreturn builder;\n    }\n\n    public static WebApplication MapDefaultEndpoints(this WebApplication app)\n    {\n        // Adding health checks endpoints to applications in non-development environments has security implications.\n        // See https://aka.ms/dotnet/aspire/healthchecks for details before enabling these endpoints in non-development environments.\n        if (app.Environment.IsDevelopment())\n        {\n            // All health checks must pass for app to be considered ready to accept traffic after starting\n            app.MapHealthChecks(\"/health\");\n\n            // Only health checks tagged with the \"live\" tag must pass for app to be considered alive\n            app.MapHealthChecks(\"/alive\", new HealthCheckOptions\n            {\n                Predicate = r => r.Tags.Contains(\"live\")\n            });\n        }\n\n        return app;\n    }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.ServiceDefaults\\Extensions.cs",
      "file_type": "csharp",
      "token_count": 158,
      "chunk_index": 4,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: UpdateContributorHandler.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Contributors.Commands.Update;\n\npublic class UpdateContributorHandler : ICommandHandler<UpdateContributorCommand, Result<ContributorDTO>>\n{\n  private readonly IRepository<Contributor> _repository;\n\n  public UpdateContributorHandler(IRepository<Contributor> repository)\n  {\n    _repository = repository;\n  }\n\n  public async Task<Result<ContributorDTO>> Handle(UpdateContributorCommand request, CancellationToken cancellationToken)\n  {\n    var existingContributor = await _repository.GetByIdAsync(request.ContributorId, cancellationToken);\n    if (existingContributor == null)\n    {\n      return Result.NotFound();\n    }\n\n    existingContributor.UpdateName(request.NewName!);\n\n    await _repository.UpdateAsync(existingContributor, cancellationToken);\n\n    return Result.Success(new ContributorDTO(existingContributor.Id, existingContributor.Name.Value));\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\Commands\\Update\\UpdateContributorHandler.cs",
      "file_type": "csharp",
      "token_count": 187,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: IListContributorsQueryService.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Contributors.Queries.List;\n\n/// <summary>\n/// Represents a service that will actually fetch the necessary data\n/// Typically implemented in Infrastructure\n/// </summary>\npublic interface IListContributorsQueryService\n{\n  Task<IEnumerable<ContributorDTO>> ListAsync();\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\Queries\\List\\IListContributorsQueryService.cs",
      "file_type": "csharp",
      "token_count": 62,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListContributorsHandler.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Contributors.Queries.List;\n\npublic class ListContributorsHandler : IQueryHandler<ListContributorsQuery, Result<IEnumerable<ContributorDTO>>>\n{\n  private readonly IListContributorsQueryService _query;\n\n  public ListContributorsHandler(IListContributorsQueryService query)\n  {\n    _query = query;\n  }\n\n  public async Task<Result<IEnumerable<ContributorDTO>>> Handle(ListContributorsQuery request, CancellationToken cancellationToken)\n  {\n    var result = await _query.ListAsync();\n\n    return Result.Success(result);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\Queries\\List\\ListContributorsHandler.cs",
      "file_type": "csharp",
      "token_count": 116,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GetContributorQuery.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Contributors.Queries.Get;\n\npublic record GetContributorQuery(int ContributorId) : IQuery<Result<ContributorDTO>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\Queries\\Get\\GetContributorQuery.cs",
      "file_type": "csharp",
      "token_count": 35,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GetContributorHandler.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\nusing NimblePros.SampleToDo.Core.ContributorAggregate.Specifications;\n\nnamespace NimblePros.SampleToDo.UseCases.Contributors.Queries.Get;\n\n/// <summary>\n/// Queries don't necessarily need to use repository methods, but they can if it's convenient\n/// </summary>\npublic class GetContributorHandler : IQueryHandler<GetContributorQuery, Result<ContributorDTO>>\n{\n  private readonly IReadRepository<Contributor> _repository;\n\n  public GetContributorHandler(IReadRepository<Contributor> repository)\n  {\n    _repository = repository;\n  }\n\n  public async Task<Result<ContributorDTO>> Handle(GetContributorQuery request, CancellationToken cancellationToken)\n  {\n    var spec = new ContributorByIdSpec(request.ContributorId);\n    var entity = await _repository.FirstOrDefaultAsync(spec, cancellationToken);\n    if (entity == null) return Result.NotFound();\n\n    return new ContributorDTO(entity.Id, entity.Name.Value);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\Queries\\Get\\GetContributorHandler.cs",
      "file_type": "csharp",
      "token_count": 204,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: DeleteContributorHandler.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.Interfaces;\n\nnamespace NimblePros.SampleToDo.UseCases.Contributors.Commands.Delete;\n\npublic class DeleteContributorHandler : ICommandHandler<DeleteContributorCommand, Result>\n{\n  private readonly IDeleteContributorService _deleteContributorService;\n\n  public DeleteContributorHandler(IDeleteContributorService deleteContributorService)\n  {\n    _deleteContributorService = deleteContributorService;\n  }\n\n  public async Task<Result> Handle(DeleteContributorCommand request, CancellationToken cancellationToken)\n  {\n    // This Approach: Keep Domain Events in the Domain Model / Core project; this becomes a pass-through\n    return await _deleteContributorService.DeleteContributor(request.ContributorId);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\Commands\\Delete\\DeleteContributorHandler.cs",
      "file_type": "csharp",
      "token_count": 146,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: DeleteContributorHandler.cs | Type: csharp | Part 2 of 2]\\n\\n// Another Approach: Do the real work here including dispatching domain events - change the event from internal to public\n    // Ardalis prefers using the service so that \"domain event\" behavior remains in the domain model / core project\n    // var aggregateToDelete = await _repository.GetByIdAsync(request.ContributorId);\n    // if (aggregateToDelete == null) return Result.NotFound();\n\n    // await _repository.DeleteAsync(aggregateToDelete);\n    // var domainEvent = new ContributorDeletedEvent(request.ContributorId);\n    // await _mediator.Publish(domainEvent);\n    // return Result.Success();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\Commands\\Delete\\DeleteContributorHandler.cs",
      "file_type": "csharp",
      "token_count": 123,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ProjectDTO.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Projects;\n\npublic record ProjectDTO(int Id, string Name, string Status);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\ProjectDTO.cs",
      "file_type": "csharp",
      "token_count": 24,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListContributorsQuery.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Contributors.Queries.List;\n\npublic record ListContributorsQuery(int? Skip, int? Take) : IQuery<Result<IEnumerable<ContributorDTO>>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Contributors\\Queries\\List\\ListContributorsQuery.cs",
      "file_type": "csharp",
      "token_count": 40,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ProjectWithAllItemsDTO.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Projects;\npublic record ProjectWithAllItemsDTO(int Id, string Name, List<ToDoItemDTO> Items, string Status);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\ProjectWithAllItemsDTO.cs",
      "file_type": "csharp",
      "token_count": 35,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ToDoItemDTO.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Projects;\n\npublic record ToDoItemDTO(int Id, string Title, string Description, bool IsComplete, int? ContributorId);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\ToDoItemDTO.cs",
      "file_type": "csharp",
      "token_count": 34,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: CreateProjectCommand.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Projects.Create;\n\n/// <summary>\n/// Create a new Project.\n/// </summary>\n/// <param name=\"Name\"></param>\npublic record CreateProjectCommand(string Name) : ICommand<Result<ProjectId>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\Create\\CreateProjectCommand.cs",
      "file_type": "csharp",
      "token_count": 60,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: AddToDoItemHandler.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.Core.ProjectAggregate.Specifications;\n\nnamespace NimblePros.SampleToDo.UseCases.Projects.AddToDoItem;\n\npublic class AddToDoItemHandler : ICommandHandler<AddToDoItemCommand, Result<ToDoItemId>>\n{\n  private readonly IRepository<Project> _repository;\n\n  public AddToDoItemHandler(IRepository<Project> repository)\n  {\n    _repository = repository;\n  }\n\n  public async Task<Result<ToDoItemId>> Handle(AddToDoItemCommand request,\n    CancellationToken cancellationToken)\n  {\n    var spec = new ProjectByIdWithItemsSpec(request.ProjectId);\n    var entity = await _repository.FirstOrDefaultAsync(spec, cancellationToken);\n    if (entity == null)\n    {\n      return Result.NotFound();\n    }\n\n    var newItem = new ToDoItem()\n    {\n      Title = request.Title!,\n      Description = request.Description!\n    };",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\AddToDoItem\\AddToDoItemHandler.cs",
      "file_type": "csharp",
      "token_count": 178,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: AddToDoItemHandler.cs | Type: csharp | Part 2 of 2]\\n\\nif(request.ContributorId.HasValue)\n    {\n      newItem.AddContributor(request.ContributorId.Value);\n    }\n    entity.AddItem(newItem);\n    await _repository.UpdateAsync(entity);\n\n    return Result.Success(newItem.Id);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\AddToDoItem\\AddToDoItemHandler.cs",
      "file_type": "csharp",
      "token_count": 49,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: AddToDoItemCommand.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Projects.AddToDoItem;\n\n/// <summary>\n/// Creates a new ToDoItem and adds it to a Project\n/// </summary>\n/// <param name=\"ProjectId\"></param>\n/// <param name=\"ContributorId\"></param>\n/// <param name=\"Title\"></param>\n/// <param name=\"Description\"></param>\npublic record AddToDoItemCommand(ProjectId ProjectId,\n                                 int? ContributorId,\n                                 string Title,\n                                 string Description) : ICommand<Result<ToDoItemId>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\AddToDoItem\\AddToDoItemCommand.cs",
      "file_type": "csharp",
      "token_count": 117,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: DeleteProjectCommand.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Projects.Delete;\n\npublic record DeleteProjectCommand(ProjectId ProjectId) : ICommand<Result>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\Delete\\DeleteProjectCommand.cs",
      "file_type": "csharp",
      "token_count": 36,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GetProjectWithAllItemsQuery.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Projects.GetWithAllItems;\n\npublic record GetProjectWithAllItemsQuery(ProjectId ProjectId) : IQuery<Result<ProjectWithAllItemsDTO>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\GetWithAllItems\\GetProjectWithAllItemsQuery.cs",
      "file_type": "csharp",
      "token_count": 49,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: CreateProjectHandler.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Projects.Create;\n\npublic class CreateProjectHandler(IRepository<Project> repository) : ICommandHandler<CreateProjectCommand, Result<ProjectId>>\n{\n  private readonly IRepository<Project> _repository = repository;\n\n  public async Task<Result<ProjectId>> Handle(CreateProjectCommand request,\n    CancellationToken cancellationToken)\n  {\n    var newProject = new Project(ProjectName.From(request.Name));\n    // NOTE: This implementation issues 3 queries due to Vogen implementation\n    var createdItem = await _repository.AddAsync(newProject, cancellationToken);\n\n    return createdItem.Id;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\Create\\CreateProjectHandler.cs",
      "file_type": "csharp",
      "token_count": 130,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListIncompleteItemsByProjectHandler.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Projects.ListIncompleteItems;\n\npublic class ListIncompleteItemsByProjectHandler : IQueryHandler<ListIncompleteItemsByProjectQuery, Result<IEnumerable<ToDoItemDTO>>>\n{\n  private readonly IListIncompleteItemsQueryService _query;\n\n  public ListIncompleteItemsByProjectHandler(IListIncompleteItemsQueryService query)\n  {\n    _query = query;\n  }\n\n  public async Task<Result<IEnumerable<ToDoItemDTO>>> Handle(ListIncompleteItemsByProjectQuery request,\n    CancellationToken cancellationToken)\n  {\n    var result = await _query.ListAsync(request.ProjectId);\n\n    return Result.Success(result);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\ListIncompleteItems\\ListIncompleteItemsByProjectHandler.cs",
      "file_type": "csharp",
      "token_count": 127,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GetProjectWithAllItemsHandler.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.Core.ProjectAggregate.Specifications;\n\nnamespace NimblePros.SampleToDo.UseCases.Projects.GetWithAllItems;\n\n/// <summary>\n/// Queries don't necessarily need to use repository methods, but they can if it's convenient\n/// </summary>\npublic class GetProjectWithAllItemsHandler : IQueryHandler<GetProjectWithAllItemsQuery, Result<ProjectWithAllItemsDTO>>\n{\n  private readonly IReadRepository<Project> _repository;\n\n  public GetProjectWithAllItemsHandler(IReadRepository<Project> repository)\n  {\n    _repository = repository;\n  }\n\n  public async Task<Result<ProjectWithAllItemsDTO>> Handle(GetProjectWithAllItemsQuery request, CancellationToken cancellationToken)\n  {\n    var spec = new ProjectByIdWithItemsSpec(request.ProjectId);\n    var entity = await _repository.FirstOrDefaultAsync(spec, cancellationToken);\n    if (entity == null) return Result.NotFound();",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\GetWithAllItems\\GetProjectWithAllItemsHandler.cs",
      "file_type": "csharp",
      "token_count": 191,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: GetProjectWithAllItemsHandler.cs | Type: csharp | Part 2 of 2]\\n\\nvar items = entity.Items\n              .Select(i => new ToDoItemDTO(i.Id.Value, i.Title, i.Description, i.IsDone, i.ContributorId)).ToList();\n    return new ProjectWithAllItemsDTO(entity.Id.Value, entity.Name.Value, items, entity.Status.ToString())\n      ;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\GetWithAllItems\\GetProjectWithAllItemsHandler.cs",
      "file_type": "csharp",
      "token_count": 64,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: IListIncompleteItemsQueryService.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Projects.ListIncompleteItems;\n\n/// <summary>\n/// Represents a service that will actually fetch the necessary data\n/// Typically implemented in Infrastructure\n/// </summary>\npublic interface IListIncompleteItemsQueryService\n{\n  Task<IEnumerable<ToDoItemDTO>> ListAsync(int projectId);\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\ListIncompleteItems\\IListIncompleteItemsQueryService.cs",
      "file_type": "csharp",
      "token_count": 63,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: DeleteProjectHandler.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Projects.Delete;\n\npublic class DeleteProjectHandler : ICommandHandler<DeleteProjectCommand, Result>\n{\n  private readonly IRepository<Project> _repository;\n\n  public DeleteProjectHandler(IRepository<Project> repository)\n  {\n    _repository = repository;\n  }\n\n  public async Task<Result> Handle(DeleteProjectCommand request, CancellationToken cancellationToken)\n  {\n    var aggregateToDelete = await _repository.GetByIdAsync(request.ProjectId, cancellationToken);\n    if (aggregateToDelete == null)\n    {\n      return Result.NotFound();\n    }\n\n    await _repository.DeleteAsync(aggregateToDelete, cancellationToken);\n\n    return Result.Success();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\Delete\\DeleteProjectHandler.cs",
      "file_type": "csharp",
      "token_count": 139,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListProjectsShallowHandler.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Projects.ListShallow;\n\npublic class ListProjectsShallowHandler(IListProjectsShallowQueryService query)\n  : IQueryHandler<ListProjectsShallowQuery, Result<IEnumerable<ProjectDTO>>>\n{\n  private readonly IListProjectsShallowQueryService _query = query;\n\n  public async Task<Result<IEnumerable<ProjectDTO>>> Handle(ListProjectsShallowQuery request, CancellationToken cancellationToken)\n  {\n    var result = await _query.ListAsync();\n\n    return Result.Success(result);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\ListShallow\\ListProjectsShallowHandler.cs",
      "file_type": "csharp",
      "token_count": 103,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListIncompleteItemsByProjectQuery.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Projects.ListIncompleteItems;\n\npublic record ListIncompleteItemsByProjectQuery(int ProjectId) : IQuery<Result<IEnumerable<ToDoItemDTO>>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\ListIncompleteItems\\ListIncompleteItemsByProjectQuery.cs",
      "file_type": "csharp",
      "token_count": 37,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: IListProjectsShallowQueryService.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Projects.ListShallow;\n\n/// <summary>\n/// Represents a service that will actually fetch the necessary data\n/// Typically implemented in Infrastructure\n/// </summary>\npublic interface IListProjectsShallowQueryService\n{\n  Task<IEnumerable<ProjectDTO>> ListAsync();\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\ListShallow\\IListProjectsShallowQueryService.cs",
      "file_type": "csharp",
      "token_count": 60,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: MarkToDoItemCompleteCommand.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Projects.MarkToDoItemComplete;\n\n/// <summary>\n/// Create a new Project.\n/// </summary>\n/// <param name=\"Name\"></param>\npublic record MarkToDoItemCompleteCommand(ProjectId ProjectId, int ToDoItemId) : Ardalis.SharedKernel.ICommand<Result>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\MarkToDoItemComplete\\MarkToDoItemCompleteCommand.cs",
      "file_type": "csharp",
      "token_count": 73,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListProjectsShallowQuery.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.UseCases.Projects.ListShallow;\n\npublic record ListProjectsShallowQuery(int? Skip, int? Take) : IQuery<Result<IEnumerable<ProjectDTO>>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\ListShallow\\ListProjectsShallowQuery.cs",
      "file_type": "csharp",
      "token_count": 38,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: UpdateProjectCommand.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Projects.Update;\n\npublic record UpdateProjectCommand(ProjectId ProjectId, ProjectName NewName) : ICommand<Result<ProjectDTO>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\Update\\UpdateProjectCommand.cs",
      "file_type": "csharp",
      "token_count": 44,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: MarkToDoItemCompleteHandler.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.Core.ProjectAggregate.Specifications;\n\nnamespace NimblePros.SampleToDo.UseCases.Projects.MarkToDoItemComplete;\n\npublic class MarkToDoItemCompleteHandler : ICommandHandler<MarkToDoItemCompleteCommand, Result>\n{\n  private readonly IRepository<Project> _repository;\n\n  public MarkToDoItemCompleteHandler(IRepository<Project> repository)\n  {\n    _repository = repository;\n  }\n\n  public async Task<Result> Handle(MarkToDoItemCompleteCommand request,\n    CancellationToken cancellationToken)\n  {\n    var spec = new ProjectByIdWithItemsSpec(request.ProjectId);\n    var entity = await _repository.FirstOrDefaultAsync(spec, cancellationToken);\n    if (entity == null) return Result.NotFound(\"Project not found.\");\n\n    var item = entity.Items.FirstOrDefault(i => i.Id == request.ToDoItemId);\n    if (item == null) return Result.NotFound(\"Item not found.\");\n\n    item.MarkComplete();\n    await _repository.UpdateAsync(entity);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\MarkToDoItemComplete\\MarkToDoItemCompleteHandler.cs",
      "file_type": "csharp",
      "token_count": 197,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: MarkToDoItemCompleteHandler.cs | Type: csharp | Part 2 of 2]\\n\\nitem.MarkComplete();\n    await _repository.UpdateAsync(entity);\n\n    return Result.Success();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\MarkToDoItemComplete\\MarkToDoItemCompleteHandler.cs",
      "file_type": "csharp",
      "token_count": 20,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: UpdateProjectHandler.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.UseCases.Projects.Update;\n\npublic class UpdateProjectHandler : ICommandHandler<UpdateProjectCommand, Result<ProjectDTO>>\n{\n  private readonly IRepository<Project> _repository;\n\n  public UpdateProjectHandler(IRepository<Project> repository)\n  {\n    _repository = repository;\n  }\n\n  public async Task<Result<ProjectDTO>> Handle(UpdateProjectCommand request, CancellationToken cancellationToken)\n  {\n    var existingEntity = await _repository.GetByIdAsync(request.ProjectId, cancellationToken);\n    if (existingEntity == null)\n    {\n      return Result.NotFound();\n    }\n\n    existingEntity.UpdateName(request.NewName!);\n\n    await _repository.UpdateAsync(existingEntity, cancellationToken);\n\n    return Result.Success(new ProjectDTO(existingEntity.Id.Value, existingEntity.Name.Value, existingEntity.Status.ToString()));\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\Projects\\Update\\UpdateProjectHandler.cs",
      "file_type": "csharp",
      "token_count": 169,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using System.Reflection;\nglobal using Ardalis.ListStartupServices;\nglobal using Ardalis.Result;\nglobal using Ardalis.SharedKernel;\nglobal using FastEndpoints;\nglobal using FastEndpoints.Swagger;\nglobal using MediatR;\nglobal using Microsoft.EntityFrameworkCore;\nglobal using Serilog;\nglobal using Serilog.Extensions.Logging;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 63,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: SeedData.cs | Type: csharp | Part 1 of 4]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\nusing NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.Infrastructure.Data;\n\nnamespace NimblePros.SampleToDo.Web;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\SeedData.cs",
      "file_type": "csharp",
      "token_count": 39,
      "chunk_index": 0,
      "total_chunks": 4
    }
  },
  {
    "page_content": "[File: SeedData.cs | Type: csharp | Part 2 of 4]\\n\\nnamespace NimblePros.SampleToDo.Web;\n\npublic static class SeedData\n{\n  public static readonly Contributor Contributor1 = new (ContributorName.From(\"Ardalis\"));\n  public static readonly Contributor Contributor2 = new (ContributorName.From(\"Snowfrog\"));\n  public static readonly Project TestProject1 = new Project(ProjectName.From(\"Test Project\"));\n  public static readonly ToDoItem ToDoItem1 = new ToDoItem\n  {\n    Title = \"Get Sample Working\",\n    Description = \"Try to get the sample to build.\"\n  };\n  public static readonly ToDoItem ToDoItem2 = new ToDoItem\n  {\n    Title = \"Review Solution\",\n    Description = \"Review the different projects in the solution and how they relate to one another.\"\n  };\n  public static readonly ToDoItem ToDoItem3 = new ToDoItem\n  {\n    Title = \"Run and Review Tests\",\n    Description = \"Make sure all the tests run and review what they are doing.\"\n  };",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\SeedData.cs",
      "file_type": "csharp",
      "token_count": 196,
      "chunk_index": 1,
      "total_chunks": 4
    }
  },
  {
    "page_content": "[File: SeedData.cs | Type: csharp | Part 3 of 4]\\n\\npublic static async Task InitializeAsync(AppDbContext dbContext)\n  {\n      if (await dbContext.ToDoItems.AnyAsync())\n      {\n        return;   // DB has been seeded\n      }\n\n      await PopulateTestDataAsync(dbContext);\n  }\n\n  public static async Task PopulateTestDataAsync(AppDbContext dbContext)\n  {\n    foreach (var item in dbContext.Projects)\n    {\n      dbContext.Remove(item);\n    }\n    foreach (var item in dbContext.ToDoItems)\n    {\n      dbContext.Remove(item);\n    }\n    foreach (var item in dbContext.Contributors)\n    {\n      dbContext.Remove(item);\n    }\n    await dbContext.SaveChangesAsync();\n\n    dbContext.Contributors.Add(Contributor1);\n    dbContext.Contributors.Add(Contributor2);\n\n    await dbContext.SaveChangesAsync();\n\n    ToDoItem1.AddContributor(Contributor1.Id);\n    ToDoItem2.AddContributor(Contributor2.Id);\n    ToDoItem3.AddContributor(Contributor1.Id);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\SeedData.cs",
      "file_type": "csharp",
      "token_count": 191,
      "chunk_index": 2,
      "total_chunks": 4
    }
  },
  {
    "page_content": "[File: SeedData.cs | Type: csharp | Part 4 of 4]\\n\\nTestProject1.AddItem(ToDoItem1);\n    TestProject1.AddItem(ToDoItem2);\n    TestProject1.AddItem(ToDoItem3);\n    dbContext.Projects.Add(TestProject1);\n\n    await dbContext.SaveChangesAsync();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\SeedData.cs",
      "file_type": "csharp",
      "token_count": 46,
      "chunk_index": 3,
      "total_chunks": 4
    }
  },
  {
    "page_content": "[File: Program.cs | Type: csharp | Part 1 of 3]\\n\\n﻿using FluentValidation;\nusing NimblePros.SampleToDo.Infrastructure.Data;\nusing NimblePros.SampleToDo.Web.Configurations;\nusing NimblePros.SampleToDo.Web.Projects;\nusing FluentValidation;\nusing NimblePros.Metronome;\n\npublic partial class Program\n{\n  private static async Task Main(string[] args)\n  {\n    var builder = WebApplication.CreateBuilder(args);\n\n    var logger = Log.Logger = new LoggerConfiguration()\n      .Enrich.FromLogContext()\n      .WriteTo.Console()\n      .CreateLogger();\n\n    logger.Information(\"Starting web host\");\n\n    builder.AddLoggerConfigs();\n\n    var appLogger = new SerilogLoggerFactory(logger)\n        .CreateLogger<Program>();\n\n    builder.Services.AddOptionConfigs(builder.Configuration, appLogger, builder);\n    builder.Services.AddServiceConfigs(appLogger, builder);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Program.cs",
      "file_type": "csharp",
      "token_count": 162,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: Program.cs | Type: csharp | Part 2 of 3]\\n\\nbuilder.Services.AddFastEndpoints()\n                    .SwaggerDocument(o =>\n                    {\n                      o.ShortSchemaNames = true;\n                    });\n    builder.Services.AddValidatorsFromAssemblyContaining<UpdateProjectRequestValidator>();\n\n    if (builder.Environment.EnvironmentName == \"Development\")\n    {\n      // verify validators are added properly\n      var serviceProvider = builder.Services.BuildServiceProvider();\n      var validatorsCount = serviceProvider.GetServices<IValidator<UpdateProjectRequest>>().Count();\n      appLogger.LogInformation(\"Validators found: {validatorsCount}\", validatorsCount);\n    }\n\n    if (!builder.Environment.EnvironmentName.Equals(\"Testing\"))\n    {\n      var connectionString = builder.Configuration.GetConnectionString(\"SqliteConnection\");\n      builder.Services.AddDbContext<AppDbContext>(options =>\n                options.UseSqlite(connectionString));\n    }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Program.cs",
      "file_type": "csharp",
      "token_count": 148,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: Program.cs | Type: csharp | Part 3 of 3]\\n\\n// add list services for diagnostic purposes - see https://github.com/ardalis/AspNetCoreStartupServices\n    builder.Services.Configure((Ardalis.ListStartupServices.ServiceConfig config) =>\n    {\n      config.Services = new List<ServiceDescriptor>(builder.Services);\n\n      // optional - default path to view services is /listallservices - recommended to choose your own path\n      config.Path = \"/listservices\";\n    });\n\n    // track db and external service calls\n    builder.Services.AddMetronome();\n\n        var app = builder.Build();\n\n    await app.UseAppMiddleware();\n\n    app.Run();\n  }\n}\n\n// Make the implicit Program.cs class public, so integration tests can reference the correct assembly for host building\npublic partial class Program\n{\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Program.cs",
      "file_type": "csharp",
      "token_count": 150,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: LoggerConfig.cs | Type: csharp]\\n\\n﻿using Serilog;\n\nnamespace NimblePros.SampleToDo.Web.Configurations;\n\npublic static class LoggerConfig\n{\n  public static WebApplicationBuilder AddLoggerConfigs(this WebApplicationBuilder builder)\n  {\n\n    builder.Host.UseSerilog((_, config) => config.ReadFrom.Configuration(builder.Configuration));\n\n    return builder;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Configurations\\LoggerConfig.cs",
      "file_type": "csharp",
      "token_count": 61,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: MediatrConfig.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\nusing NimblePros.SampleToDo.Infrastructure;\nusing NimblePros.SampleToDo.UseCases.Contributors.Commands.Create;\n\nnamespace NimblePros.SampleToDo.Web.Configurations;\n\npublic static class MediatrConfig\n{\n  public static IServiceCollection AddMediatrConfigs(this IServiceCollection services)\n  {\n    var mediatRAssemblies = new[]\n      {\n        Assembly.GetAssembly(typeof(Contributor)), // Core\n        Assembly.GetAssembly(typeof(CreateContributorCommand)), // UseCases\n        Assembly.GetAssembly(typeof(InfrastructureServiceExtensions)) // Infrastructure\n      };\n\n    services.AddMediatR(cfg => cfg.RegisterServicesFromAssemblies(mediatRAssemblies!))\n            .AddScoped(typeof(IPipelineBehavior<,>), typeof(LoggingBehavior<,>))\n            .AddScoped<IDomainEventDispatcher, MediatRDomainEventDispatcher>();\n\n    return services;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Configurations\\MediatrConfig.cs",
      "file_type": "csharp",
      "token_count": 188,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ServiceConfigs.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Infrastructure;\nusing NimblePros.SampleToDo.Core;\nusing NimblePros.Metronome;\n\nnamespace NimblePros.SampleToDo.Web.Configurations;\n\npublic static class ServiceConfig\n{\n  public static IServiceCollection AddServiceConfigs(this IServiceCollection services,\n                                                     Microsoft.Extensions.Logging.ILogger logger,\n                                                     WebApplicationBuilder builder)\n  {\n    services.AddCoreServices(logger)\n            .AddInfrastructureServices(builder.Configuration, logger, builder.Environment.EnvironmentName)\n            .AddMediatrConfigs();\n\n    // add a default http client\n    services.AddHttpClient(\"Default\")\n      .AddMetronomeHandler();\n\n    logger.LogInformation(\"{Project} services registered\", \"Core and Infrastructure services registered\");\n\n    return services;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Configurations\\ServiceConfigs.cs",
      "file_type": "csharp",
      "token_count": 146,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: MiddlewareConfig.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.Metronome;\nusing NimblePros.SampleToDo.Infrastructure.Data;\n\nnamespace NimblePros.SampleToDo.Web.Configurations;\n\npublic static class MiddlewareConfig\n{\n  public static async Task<IApplicationBuilder> UseAppMiddleware(this WebApplication app)\n  {\n    if (app.Environment.IsDevelopment())\n    {\n      app.UseDeveloperExceptionPage();\n      app.UseShowAllServicesMiddleware(); // see https://github.com/ardalis/AspNetCoreStartupServices\n      app.UseMetronomeLoggingMiddleware();\n    }\n    else\n    {\n      app.UseDefaultExceptionHandler(); // from FastEndpoints\n      app.UseHsts();\n    }\n\n    app.UseFastEndpoints()\n        .UseSwaggerGen(); // Includes AddFileServer and static files middleware\n\n    app.UseHttpsRedirection();\n\n    await SeedDatabase(app);\n\n    return app;\n  }\n\n  static async Task SeedDatabase(WebApplication app)\n  {\n    using var scope = app.Services.CreateScope();\n    var services = scope.ServiceProvider;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Configurations\\MiddlewareConfig.cs",
      "file_type": "csharp",
      "token_count": 199,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: MiddlewareConfig.cs | Type: csharp | Part 2 of 2]\\n\\ntry\n    {\n      var context = services.GetRequiredService<AppDbContext>();\n      //          context.Database.Migrate();\n      context.Database.EnsureCreated();\n      await SeedData.InitializeAsync(context);\n    }\n    catch (Exception ex)\n    {\n      var logger = services.GetRequiredService<ILogger<Program>>();\n      logger.LogError(ex, \"An error occurred seeding the DB. {exceptionMessage}\", ex.Message);\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Configurations\\MiddlewareConfig.cs",
      "file_type": "csharp",
      "token_count": 86,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorRecord.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Contributors;\n\npublic record ContributorRecord(int Id, string Name);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\ContributorRecord.cs",
      "file_type": "csharp",
      "token_count": 21,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: OptionConfigs.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Infrastructure.Email;\n\nnamespace NimblePros.SampleToDo.Web.Configurations;\n\npublic static class OptionConfig\n{\n  public static IServiceCollection AddOptionConfigs(this IServiceCollection services,\n                                                    IConfiguration configuration,\n                                                    Microsoft.Extensions.Logging.ILogger logger,\n                                                    WebApplicationBuilder builder)\n  {\n    services.Configure<MailserverConfiguration>(configuration.GetSection(\"Mailserver\"));\n\n    services.Configure<CookiePolicyOptions>(options =>\n    {\n      options.CheckConsentNeeded = context => true;\n      options.MinimumSameSitePolicy = SameSiteMode.None;\n    });",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Configurations\\OptionConfigs.cs",
      "file_type": "csharp",
      "token_count": 110,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: OptionConfigs.cs | Type: csharp | Part 2 of 2]\\n\\nif (builder.Environment.IsDevelopment())\n    {\n      // add list services for diagnostic purposes - see https://github.com/ardalis/AspNetCoreStartupServices\n      services.Configure((Ardalis.ListStartupServices.ServiceConfig config) =>\n      {\n        config.Services = new List<ServiceDescriptor>(builder.Services);\n\n        // optional - default path to view services is /listallservices - recommended to choose your own path\n        config.Path = \"/listservices\";\n      });\n    }\n\n    logger.LogInformation(\"{Project} were configured\", \"Configuration and Options\");\n\n    return services;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Configurations\\OptionConfigs.cs",
      "file_type": "csharp",
      "token_count": 116,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Create.CreateContributorValidator.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Infrastructure.Data.Config;\nusing FastEndpoints;\nusing FluentValidation;\n\nnamespace NimblePros.SampleToDo.Web.Contributors;\n\n/// <summary>\n/// See: https://fast-endpoints.com/docs/validation\n/// </summary>\npublic class CreateContributorValidator : Validator<CreateContributorRequest>\n{\n  public CreateContributorValidator()\n  {\n    RuleFor(x => x.Name)\n      .NotEmpty()\n      .WithMessage(\"Name is required.\")\n      .MinimumLength(2)\n      .MaximumLength(DataSchemaConstants.DEFAULT_NAME_LENGTH);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Create.CreateContributorValidator.cs",
      "file_type": "csharp",
      "token_count": 115,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Create.CreateContributorRequest.cs | Type: csharp]\\n\\n﻿using System.ComponentModel.DataAnnotations;\n\nnamespace NimblePros.SampleToDo.Web.Contributors;\n\npublic class CreateContributorRequest\n{\n  public const string Route = \"/Contributors\";\n\n  [Required]\n  public string Name { get; set; } = String.Empty;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Create.CreateContributorRequest.cs",
      "file_type": "csharp",
      "token_count": 53,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Create.CreateContributorResponse.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Contributors;\n\npublic class CreateContributorResponse\n{\n  public CreateContributorResponse(int id, string name)\n  {\n    Id = id;\n    Name = name;\n  }\n  public int Id { get; set; }\n  public string Name { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Create.CreateContributorResponse.cs",
      "file_type": "csharp",
      "token_count": 66,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Delete.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.UseCases.Contributors.Commands.Delete;\n\nnamespace NimblePros.SampleToDo.Web.Contributors;\n\n/// <summary>\n/// Delete a Contributor.\n/// </summary>\n/// <remarks>\n/// Delete a Contributor by providing a valid integer id.\n/// </remarks>\npublic class Delete : Endpoint<DeleteContributorRequest>\n{\n  private readonly IMediator _mediator;\n\n  public Delete(IMediator mediator)\n  {\n    _mediator = mediator;\n  }\n\n  public override void Configure()\n  {\n    Delete(DeleteContributorRequest.Route);\n    AllowAnonymous();\n  }\n\n  public override async Task HandleAsync(\n    DeleteContributorRequest request,\n    CancellationToken cancellationToken)\n  {\n    var command = new DeleteContributorCommand(request.ContributorId);\n\n    var result = await _mediator.Send(command);\n\n    if (result.Status == ResultStatus.NotFound)\n    {\n      await SendNotFoundAsync(cancellationToken);\n      return;\n    }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Delete.cs",
      "file_type": "csharp",
      "token_count": 191,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Delete.cs | Type: csharp | Part 2 of 2]\\n\\nif (result.IsSuccess)\n    {\n      await SendNoContentAsync(cancellationToken);\n    };\n    // TODO: Handle other issues as needed\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Delete.cs",
      "file_type": "csharp",
      "token_count": 31,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Delete.DeleteContributorValidator.cs | Type: csharp]\\n\\n﻿using FastEndpoints;\nusing FluentValidation;\n\nnamespace NimblePros.SampleToDo.Web.Contributors;\n\n/// <summary>\n/// See: https://fast-endpoints.com/docs/validation\n/// </summary>\npublic class DeleteContributorValidator : Validator<DeleteContributorRequest>\n{\n  public DeleteContributorValidator()\n  {\n    RuleFor(x => x.ContributorId)\n      .GreaterThan(0);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Delete.DeleteContributorValidator.cs",
      "file_type": "csharp",
      "token_count": 83,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Delete.DeleteContributorRequest.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Contributors;\n\npublic record DeleteContributorRequest\n{\n  public const string Route = \"/Contributors/{ContributorId:int}\";\n  public static string BuildRoute(int contributorId) => Route.Replace(\"{ContributorId:int}\", contributorId.ToString());\n\n  public int ContributorId { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Delete.DeleteContributorRequest.cs",
      "file_type": "csharp",
      "token_count": 69,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Create.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\nusing NimblePros.SampleToDo.UseCases.Contributors.Commands.Create;\n\nnamespace NimblePros.SampleToDo.Web.Contributors;\n\n/// <summary>\n/// Create a new Contributor\n/// </summary>\n/// <remarks>\n/// Creates a new Contributor given a name.\n/// </remarks>\npublic class Create : Endpoint<CreateContributorRequest, CreateContributorResponse>\n{\n  private readonly IMediator _mediator;\n\n  public Create(IMediator mediator)\n  {\n    _mediator = mediator;\n  }\n\n  public override void Configure()\n  {\n    Post(CreateContributorRequest.Route);\n    AllowAnonymous();\n    Summary(s =>\n    {\n      // XML Docs are used by default but are overridden by these properties:\n      //s.Summary = \"Create a new Contributor.\";\n      //s.Description = \"Create a new Contributor. A valid name is required.\";\n      s.ExampleRequest = new CreateContributorRequest { Name = \"Contributor Name\" };\n    });\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Create.cs",
      "file_type": "csharp",
      "token_count": 205,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Create.cs | Type: csharp | Part 2 of 2]\\n\\npublic override async Task HandleAsync(\n    CreateContributorRequest request,\n    CancellationToken cancellationToken)\n  {\n    var result = await _mediator.Send(new CreateContributorCommand(ContributorName.From(request.Name!)));\n\n    if (result.IsSuccess)\n    {\n      Response = new CreateContributorResponse(result.Value, request.Name!);\n      return;\n    }\n    // TODO: Handle other cases as necessary\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Create.cs",
      "file_type": "csharp",
      "token_count": 84,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: GetById.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.UseCases.Contributors.Queries.Get;\n\nnamespace NimblePros.SampleToDo.Web.Contributors;\n\n/// <summary>\n/// Get a Contributor by integer ID.\n/// </summary>\n/// <remarks>\n/// Takes a positive integer ID and returns a matching Contributor record.\n/// </remarks>\npublic class GetById : Endpoint<GetContributorByIdRequest, ContributorRecord>\n{\n  private readonly IMediator _mediator;\n\n  public GetById(IMediator mediator)\n  {\n    _mediator = mediator;\n  }\n\n  public override void Configure()\n  {\n    Get(GetContributorByIdRequest.Route);\n    AllowAnonymous();\n  }\n\n  public override async Task HandleAsync(GetContributorByIdRequest request,\n    CancellationToken cancellationToken)\n  {\n    var command = new GetContributorQuery(request.ContributorId);\n\n    var result = await _mediator.Send(command);\n\n    if (result.Status == ResultStatus.NotFound)\n    {\n      await SendNotFoundAsync(cancellationToken);\n      return;\n    }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\GetById.cs",
      "file_type": "csharp",
      "token_count": 200,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: GetById.cs | Type: csharp | Part 2 of 2]\\n\\nif (result.IsSuccess)\n    {\n      Response = new ContributorRecord(result.Value.Id, result.Value.Name);\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\GetById.cs",
      "file_type": "csharp",
      "token_count": 26,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: List.ContributorListResponse.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Web.Contributors;\n\nnamespace NimblePros.SampleToDo.Web.Contributors;\n\npublic class ContributorListResponse\n{\n  public List<ContributorRecord> Contributors { get; set; } = new();\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\List.ContributorListResponse.cs",
      "file_type": "csharp",
      "token_count": 48,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GetById.GetContributorByIdRequest.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Contributors;\n\npublic class GetContributorByIdRequest\n{\n  public const string Route = \"/Contributors/{ContributorId:int}\";\n  public static string BuildRoute(int contributorId) => Route.Replace(\"{ContributorId:int}\", contributorId.ToString());\n\n  public int ContributorId { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\GetById.GetContributorByIdRequest.cs",
      "file_type": "csharp",
      "token_count": 70,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GetById.GetContributorValidator.cs | Type: csharp]\\n\\n﻿using FastEndpoints;\nusing FluentValidation;\n\nnamespace NimblePros.SampleToDo.Web.Contributors;\n\n/// <summary>\n/// See: https://fast-endpoints.com/docs/validation\n/// </summary>\npublic class GetContributorValidator : Validator<GetContributorByIdRequest>\n{\n  public GetContributorValidator()\n  {\n    RuleFor(x => x.ContributorId)\n      .GreaterThan(0);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\GetById.GetContributorValidator.cs",
      "file_type": "csharp",
      "token_count": 84,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: List.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.UseCases.Contributors.Queries.List;\n\nnamespace NimblePros.SampleToDo.Web.Contributors;\n\n/// <summary>\n/// List all Contributors\n/// </summary>\n/// <remarks>\n/// List all contributors - returns a ContributorListResponse containing the Contributors.\n/// NOTE: In DEV always returns a FAKE set of 2 contributors\n/// </remarks>\npublic class List : EndpointWithoutRequest<ContributorListResponse>\n{\n  private readonly IMediator _mediator;\n\n  public List(IMediator mediator)\n  {\n    _mediator = mediator;\n  }\n\n  public override void Configure()\n  {\n    Get(\"/Contributors\");\n    AllowAnonymous();\n  }\n\n  public override async Task HandleAsync(CancellationToken cancellationToken)\n  {\n    var result = await _mediator.Send(new ListContributorsQuery(null, null));\n\n    if (result.IsSuccess)\n    {\n      Response = new ContributorListResponse\n      {\n        Contributors = result.Value.Select(c => new ContributorRecord(c.Id, c.Name)).ToList()\n      };\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\List.cs",
      "file_type": "csharp",
      "token_count": 212,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Update.UpdateContributorResponse.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Contributors;\n\npublic class UpdateContributorResponse\n{\n  public UpdateContributorResponse(ContributorRecord contributor)\n  {\n    Contributor = contributor;\n  }\n  public ContributorRecord Contributor { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Update.UpdateContributorResponse.cs",
      "file_type": "csharp",
      "token_count": 52,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Update.UpdateContributorRequest.cs | Type: csharp]\\n\\n﻿using System.ComponentModel.DataAnnotations;\n\nnamespace NimblePros.SampleToDo.Web.Contributors;\n\npublic class UpdateContributorRequest\n{\n  public const string Route = \"/Contributors/{ContributorId:int}\";\n  public static string BuildRoute(int contributorId) => Route.Replace(\"{ContributorId:int}\", contributorId.ToString());\n\n  public int ContributorId { get; set; }\n\n  [Required]\n  public int Id { get; set; }\n  [Required]\n  public string? Name { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Update.UpdateContributorRequest.cs",
      "file_type": "csharp",
      "token_count": 103,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Update.UpdateContributorValidator.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Infrastructure.Data.Config;\nusing FastEndpoints;\nusing FluentValidation;\n\nnamespace NimblePros.SampleToDo.Web.Contributors;\n\n/// <summary>\n/// See: https://fast-endpoints.com/docs/validation\n/// </summary>\npublic class UpdateContributorValidator : Validator<UpdateContributorRequest>\n{\n  public UpdateContributorValidator()\n  {\n    RuleFor(x => x.Name)\n      .NotEmpty()\n      .WithMessage(\"Name is required.\")\n      .MinimumLength(2)\n      .MaximumLength(DataSchemaConstants.DEFAULT_NAME_LENGTH);\n    RuleFor(x => x.ContributorId)\n      .Must((args, contributorId) => args.Id == contributorId)\n      .WithMessage(\"Route and body Ids must match; cannot update Id of an existing resource.\");\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Update.UpdateContributorValidator.cs",
      "file_type": "csharp",
      "token_count": 163,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Create.CreateProjectRequest.cs | Type: csharp]\\n\\n﻿using System.ComponentModel.DataAnnotations;\n\nnamespace NimblePros.SampleToDo.Web.Projects;\n\npublic class CreateProjectRequest\n{\n  public const string Route = \"/Projects\";\n\n  [Required]\n  public string? Name { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\Create.CreateProjectRequest.cs",
      "file_type": "csharp",
      "token_count": 47,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Update.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\nusing NimblePros.SampleToDo.UseCases.Contributors.Commands.Update;\n\nnamespace NimblePros.SampleToDo.Web.Contributors;\n\n/// <summary>\n/// Update an existing Contributor.\n/// </summary>\n/// <remarks>\n/// Update an existing Contributor by providing a fully defined replacement set of values.\n/// See: https://stackoverflow.com/questions/60761955/rest-update-best-practice-put-collection-id-without-id-in-body-vs-put-collecti\n/// </remarks>\npublic class Update : Endpoint<UpdateContributorRequest, UpdateContributorResponse>\n{\n  private readonly IRepository<Contributor> _repository;\n  private readonly IMediator _mediator;\n\n  public Update(IRepository<Contributor> repository, IMediator mediator)\n  {\n    _repository = repository;\n    _mediator = mediator;\n  }\n\n  public override void Configure()\n  {\n    Put(UpdateContributorRequest.Route);\n    AllowAnonymous();\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Update.cs",
      "file_type": "csharp",
      "token_count": 199,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Update.cs | Type: csharp | Part 2 of 2]\\n\\npublic override async Task HandleAsync(\n    UpdateContributorRequest request,\n    CancellationToken cancellationToken)\n  {\n    var result = await _mediator.Send(new UpdateContributorCommand(request.Id, ContributorName.From(request.Name!)));\n\n    if (result.Status == ResultStatus.NotFound)\n    {\n      await SendNotFoundAsync(cancellationToken);\n      return;\n    }\n\n    // TODO: Use Mediator\n    var existingContributor = await _repository.GetByIdAsync(request.Id, cancellationToken);\n    if (existingContributor == null)\n    {\n      await SendNotFoundAsync(cancellationToken);\n      return;\n    }\n\n    if (result.IsSuccess)\n    {\n      var dto = result.Value;\n      Response = new UpdateContributorResponse(new ContributorRecord(dto.Id, dto.Name));\n      return;\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Contributors\\Update.cs",
      "file_type": "csharp",
      "token_count": 157,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Create.CreateProjectResponse.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Projects;\n\npublic class CreateProjectResponse\n{\n  public CreateProjectResponse(int id, string name)\n  {\n    Id = id;\n    Name = name;\n  }\n\n  public int Id { get; set; }\n  public string Name { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\Create.CreateProjectResponse.cs",
      "file_type": "csharp",
      "token_count": 63,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Create.CreateProjectValidator.cs | Type: csharp]\\n\\n﻿using FastEndpoints;\nusing FluentValidation;\nusing NimblePros.SampleToDo.Infrastructure.Data.Config;\n\nnamespace NimblePros.SampleToDo.Web.Projects;\n\n/// <summary>\n/// See: https://fast-endpoints.com/docs/validation\n/// </summary>\npublic class CreateProjectValidator : Validator<CreateProjectRequest>\n{\n  public CreateProjectValidator()\n  {\n    RuleFor(x => x.Name)\n      .NotEmpty()\n      .WithMessage(\"Name is required.\")\n      .MinimumLength(2)\n      .MaximumLength(DataSchemaConstants.DEFAULT_NAME_LENGTH);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\Create.CreateProjectValidator.cs",
      "file_type": "csharp",
      "token_count": 111,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Create.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Ardalis.Result.AspNetCore;\nusing NimblePros.SampleToDo.UseCases.Projects.Create;\n\nnamespace NimblePros.SampleToDo.Web.Projects;\n\n/// <summary>\n/// Creates a new Project\n/// </summary>\n/// <remarks>\n/// Creates a new project given a name.\n/// </remarks>\npublic class Create(IMediator mediator) : Endpoint<CreateProjectRequest, CreateProjectResponse>\n{\n  private readonly IMediator _mediator = mediator;\n\n  public override void Configure()\n  {\n    Post(CreateProjectRequest.Route);\n    AllowAnonymous();\n    Summary(s =>\n    {\n      s.ExampleRequest = new CreateProjectRequest { Name = \"Project Name\" };\n    });\n  }\n\n  public override async Task HandleAsync(\n  CreateProjectRequest request,\n  CancellationToken cancellationToken)\n  {\n    var result = await _mediator.Send(new CreateProjectCommand(request.Name!));",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\Create.cs",
      "file_type": "csharp",
      "token_count": 173,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Create.cs | Type: csharp | Part 2 of 2]\\n\\nif (result.IsSuccess)\n    {\n      Response = new CreateProjectResponse(result.Value.Value, request.Name!);\n      return;\n    }\n    await SendResultAsync(result.ToMinimalApiResult());\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\Create.cs",
      "file_type": "csharp",
      "token_count": 41,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: CreateToDoItem.CreateToDoItemValidator.cs | Type: csharp]\\n\\n﻿using FastEndpoints;\nusing FluentValidation;\nusing NimblePros.SampleToDo.Infrastructure.Data.Config;\n\nnamespace NimblePros.SampleToDo.Web.Projects;\n\n/// <summary>\n/// See: https://fast-endpoints.com/docs/validation\n/// </summary>\npublic class CreateToDoItemValidator : Validator<CreateToDoItemRequest>\n{\n  public CreateToDoItemValidator()\n  {\n    RuleFor(x => x.ProjectId)\n      .GreaterThan(0);\n    RuleFor(x => x.Title)\n      .NotEmpty()\n      .MinimumLength(2)\n      .MaximumLength(DataSchemaConstants.DEFAULT_NAME_LENGTH);\n    RuleFor(x => x.Description)\n      .NotEmpty();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\CreateToDoItem.CreateToDoItemValidator.cs",
      "file_type": "csharp",
      "token_count": 132,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Delete.DeleteProjectRequest.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Projects;\n\npublic class DeleteProjectRequest\n{\n  public const string Route = \"/Projects/{ProjectId:int}\";\n  public static string BuildRoute(int projectId) => Route.Replace(\"{ProjectId:int}\", projectId.ToString());\n\n  public int ProjectId { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\Delete.DeleteProjectRequest.cs",
      "file_type": "csharp",
      "token_count": 62,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Delete.cs | Type: csharp]\\n\\n﻿using Ardalis.Result.AspNetCore;\nusing NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.UseCases.Projects.Delete;\n\nnamespace NimblePros.SampleToDo.Web.Projects;\n\n/// <summary>\n/// Deletes a project\n/// </summary>\npublic class Delete(IMediator mediator) : Endpoint<DeleteProjectRequest>\n{\n  private readonly IMediator _mediator = mediator;\n\n  public override void Configure()\n  {\n    Delete(DeleteProjectRequest.Route);\n    AllowAnonymous();\n  }\n\n  public override async Task HandleAsync(\n  DeleteProjectRequest request,\n  CancellationToken cancellationToken)\n  {\n    var command = new DeleteProjectCommand(ProjectId.From(request.ProjectId));\n\n    var result = await _mediator.Send(command);\n\n    await SendResultAsync(result.ToMinimalApiResult());\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\Delete.cs",
      "file_type": "csharp",
      "token_count": 159,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: CreateToDoItem.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.UseCases.Projects.AddToDoItem;\nusing NimblePros.SampleToDo.Web.Projects;\n\nnamespace NimblePros.SampleToDo.Web.ProjectEndpoints;\n\npublic class Create : Endpoint<CreateToDoItemRequest>\n{\n  private readonly IMediator _mediator;\n\n  public Create(IMediator mediator)\n  {\n    _mediator = mediator;\n  }\n\n  public override void Configure()\n  {\n    Post(CreateToDoItemRequest.Route);\n    AllowAnonymous();\n    Summary(s =>\n    {\n      s.ExampleRequest = new CreateToDoItemRequest\n      {\n        ContributorId = 1,\n        ProjectId = 1,\n        Title = \"Title\",\n        Description = \"Description\"\n      };\n    });\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\CreateToDoItem.cs",
      "file_type": "csharp",
      "token_count": 155,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: CreateToDoItem.cs | Type: csharp | Part 2 of 2]\\n\\npublic override async Task HandleAsync(\n    CreateToDoItemRequest request,\n    CancellationToken cancellationToken)\n  {\n    var command = new AddToDoItemCommand(ProjectId.From(request.ProjectId), request.ContributorId,\n      request.Title, request.Description);\n    var result = await _mediator.Send(command);\n\n    if (result.Status == Ardalis.Result.ResultStatus.NotFound)\n    {\n      await SendNotFoundAsync(cancellationToken);\n      return;\n    }\n\n    if (result.IsSuccess)\n    {\n      // send route to project\n      await SendCreatedAtAsync<GetById>(new { projectId = request.ProjectId }, \"\");\n    };\n    // TODO: Handle other cases as necessary\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\CreateToDoItem.cs",
      "file_type": "csharp",
      "token_count": 136,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: GetById.GetProjectByIdResponse.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Projects;\n\npublic class GetProjectByIdResponse\n{\n  public GetProjectByIdResponse(int id, string name, List<ToDoItemRecord> items)\n  {\n    Id = id;\n    Name = name;\n    Items = items;\n  }\n\n  public int Id { get; set; }\n  public string Name { get; set; }\n  public List<ToDoItemRecord> Items { get; set; } = new();\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\GetById.GetProjectByIdResponse.cs",
      "file_type": "csharp",
      "token_count": 96,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: List.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.UseCases.Projects.ListShallow;\n\nnamespace NimblePros.SampleToDo.Web.Projects;\n\n/// <summary>\n/// Lists all projects without their sub-properties.\n/// </summary>\n/// <remarks>\n/// Lists all projects without their sub-properties.\n/// NOTE: In DEV will always show a FAKE ID 1000 project, not real data\n/// </remarks>\npublic class List(IMediator mediator) : EndpointWithoutRequest<ProjectListResponse>\n{\n  private readonly IMediator _mediator = mediator;\n\n  public override void Configure()\n  {\n    Get($\"/{nameof(Project)}s\");\n    AllowAnonymous();\n  }\n\n  public override async Task HandleAsync(CancellationToken cancellationToken)\n  {\n    var result = await _mediator.Send(new ListProjectsShallowQuery(null, null));\n\n    if (result.IsSuccess)\n    {\n      Response = new ProjectListResponse\n      {\n        Projects = result.Value.Select(c => new ProjectRecord(c.Id, c.Name)).ToList()\n      };\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\List.cs",
      "file_type": "csharp",
      "token_count": 215,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: List.ProjectListResponse.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Projects;\n\npublic class ProjectListResponse\n{\n  public List<ProjectRecord> Projects { get; set; } = new();\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\List.ProjectListResponse.cs",
      "file_type": "csharp",
      "token_count": 34,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: CreateToDoItem.CreateToDoItemRequest.cs | Type: csharp]\\n\\n﻿using System.ComponentModel.DataAnnotations;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace NimblePros.SampleToDo.Web.Projects;\n\npublic class CreateToDoItemRequest\n{\n  public const string Route = \"/Projects/{ProjectId:int}/ToDoItems\";\n  public static string BuildRoute(int projectId) => Route.Replace(\"{ProjectId:int}\", projectId.ToString());\n\n  [Required]\n  [FromRoute]\n  public int ProjectId { get; set; } = 0;\n\n  [Required]\n  public string Title { get; set; } = string.Empty;\n  [Required]\n  public string Description { get; set; } = string.Empty;\n\n  public int? ContributorId { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\CreateToDoItem.CreateToDoItemRequest.cs",
      "file_type": "csharp",
      "token_count": 137,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListIncompleteItems.ListIncompleteItemsRequest.cs | Type: csharp]\\n\\n﻿using Microsoft.AspNetCore.Mvc;\n\nnamespace NimblePros.SampleToDo.Web.Endpoints.ProjectEndpoints;\n\npublic class ListIncompleteItemsRequest\n{\n  public const string Route = \"/Projects/{ProjectId}/IncompleteItems\";\n  public static string BuildRoute(int projectId) => Route.Replace(\"{ProjectId:int}\", projectId.ToString());\n\n\n  [FromRoute]\n  public int ProjectId { get; set; }\n  //[FromQuery]\n  //public string? SearchString { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\ListIncompleteItems.ListIncompleteItemsRequest.cs",
      "file_type": "csharp",
      "token_count": 95,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListIncompleteItems.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.UseCases.Projects.ListIncompleteItems;\nusing NimblePros.SampleToDo.Web.Endpoints.ProjectEndpoints;\n\nnamespace NimblePros.SampleToDo.Web.Projects;\n\n/// <summary>\n/// Lists all incomplete items in a project.\n/// </summary>\n/// <remarks>\n/// Lists all incomplete items in a project.\n/// Returns FAKE data in DEV. Run in production to use real database-driven data.\n/// </remarks>\npublic class ListIncompleteItems(IMediator mediator) : Endpoint<ListIncompleteItemsRequest, ListIncompleteItemsResponse>\n{\n  private readonly IMediator _mediator = mediator;\n\n  public override void Configure()\n  {\n    Get(ListIncompleteItemsRequest.Route);\n    AllowAnonymous();\n  }\n\n  public override async Task HandleAsync(ListIncompleteItemsRequest request, CancellationToken cancellationToken)\n  {\n    Response = new ListIncompleteItemsResponse(request.ProjectId, new List<ToDoItemRecord>());\n\n    var result = await _mediator.Send(new ListIncompleteItemsByProjectQuery(request.ProjectId));",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\ListIncompleteItems.cs",
      "file_type": "csharp",
      "token_count": 200,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ListIncompleteItems.cs | Type: csharp | Part 2 of 2]\\n\\nvar result = await _mediator.Send(new ListIncompleteItemsByProjectQuery(request.ProjectId));\n\n    if (result.Status == ResultStatus.NotFound)\n    {\n      await SendNotFoundAsync(cancellationToken);\n      return;\n    }\n\n    Response.IncompleteItems = result.Value.Select(item =>\n                    new ToDoItemRecord(item.Id, item.Title, item.Description, item.IsComplete, item.ContributorId))\n                    .ToList();\n\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\ListIncompleteItems.cs",
      "file_type": "csharp",
      "token_count": 86,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: GetById.GetProjectByIdRequest.cs | Type: csharp]\\n\\n﻿\nnamespace NimblePros.SampleToDo.Web.Endpoints.Projects;\n\npublic class GetProjectByIdRequest\n{\n  public const string Route = \"/Projects/{ProjectId:int}\";\n  public static string BuildRoute(int projectId) => Route.Replace(\"{ProjectId:int}\", projectId.ToString());\n\n  public int ProjectId { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\GetById.GetProjectByIdRequest.cs",
      "file_type": "csharp",
      "token_count": 66,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GetById.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.UseCases.Projects.GetWithAllItems;\nusing NimblePros.SampleToDo.Web.Endpoints.Projects;\n\nnamespace NimblePros.SampleToDo.Web.Projects;\n\npublic class GetById(IMediator mediator) : Endpoint<GetProjectByIdRequest, GetProjectByIdResponse>\n{\n  private readonly IMediator _mediator = mediator;\n\n  public override void Configure()\n  {\n    Get(GetProjectByIdRequest.Route);\n    AllowAnonymous();\n  }\n\n  public override async Task HandleAsync(GetProjectByIdRequest request,\n  CancellationToken cancellationToken)\n  {\n    var command = new GetProjectWithAllItemsQuery(ProjectId.From(request.ProjectId));\n\n    var result = await _mediator.Send(command);\n\n    if (result.Status == ResultStatus.NotFound)\n    {\n      await SendNotFoundAsync(cancellationToken);\n      return;\n    }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\GetById.cs",
      "file_type": "csharp",
      "token_count": 174,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: GetById.cs | Type: csharp | Part 2 of 2]\\n\\nif (result.IsSuccess)\n    {\n      Response = new GetProjectByIdResponse(result.Value.Id,\n        result.Value.Name, \n        items:\n        result.Value.Items\n          .Select(item => new ToDoItemRecord(\n            item.Id,\n            item.Title,\n            item.Description,\n            item.IsComplete,\n            item.ContributorId\n            ))\n          .ToList()\n          );\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\GetById.cs",
      "file_type": "csharp",
      "token_count": 80,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ListIncompleteItems.ListIncompleteItemsResponse.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Projects;\n\npublic class ListIncompleteItemsResponse\n{\n  public ListIncompleteItemsResponse(int projectId, List<ToDoItemRecord> incompleteItems)\n  {\n    ProjectId = projectId;\n    IncompleteItems = incompleteItems;\n  }\n  public int ProjectId { get; set; }\n  public List<ToDoItemRecord> IncompleteItems { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\ListIncompleteItems.ListIncompleteItemsResponse.cs",
      "file_type": "csharp",
      "token_count": 83,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ProjectRecord.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Projects;\n\npublic record ProjectRecord(int Id, string Name);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\ProjectRecord.cs",
      "file_type": "csharp",
      "token_count": 20,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: MarkItemComplete.MarkItemCompleteRequest.cs | Type: csharp]\\n\\n﻿using System.ComponentModel.DataAnnotations;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace NimblePros.SampleToDo.Web.ProjectEndpoints;\n\npublic class MarkItemCompleteRequest\n{\n  public const string Route = \"/Projects/{ProjectId:int}/ToDoItems/{ToDoItemId:int}\";\n  public static string BuildRoute(int projectId, int toDoItemId) => Route.Replace(\"{ProjectId:int}\", projectId.ToString())\n                                                                         .Replace(\"{ToDoItemId:int}\", toDoItemId.ToString());\n\n  [Required]\n  [FromRoute]\n  public int ProjectId { get; set; } = 0;\n  [Required]\n  [FromRoute]\n  public int ToDoItemId { get; set; } = 0;\n\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\MarkItemComplete.MarkItemCompleteRequest.cs",
      "file_type": "csharp",
      "token_count": 135,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: MarkItemComplete.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.UseCases.Projects.MarkToDoItemComplete;\n\nnamespace NimblePros.SampleToDo.Web.ProjectEndpoints;\n\n/// <summary>\n/// Mark an item as complete\n/// </summary>\npublic class MarkItemComplete(IMediator mediator) : Endpoint<MarkItemCompleteRequest>\n{\n  private readonly IMediator _mediator = mediator;\n\n  public override void Configure()\n  {\n    Post(MarkItemCompleteRequest.Route);\n    AllowAnonymous();\n    Summary(s =>\n    {\n      s.ExampleRequest = new MarkItemCompleteRequest\n      {\n        ProjectId = 1,\n        ToDoItemId = 1\n      };\n    });\n  }\n\n  public override async Task HandleAsync(\n    MarkItemCompleteRequest request,\n    CancellationToken cancellationToken)\n  {\n    var command = new MarkToDoItemCompleteCommand(ProjectId.From(request.ProjectId), request.ToDoItemId);\n    var result = await _mediator.Send(command);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\MarkItemComplete.cs",
      "file_type": "csharp",
      "token_count": 194,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: MarkItemComplete.cs | Type: csharp | Part 2 of 2]\\n\\nif (result.Status == Ardalis.Result.ResultStatus.NotFound)\n    {\n      await SendNotFoundAsync(cancellationToken);\n      return;\n    }\n\n    if (result.IsSuccess)\n    {\n      await SendNoContentAsync(cancellationToken);\n    };\n    // TODO: Handle other issues as needed\n  }\n\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\MarkItemComplete.cs",
      "file_type": "csharp",
      "token_count": 59,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ToDoItemRecord.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Projects;\npublic record ToDoItemRecord(int Id, string Title, string Description, bool IsDone, int? ContributorId);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\ToDoItemRecord.cs",
      "file_type": "csharp",
      "token_count": 33,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Update.UpdateProjectRequest.cs | Type: csharp]\\n\\n﻿using System.ComponentModel.DataAnnotations;\n\nnamespace NimblePros.SampleToDo.Web.Projects;\n\npublic class UpdateProjectRequest\n{\n  public const string Route = \"/Projects\";\n  public int Id { get; set; }\n  public string? Name { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\Update.UpdateProjectRequest.cs",
      "file_type": "csharp",
      "token_count": 53,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Update.UpdateProjectResponse.cs | Type: csharp]\\n\\n﻿namespace NimblePros.SampleToDo.Web.Projects;\n\npublic class UpdateProjectResponse\n{\n  public UpdateProjectResponse(ProjectRecord project)\n  {\n    Project = project;\n  }\n  public ProjectRecord Project { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\Update.UpdateProjectResponse.cs",
      "file_type": "csharp",
      "token_count": 47,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Update.cs | Type: csharp]\\n\\n﻿using Ardalis.Result.AspNetCore;\nusing NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.UseCases.Projects.Update;\n\nnamespace NimblePros.SampleToDo.Web.Projects;\n\npublic class Update(IMediator mediator) : Endpoint<UpdateProjectRequest, UpdateProjectResponse>\n{\n  private readonly IMediator _mediator = mediator;\n\n  public override void Configure()\n  {\n    Put(UpdateProjectRequest.Route);\n    AllowAnonymous();\n  }\n\n  public override async Task HandleAsync(\n  UpdateProjectRequest request,\n  CancellationToken cancellationToken)\n  {\n    var result = await _mediator.Send(new UpdateProjectCommand(ProjectId.From(request.Id), ProjectName.From(request.Name!)));\n\n    await SendResultAsync(result.ToMinimalApiResult());\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\Update.cs",
      "file_type": "csharp",
      "token_count": 150,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Update.UpdateProjectRequestValidator.cs | Type: csharp]\\n\\n﻿using FluentValidation;\n\nnamespace NimblePros.SampleToDo.Web.Projects;\n\npublic class UpdateProjectRequestValidator : Validator<UpdateProjectRequest>\n{\n  public UpdateProjectRequestValidator()\n  {\n    RuleFor(x => x.Id)\n        .GreaterThan(0).WithMessage(\"Id must be a positive integer.\");\n\n    RuleFor(x => x.Name)\n        .NotEmpty().WithMessage(\"Name is required.\")\n        .Must(name => !string.IsNullOrWhiteSpace(name))\n        .WithMessage(\"Name cannot be empty or whitespace.\");\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Projects\\Update.UpdateProjectRequestValidator.cs",
      "file_type": "csharp",
      "token_count": 105,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorCreate.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Web.Contributors;\nusing Shouldly;\n\nnamespace NimblePros.SampleToDo.FunctionalTests.Contributors;\n\n[Collection(\"Sequential\")]\npublic class ContributorCreate : IClassFixture<CustomWebApplicationFactory<Program>>\n{\n  private readonly HttpClient _client;\n\n  public ContributorCreate(CustomWebApplicationFactory<Program> factory)\n  {\n    _client = factory.CreateClient();\n  }\n\n  [Fact]\n  public async Task ReturnsOneContributor()\n  {\n    var testName = Guid.NewGuid().ToString();\n    var request = new CreateContributorRequest() { Name = testName };\n    var content = StringContentHelpers.FromModelAsJson(request);\n\n    var result = await _client.PostAndDeserializeAsync<CreateContributorResponse>(\n        CreateContributorRequest.Route, content);\n\n    result.Name.ShouldBe(testName);\n    result.Id.ShouldBeGreaterThan(0);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Contributors\\ContributorCreate.cs",
      "file_type": "csharp",
      "token_count": 179,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using System.Text;\nglobal using Ardalis.HttpClientTestExtensions;\nglobal using DotNet.Testcontainers.Builders;\nglobal using DotNet.Testcontainers.Containers;\nglobal using Microsoft.AspNetCore.Hosting;\nglobal using Microsoft.AspNetCore.Mvc.Testing;\nglobal using Microsoft.EntityFrameworkCore;\nglobal using Microsoft.Extensions.DependencyInjection;\nglobal using Microsoft.Extensions.Hosting;\nglobal using Microsoft.Extensions.Logging;\nglobal using Newtonsoft.Json;\nglobal using Xunit;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 79,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorDelete.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Web;\nusing NimblePros.SampleToDo.Web.Contributors;\n\nnamespace NimblePros.SampleToDo.FunctionalTests.Contributors;\n\n[Collection(\"Sequential\")]\npublic class ContributorDelete : IClassFixture<CustomWebApplicationFactory<Program>>\n{\n  private readonly HttpClient _client;\n\n  public ContributorDelete(CustomWebApplicationFactory<Program> factory)\n  {\n    _client = factory.CreateClient();\n  }\n\n  [Fact]\n  public async Task DeletesExistingContributor()\n  {\n    var deleteRoute = DeleteContributorRequest.BuildRoute(SeedData.Contributor1.Id);\n    _ = await _client.DeleteAndEnsureNoContentAsync(deleteRoute);\n\n    string getRoute = GetContributorByIdRequest.BuildRoute(SeedData.Contributor1.Id);\n    _ = await _client.GetAndEnsureNotFoundAsync(getRoute);\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Contributors\\ContributorDelete.cs",
      "file_type": "csharp",
      "token_count": 174,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorDelete.cs | Type: csharp | Part 2 of 2]\\n\\n[Fact]\n  public async Task ReturnsNotFoundGivenMissingContributorId()\n  {\n    int invalidId = 1000;\n    var deleteRoute = DeleteContributorRequest.BuildRoute(invalidId);\n    _ = await _client.DeleteAndEnsureNotFoundAsync(deleteRoute);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Contributors\\ContributorDelete.cs",
      "file_type": "csharp",
      "token_count": 58,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorGetById.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Web;\nusing NimblePros.SampleToDo.Web.Contributors;\n\nnamespace NimblePros.SampleToDo.FunctionalTests.Contributors;\n\n[Collection(\"Sequential\")]\npublic class ContributorGetById : IClassFixture<CustomWebApplicationFactory<Program>>\n{\n  private readonly HttpClient _client;\n\n  public ContributorGetById(CustomWebApplicationFactory<Program> factory)\n  {\n    _client = factory.CreateClient();\n  }\n\n  [Fact]\n  public async Task ReturnsSeedContributorGivenId1()\n  {\n    var result = await _client.GetAndDeserializeAsync<ContributorRecord>(GetContributorByIdRequest.BuildRoute(1));\n\n    Assert.Equal(1, result.Id);\n    Assert.Equal(SeedData.Contributor1.Name.Value, result.Name);\n  }\n\n  [Fact]\n  public async Task ReturnsNotFoundGivenInvalidId1000()\n  {\n    string route = GetContributorByIdRequest.BuildRoute(1000);\n    _ = await _client.GetAndEnsureNotFoundAsync(route);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Contributors\\ContributorGetById.cs",
      "file_type": "csharp",
      "token_count": 209,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: CustomWebApplicationFactory.cs | Type: csharp | Part 1 of 4]\\n\\n﻿using NimblePros.SampleToDo.Infrastructure.Data;\nusing NimblePros.SampleToDo.UseCases.Contributors.Commands.Create;\nusing NimblePros.SampleToDo.Web;\n\nnamespace NimblePros.SampleToDo.FunctionalTests;\n\npublic class CustomWebApplicationFactory<TProgram> : WebApplicationFactory<TProgram> where TProgram : class\n{\n  /// <summary>\n  /// Overriding CreateHost to avoid creating a separate ServiceProvider per this thread:\n  /// https://github.com/dotnet-architecture/eShopOnWeb/issues/465\n  /// </summary>\n  /// <param name=\"builder\"></param>\n  /// <returns></returns>\n  protected override IHost CreateHost(IHostBuilder builder)\n  {\n    builder.UseEnvironment(\"Testing\"); // will not send real emails\n    var host = builder.Build();\n    host.Start();\n\n    // Get service provider.\n    var serviceProvider = host.Services;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\CustomWebApplicationFactory.cs",
      "file_type": "csharp",
      "token_count": 178,
      "chunk_index": 0,
      "total_chunks": 4
    }
  },
  {
    "page_content": "[File: CustomWebApplicationFactory.cs | Type: csharp | Part 2 of 4]\\n\\n// Get service provider.\n    var serviceProvider = host.Services;\n\n    // Create a scope to obtain a reference to the database\n    // context (AppDbContext).\n    using (var scope = serviceProvider.CreateScope())\n    {\n      var scopedServices = scope.ServiceProvider;\n      var db = scopedServices.GetRequiredService<AppDbContext>();\n\n      var logger = scopedServices\n          .GetRequiredService<ILogger<CustomWebApplicationFactory<TProgram>>>();\n\n      // Ensure the database is created.\n      db.Database.EnsureCreated();\n\n      try\n      {\n        // Can also skip creating the items\n        //if (!db.ToDoItems.Any())\n        //{\n        // Seed the database with test data.\n        SeedData.PopulateTestDataAsync(db).GetAwaiter().GetResult();\n        //}\n      }\n      catch (Exception ex)\n      {\n        logger.LogError(ex, \"An error occurred seeding the \" +\n                            \"database with test messages. Error: {exceptionMessage}\", ex.Message);\n      }\n    }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\CustomWebApplicationFactory.cs",
      "file_type": "csharp",
      "token_count": 199,
      "chunk_index": 1,
      "total_chunks": 4
    }
  },
  {
    "page_content": "[File: CustomWebApplicationFactory.cs | Type: csharp | Part 3 of 4]\\n\\nreturn host;\n  }\n\n  protected override void ConfigureWebHost(IWebHostBuilder builder)\n  {\n    builder\n        .ConfigureServices(services =>\n        {\n          // Remove the app's ApplicationDbContext registration.\n          var descriptors = services.Where(\n            d => d.ServiceType == typeof(AppDbContext) ||\n                 d.ServiceType == typeof(DbContextOptions<AppDbContext>))\n                .ToList();\n\n          foreach(var descriptor in descriptors)\n          {\n            services.Remove(descriptor);\n          }\n\n          // This should be set for each individual test run\n          string inMemoryCollectionName = Guid.NewGuid().ToString();\n\n          // Add ApplicationDbContext using an in-memory database for testing.\n          services.AddDbContext<AppDbContext>(options =>\n          {\n            options.UseInMemoryDatabase(inMemoryCollectionName).LogTo(s => Console.WriteLine(s));\n          });",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\CustomWebApplicationFactory.cs",
      "file_type": "csharp",
      "token_count": 158,
      "chunk_index": 2,
      "total_chunks": 4
    }
  },
  {
    "page_content": "[File: CustomWebApplicationFactory.cs | Type: csharp | Part 4 of 4]\\n\\n// Add MediatR\n          services.AddMediatR(cfg =>\n          {\n            cfg.RegisterServicesFromAssemblies(typeof(Program).Assembly,\n              typeof(CreateContributorCommand).Assembly,\n              typeof(AppDbContext).Assembly);\n          });\n        });\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\CustomWebApplicationFactory.cs",
      "file_type": "csharp",
      "token_count": 51,
      "chunk_index": 3,
      "total_chunks": 4
    }
  },
  {
    "page_content": "[File: ContributorList.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Web;\nusing NimblePros.SampleToDo.Web.Contributors;\n\nnamespace NimblePros.SampleToDo.FunctionalTests.Contributors;\n\n[Collection(\"Sequential\")]\npublic class ContributorList : IClassFixture<CustomWebApplicationFactory<Program>>\n{\n  private readonly HttpClient _client;\n\n  public ContributorList(CustomWebApplicationFactory<Program> factory)\n  {\n    _client = factory.CreateClient();\n  }\n\n  [Fact]\n  public async Task ReturnsTwoContributors()\n  {\n    var result = await _client.GetAndDeserializeAsync<ContributorListResponse>(\"/Contributors\");\n\n    Assert.Equal(2, result.Contributors.Count);\n    Assert.Contains(result.Contributors, i => i.Name == SeedData.Contributor1.Name);\n    Assert.Contains(result.Contributors, i => i.Name == SeedData.Contributor2.Name);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Contributors\\ContributorList.cs",
      "file_type": "csharp",
      "token_count": 180,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ProjectCreate.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Web.Projects;\nusing Shouldly;\n\nnamespace NimblePros.SampleToDo.FunctionalTests.Projects;\n\n[Collection(\"Sequential\")]\npublic class ProjectCreate : IClassFixture<CustomWebApplicationFactory<Program>>\n{\n  private readonly HttpClient _client;\n\n  public ProjectCreate(CustomWebApplicationFactory<Program> factory)\n  {\n    _client = factory.CreateClient();\n  }\n\n  [Fact]\n  public async Task ReturnsOneProject()\n  {\n    var testName = Guid.NewGuid().ToString();\n    var request = new CreateProjectRequest() { Name = testName };\n    var content = StringContentHelpers.FromModelAsJson(request);\n\n    var result = await _client.PostAndDeserializeAsync<CreateProjectResponse>(\n        CreateProjectRequest.Route, content);\n\n    result.Name.ShouldBe(testName);\n    result.Id.ShouldBeGreaterThan(0);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Projects\\ProjectCreate.cs",
      "file_type": "csharp",
      "token_count": 173,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ProjectAddToDoItem.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Web;\nusing NimblePros.SampleToDo.Web.Projects;\nusing NimblePros.SampleToDo.Web.Endpoints.Projects;\nusing Shouldly;\n\nnamespace NimblePros.SampleToDo.FunctionalTests.Projects;\n\n[Collection(\"Sequential\")]\npublic class ProjectAddToDoItem : IClassFixture<CustomWebApplicationFactory<Program>>\n{\n  private readonly HttpClient _client;\n\n  public ProjectAddToDoItem(CustomWebApplicationFactory<Program> factory)\n  {\n    _client = factory.CreateClient();\n  }\n\n  [Fact]\n  public async Task AddsItemAndReturnsRouteToProject()\n  {\n    var toDoTitle = Guid.NewGuid().ToString();\n    var testProjectId = SeedData.TestProject1.Id;\n    var request = new CreateToDoItemRequest()\n    {\n      Title = toDoTitle,\n      ProjectId = testProjectId.Value,\n      Description = toDoTitle\n    };\n    var content = StringContentHelpers.FromModelAsJson(request);\n\n    var result = await _client.PostAsync(\n      CreateToDoItemRequest.BuildRoute(testProjectId.Value), content);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Projects\\ProjectAddToDoItem.cs",
      "file_type": "csharp",
      "token_count": 221,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ProjectAddToDoItem.cs | Type: csharp | Part 2 of 2]\\n\\n// useful for debugging error responses:\n    var stringContent = await result.Content.ReadAsStringAsync();\n\n    var expectedRoute = GetProjectByIdRequest.BuildRoute(testProjectId.Value);\n\n    // TODO: Figure out why FastEndpoints isn't setting Location header\n    result.Headers.Location!.ToString().ShouldBe(expectedRoute);\n\n    var updatedProject = await _client.GetAndDeserializeAsync<GetProjectByIdResponse>(expectedRoute);\n    updatedProject.Items.Count(item => item.Title == toDoTitle).ShouldBe(1);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Projects\\ProjectAddToDoItem.cs",
      "file_type": "csharp",
      "token_count": 103,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorUpdate.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Web;\nusing NimblePros.SampleToDo.Web.Contributors;\nusing Shouldly;\n\nnamespace NimblePros.SampleToDo.FunctionalTests.Contributors;\n\n[Collection(\"Sequential\")]\npublic class ContributorUpdate : IClassFixture<CustomWebApplicationFactory<Program>>\n{\n  private readonly HttpClient _client;\n\n  public ContributorUpdate(CustomWebApplicationFactory<Program> factory)\n  {\n    _client = factory.CreateClient();\n  }\n\n  [Fact]\n  public async Task UpdatesContributorNameAndReturnsUpdatedRecord()\n  {\n    var newName = Guid.NewGuid().ToString();\n    var request = new UpdateContributorRequest() { Id = SeedData.Contributor1.Id, Name = newName };\n    var putRoute = UpdateContributorRequest.BuildRoute(SeedData.Contributor1.Id);\n\n    var content = StringContentHelpers.FromModelAsJson(request);\n\n    var result = await _client.PutAndDeserializeAsync<UpdateContributorResponse>(putRoute, content);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Contributors\\ContributorUpdate.cs",
      "file_type": "csharp",
      "token_count": 199,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorUpdate.cs | Type: csharp | Part 2 of 2]\\n\\nresult.Contributor.Name.ShouldBe(newName);\n    result.Contributor.Id.ShouldBeGreaterThan(0);\n  }\n\n  [Fact]\n  public async Task ReturnsNotFoundGivenMissingContributorId()\n  {\n    int invalidId = 1000;\n    var putRoute = UpdateContributorRequest.BuildRoute(invalidId);\n    var request = new UpdateContributorRequest() { Id = invalidId, Name = \"some name\" };\n    var content = StringContentHelpers.FromModelAsJson(request);\n\n    _ = await _client.PutAndEnsureNotFoundAsync(putRoute, content);\n  }\n\n  [Fact]\n  public async Task ReturnsBadRequestIfRouteIdDoesNotMatchBodyId()\n  {\n    int routeId = 1;\n    int bodyId = 2;\n    var putRoute = UpdateContributorRequest.BuildRoute(routeId);\n    var request = new UpdateContributorRequest() { Id = bodyId, Name = \"some name\" };\n    var content = StringContentHelpers.FromModelAsJson(request);\n\n    _ = await _client.PutAndEnsureBadRequestAsync(putRoute, content);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Contributors\\ContributorUpdate.cs",
      "file_type": "csharp",
      "token_count": 226,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ProjectItemMarkComplete.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.FunctionalTests.ClassFixtures;\nusing NimblePros.SampleToDo.Web.Endpoints.Projects;\nusing NimblePros.SampleToDo.Web.ProjectEndpoints;\nusing NimblePros.SampleToDo.Web.Projects;\nusing Shouldly;\n\nnamespace NimblePros.SampleToDo.FunctionalTests.Projects;\n\n[Collection(\"Sequential\")]\npublic class ProjectItemMarkComplete : \n  IClassFixture<CustomWebApplicationFactory<Program>>,\n  IClassFixture<SmtpServerFixture>\n{\n  private readonly HttpClient _client;\n\n  public ProjectItemMarkComplete(CustomWebApplicationFactory<Program> factory, SmtpServerFixture smtpServer)\n  {\n    _client = factory.CreateClient();\n    smtpServer.EnsureContainerIsRunning();\n  }\n\n  /// <summary>\n  /// Currently this fails if you don't have a local mailserver running, like papercut\n  /// </summary>\n  /// <returns></returns>\n  [Fact]\n  public async Task MarksIncompleteItemComplete()\n  {\n    // TODO: Arrange to use a fake mail server for this test\n    var projectId = 1;\n    var itemId = 1;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Projects\\ProjectItemMarkComplete.cs",
      "file_type": "csharp",
      "token_count": 230,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ProjectItemMarkComplete.cs | Type: csharp | Part 2 of 2]\\n\\nvar jsonContent = new StringContent(JsonConvert.SerializeObject(null), Encoding.UTF8, \"application/json\");\n\n    var route = MarkItemCompleteRequest.BuildRoute(projectId, itemId);\n    var response = await _client.PostAsync(route, jsonContent);\n    response.EnsureSuccessStatusCode();\n\n    var stringResponse = await response.Content.ReadAsStringAsync();\n    stringResponse.ShouldBeEmpty();\n\n    // confirm item is complete\n    var project = await _client.GetAndDeserializeAsync<GetProjectByIdResponse>(GetProjectByIdRequest.BuildRoute(projectId));\n    project.Items.First(i => i.Id == itemId).IsDone.ShouldBeTrue();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Projects\\ProjectItemMarkComplete.cs",
      "file_type": "csharp",
      "token_count": 124,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ProjectGetById.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Web;\nusing NimblePros.SampleToDo.Web.Endpoints.Projects;\nusing NimblePros.SampleToDo.Web.Projects;\nusing Shouldly;\n\nnamespace NimblePros.SampleToDo.FunctionalTests.Projects;\n\n[Collection(\"Sequential\")]\npublic class ProjectGetById : IClassFixture<CustomWebApplicationFactory<Program>>\n{\n  private readonly HttpClient _client;\n\n  public ProjectGetById(CustomWebApplicationFactory<Program> factory)\n  {\n    _client = factory.CreateClient();\n  }\n\n  [Fact]\n  public async Task ReturnsSeedProjectGivenId1()\n  {\n    var result = await _client.GetAndDeserializeAsync<GetProjectByIdResponse>(GetProjectByIdRequest.BuildRoute(1));\n\n    result.Id.ShouldBe(1);\n    result.Name.ShouldBe(SeedData.TestProject1.Name.Value);\n    result.Items.Count.ShouldBe(3);\n  }\n\n  [Fact]\n  public async Task ReturnsNotFoundGivenId0()\n  {\n    var route = GetProjectByIdRequest.BuildRoute(0);\n    _ = await _client.GetAndEnsureNotFoundAsync(route);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Projects\\ProjectGetById.cs",
      "file_type": "csharp",
      "token_count": 221,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: SmtpServerFixture.cs | Type: csharp | Part 1 of 3]\\n\\n﻿namespace NimblePros.SampleToDo.FunctionalTests.ClassFixtures;\n\n/// <summary>\n/// This class ensures that an SMTP server is running and shared between all tests in a specified class.\n/// </summary>\npublic class SmtpServerFixture : IAsyncLifetime\n{\n  private const string SmtpServerImageName = \"jijiechen/papercut:latest\";\n  private const int SmtpServerListenPort = 25;\n\n  private IContainer? _container;\n\n  public async Task InitializeAsync()\n  {\n    _container = new ContainerBuilder()\n        .WithName(Guid.NewGuid().ToString(\"D\"))\n        .WithImage(SmtpServerImageName)\n        .WithPortBinding(SmtpServerListenPort, SmtpServerListenPort)\n        .WithWaitStrategy(\n          Wait\n          .ForUnixContainer()\n          .UntilMessageIsLogged(\"Server Ready\", o => o.WithTimeout(TimeSpan.FromSeconds(30))))\n        .Build();\n\n    await _container.StartAsync().ConfigureAwait(false);\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Fixtures\\SmtpServerFixture.cs",
      "file_type": "csharp",
      "token_count": 203,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: SmtpServerFixture.cs | Type: csharp | Part 2 of 3]\\n\\nawait _container.StartAsync().ConfigureAwait(false);\n  }\n\n  public async Task DisposeAsync()\n  {\n    if (_container != null)\n    {\n      await _container.StopAsync().ConfigureAwait(false);\n      await _container.DisposeAsync().ConfigureAwait(false);\n      _container = null;\n    }\n  }\n\n  /// <summary>\n  /// Ensures that the container is running and healthy.\n  /// </summary>\n  /// <exception cref=\"InvalidOperationException\">\n  /// Thrown when the SMTP server container was not created or is not running.\n  /// This could be due to Docker not running or issues with the container image.\n  /// In such cases, verify that Docker is running correctly.\n  /// </exception>\n  public void EnsureContainerIsRunning()\n  {\n    if (_container == null)\n    {\n      throw new InvalidOperationException(\"SMTP server container was not created. Ensure Docker is running and the container image is correct.\");\n    }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Fixtures\\SmtpServerFixture.cs",
      "file_type": "csharp",
      "token_count": 185,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: SmtpServerFixture.cs | Type: csharp | Part 3 of 3]\\n\\nif (_container.State != TestcontainersStates.Running)\n    {\n      throw new InvalidOperationException(\"The SMTP server container is not running. Please verify that the SMTP server image is correctly configured and that Docker is functioning properly.\");\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Fixtures\\SmtpServerFixture.cs",
      "file_type": "csharp",
      "token_count": 48,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using Ardalis.SharedKernel;\nglobal using Microsoft.EntityFrameworkCore;\nglobal using NSubstitute;\nglobal using Xunit;\nglobal using Microsoft.Extensions.DependencyInjection;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.IntegrationTests\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 29,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ProjectList.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Web;\nusing NimblePros.SampleToDo.Web.Projects;\n\nnamespace NimblePros.SampleToDo.FunctionalTests.Projects;\n\n[Collection(\"Sequential\")]\npublic class ProjectList : IClassFixture<CustomWebApplicationFactory<Program>>\n{\n  private readonly HttpClient _client;\n\n  public ProjectList(CustomWebApplicationFactory<Program> factory)\n  {\n    _client = factory.CreateClient();\n  }\n\n  [Fact]\n  public async Task ReturnsOneProject()\n  {\n    var result = await _client.GetAndDeserializeAsync<ProjectListResponse>(\"/Projects\");\n\n    Assert.Single(result.Projects);\n    Assert.Contains(result.Projects, i => i.Name == SeedData.TestProject1.Name);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\Projects\\ProjectList.cs",
      "file_type": "csharp",
      "token_count": 146,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: EfRepositoryAdd.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.IntegrationTests.Data;\n\npublic class EfRepositoryAdd : BaseEfRepoTestFixture\n{\n  [Fact]\n  public async Task AddsProjectAndSetsId()\n  {\n    var testProjectName = ProjectName.From(\"testProject\");\n    var repository = GetRepository();\n    var project = new Project(testProjectName);\n\n    var item = new ToDoItem();\n    item.Title = \"test item title\";\n    project.AddItem(item);\n\n    await repository.AddAsync(project);\n\n    var newProject = (await repository.ListAsync())\n                    .FirstOrDefault();\n\n    Assert.Equal(testProjectName, newProject?.Name);\n    Assert.True(newProject?.Id.Value > 0);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.IntegrationTests\\Data\\EfRepositoryAdd.cs",
      "file_type": "csharp",
      "token_count": 150,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: BaseEfRepoTestFixture.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.Infrastructure.Data;\n\nnamespace NimblePros.SampleToDo.IntegrationTests.Data;\n\npublic abstract class BaseEfRepoTestFixture\n{\n  protected AppDbContext _dbContext;\n\n  protected BaseEfRepoTestFixture()\n  {\n    var options = CreateNewContextOptions();\n    var _fakeEventDispatcher = Substitute.For<IDomainEventDispatcher>();\n\n    _dbContext = new AppDbContext(options, _fakeEventDispatcher);\n  }\n\n  protected static DbContextOptions<AppDbContext> CreateNewContextOptions()\n  {\n    // Create a fresh service provider, and therefore a fresh\n    // InMemory database instance.\n    var serviceProvider = new ServiceCollection()\n        .AddEntityFrameworkInMemoryDatabase()\n        .BuildServiceProvider();",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.IntegrationTests\\Data\\BaseEfRepoTestFixture.cs",
      "file_type": "csharp",
      "token_count": 151,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: BaseEfRepoTestFixture.cs | Type: csharp | Part 2 of 2]\\n\\n// Create a new options instance telling the context to use an\n    // InMemory database and the new service provider.\n    var builder = new DbContextOptionsBuilder<AppDbContext>();\n    builder.UseInMemoryDatabase(\"cleanarchitecture\")\n           .UseInternalServiceProvider(serviceProvider);\n\n    return builder.Options;\n  }\n\n  protected EfRepository<Project> GetRepository()\n  {\n    return new EfRepository<Project>(_dbContext);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.IntegrationTests\\Data\\BaseEfRepoTestFixture.cs",
      "file_type": "csharp",
      "token_count": 83,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: EfRepositoryDelete.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.IntegrationTests.Data;\n\npublic class EfRepositoryDelete : BaseEfRepoTestFixture\n{\n  [Fact]\n  public async Task DeletesItemAfterAddingIt()\n  {\n    // add a project\n    var repository = GetRepository();\n    var initialName = Guid.NewGuid().ToString();\n    var project = new Project(ProjectName.From(initialName));\n    await repository.AddAsync(project);\n\n    // delete the item\n    await repository.DeleteAsync(project);\n\n    // verify it's no longer there\n    Assert.DoesNotContain(await repository.ListAsync(),\n        project => project.Name == initialName);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.IntegrationTests\\Data\\EfRepositoryDelete.cs",
      "file_type": "csharp",
      "token_count": 135,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: EfRepositoryUpdate.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.IntegrationTests.Data;\n\npublic class EfRepositoryUpdate : BaseEfRepoTestFixture\n{\n  [Fact]\n  public async Task UpdatesItemAfterAddingIt()\n  {\n    // add a project\n    var repository = GetRepository();\n    var initialName = Guid.NewGuid().ToString();\n    var project = new Project(ProjectName.From(initialName));\n\n    await repository.AddAsync(project);\n\n    // detach the item so we get a different instance\n    _dbContext.Entry(project).State = EntityState.Detached;\n\n    // fetch the item and update its title\n    var newProject = (await repository.ListAsync())\n        .FirstOrDefault(project => project.Name == initialName);\n    if (newProject == null)\n    {\n      Assert.NotNull(newProject);\n      return;\n    }\n    Assert.NotSame(project, newProject);\n    var newName = Guid.NewGuid().ToString();\n    newProject.UpdateName(ProjectName.From(newName));",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.IntegrationTests\\Data\\EfRepositoryUpdate.cs",
      "file_type": "csharp",
      "token_count": 198,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: EfRepositoryUpdate.cs | Type: csharp | Part 2 of 2]\\n\\n// Update the item\n    await repository.UpdateAsync(newProject);\n\n    // Fetch the updated item\n    var updatedItem = (await repository.ListAsync())\n        .FirstOrDefault(project => project.Name == newName);\n\n    Assert.NotNull(updatedItem);\n    Assert.NotEqual(project.Name, updatedItem?.Name);\n    Assert.Equal(newProject.Id, updatedItem?.Id);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.IntegrationTests\\Data\\EfRepositoryUpdate.cs",
      "file_type": "csharp",
      "token_count": 74,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using System.Runtime.CompilerServices;\nglobal using Ardalis.Result;\nglobal using Ardalis.SharedKernel;\nglobal using Ardalis.Specification;\nglobal using MediatR;\nglobal using Microsoft.Extensions.Logging;\nglobal using NSubstitute;\nglobal using NSubstitute.ReturnsExtensions;\nglobal using Xunit;",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 58,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: NoOpMediator.cs | Type: csharp | Part 1 of 2]\\n\\n﻿namespace NimblePros.SampleToDo.UnitTests;\n\npublic class NoOpMediator : IMediator\n{\n  public Task Publish(object notification, CancellationToken cancellationToken = default)\n  {\n    return Task.CompletedTask;\n  }\n\n  public Task Publish<TNotification>(TNotification notification, CancellationToken cancellationToken = default) where TNotification : INotification\n  {\n    return Task.CompletedTask;\n  }\n\n  public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)\n  {\n    return Task.FromResult<TResponse>(default!);\n  }\n\n  public Task<object?> Send(object request, CancellationToken cancellationToken = default)\n  {\n    return Task.FromResult<object?>(default);\n  }\n\n  public async IAsyncEnumerable<TResponse> CreateStream<TResponse>(IStreamRequest<TResponse> request,\n    [EnumeratorCancellation] CancellationToken cancellationToken = default)\n  {\n    await Task.CompletedTask;\n    yield break;\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\NoOpMediator.cs",
      "file_type": "csharp",
      "token_count": 185,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: NoOpMediator.cs | Type: csharp | Part 2 of 2]\\n\\npublic async IAsyncEnumerable<object?> CreateStream(object request,\n    [EnumeratorCancellation] CancellationToken cancellationToken = default)\n  {\n    await Task.CompletedTask;\n    yield break;\n  }\n\n  public Task Send<TRequest>(TRequest request, CancellationToken cancellationToken = default) where TRequest : IRequest\n  {\n    return Task.CompletedTask;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\NoOpMediator.cs",
      "file_type": "csharp",
      "token_count": 69,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ToDoItemBuilder.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.UnitTests;\n\n// Learn more about test builders:\n// https://ardalis.com/improve-tests-with-the-builder-pattern-for-test-data\npublic class ToDoItemBuilder\n{\n  private ToDoItem _todo = new ToDoItem();\n\n  public ToDoItemBuilder Id(int id)\n  {\n    _todo.Id = ToDoItemId.From(id);\n    return this;\n  }\n\n  public ToDoItemBuilder Title(string title)\n  {\n    _todo.Title = title;\n    return this;\n  }\n\n  public ToDoItemBuilder Description(string description)\n  {\n    _todo.Description = description;\n    return this;\n  }\n\n  public ToDoItemBuilder WithDefaultValues()\n  {\n    _todo = new ToDoItem() { Id = ToDoItemId.From(1), Title = \"Test Item\", Description = \"Test Description\" };\n\n    return this;\n  }\n\n  public ToDoItem Build() => _todo;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\ToDoItemBuilder.cs",
      "file_type": "csharp",
      "token_count": 194,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ItemCompletedEmailNotificationHandlerHandle.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.Interfaces;\nusing NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.Core.ProjectAggregate.Events;\nusing NimblePros.SampleToDo.Core.ProjectAggregate.Handlers;\n\nnamespace NimblePros.SampleToDo.UnitTests.Core.Handlers;\n\npublic class ItemCompletedEmailNotificationHandlerHandle\n{\n  private ItemCompletedEmailNotificationHandler _handler;\n  private IEmailSender _emailSender = Substitute.For<IEmailSender>();\n\n  public ItemCompletedEmailNotificationHandlerHandle()\n  {\n    _handler = new ItemCompletedEmailNotificationHandler(_emailSender);\n  }\n\n  [Fact]\n  public async Task ThrowsExceptionGivenNullEventArgument()\n  {\n#nullable disable\n    Exception ex = await Assert.ThrowsAsync<ArgumentNullException>(() => _handler.Handle(null, CancellationToken.None));\n#nullable enable\n  }\n\n  [Fact]\n  public async Task SendsEmailGivenEventInstance()\n  {\n    await _handler.Handle(new ToDoItemCompletedEvent(new ToDoItem()), CancellationToken.None);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\Handlers\\ItemCompletedEmailNotificationHandlerHandle.cs",
      "file_type": "csharp",
      "token_count": 196,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ItemCompletedEmailNotificationHandlerHandle.cs | Type: csharp | Part 2 of 2]\\n\\nawait _emailSender.Received().SendEmailAsync(Arg.Any<string>(), Arg.Any<string>(), Arg.Any<string>(), Arg.Any<string>());\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\Handlers\\ItemCompletedEmailNotificationHandlerHandle.cs",
      "file_type": "csharp",
      "token_count": 29,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorConstructor.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\n\nnamespace NimblePros.SampleToDo.UnitTests.Core.ContributorAggregate;\n\npublic class ContributorConstructor\n{\n  private readonly string _testName = \"test name\";\n  private Contributor? _testContributor;\n\n  private Contributor CreateContributor()\n  {\n    return new Contributor(ContributorName.From(_testName));\n  }\n\n  [Fact]\n  public void InitializesName()\n  {\n    _testContributor = CreateContributor();\n\n    Assert.Equal(_testName, _testContributor.Name.Value);\n  }\n}\n\npublic class ContributorUpdateName\n{\n  private readonly string _testName = \"new name\";\n  private Contributor? _testContributor;\n\n  private Contributor CreateContributor()\n  {\n    return new Contributor(ContributorName.From(_testName));\n  }\n\n  [Fact]\n  public void DoesNothingGivenSameName()\n  {\n    _testContributor = CreateContributor();\n    var initialEvents = _testContributor.DomainEvents.Count;\n\n    var initialHash = _testContributor.GetHashCode();",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\ContributorAggregate\\ContributorConstructor.cs",
      "file_type": "csharp",
      "token_count": 217,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorConstructor.cs | Type: csharp | Part 2 of 2]\\n\\nvar initialHash = _testContributor.GetHashCode();\n\n    _testContributor.UpdateName(ContributorName.From(_testName));\n\n    Assert.Equal(initialHash, _testContributor.GetHashCode());\n    Assert.Equal(initialEvents, _testContributor.DomainEvents.Count);\n  }\n\n  [Fact]\n  public void UpdatesNameAndRegistersEventGivenNewName()\n  {\n    _testContributor = CreateContributor();\n    var initialEvents = _testContributor.DomainEvents.Count;\n    string newName = \"A whole new name\";\n\n    _testContributor.UpdateName(ContributorName.From(newName));\n\n    Assert.Equal(newName, _testContributor.Name.Value);\n    Assert.Equal(1, _testContributor.DomainEvents.Count);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\ContributorAggregate\\ContributorConstructor.cs",
      "file_type": "csharp",
      "token_count": 150,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ProjectConstructor.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.UnitTests.Core.ProjectAggregate;\n\npublic class ProjectConstructor\n{\n  private string _testName = \"test name\";\n  private Priority _testPriority = Priority.Backlog;\n  private Project? _testProject;\n\n  private Project CreateProject()\n  {\n    return new Project(ProjectName.From(_testName));\n  }\n\n  [Fact]\n  public void InitializesName()\n  {\n    _testProject = CreateProject();\n\n    Assert.Equal(_testName, _testProject.Name.Value);\n  }\n\n  [Fact]\n  public void InitializesTaskListToEmptyList()\n  {\n    _testProject = CreateProject();\n\n    Assert.NotNull(_testProject.Items);\n  }\n\n  [Fact]\n  public void InitializesStatusToInProgress()\n  {\n    _testProject = CreateProject();\n\n    Assert.Equal(ProjectStatus.Complete, _testProject.Status);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\ProjectAggregate\\ProjectConstructor.cs",
      "file_type": "csharp",
      "token_count": 185,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ProjectNameFrom.cs | Type: csharp]\\n\\n﻿using Shouldly;\nusing NimblePros.SampleToDo.Core.ProjectAggregate;\nusing Vogen;\n\nnamespace NimblePros.SampleToDo.UnitTests.Core.ProjectAggregate;\n\npublic class ProjectNameFrom\n{\n  [Theory]\n  [InlineData(\"\")]\n  [InlineData(null!)]\n  public void ThrowsGivenNullOrEmpty(string name)\n  {\n    Should.Throw<ValueObjectValidationException>(() => ProjectName.From(name));\n  }\n\n  [Fact]\n  public void DoesNotThrowGivenValidData()\n  {\n    string validName = \"valid name\";\n    var name = ProjectName.From(validName);\n    name.Value.ShouldBe(validName);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\ProjectAggregate\\ProjectNameFrom.cs",
      "file_type": "csharp",
      "token_count": 123,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Project_AddItem.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\n\nnamespace NimblePros.SampleToDo.UnitTests.Core.ProjectAggregate;\n\npublic class Project_AddItem\n{\n  private Project _testProject = new Project(ProjectName.From(\"some name\"));\n\n  [Fact]\n  public void AddsItemToItems()\n  {\n    var _testItem = new ToDoItem\n    {\n      Title = \"title\",\n      Description = \"description\"\n    };\n\n    _testProject.AddItem(_testItem);\n\n    Assert.Contains(_testItem, _testProject.Items);\n  }\n\n  [Fact]\n  public void ThrowsExceptionGivenNullItem()\n  {\n#nullable disable\n    Action action = () => _testProject.AddItem(null);\n#nullable enable\n\n    var ex = Assert.Throws<ArgumentNullException>(action);\n    Assert.Equal(\"newItem\", ex.ParamName);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\ProjectAggregate\\Project_AddItem.cs",
      "file_type": "csharp",
      "token_count": 168,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ToDoItemConstructor.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\nusing Xunit;\n\nnamespace NimblePros.SampleToDo.UnitTests.Core.ProjectAggregate;\n\npublic class ToDoItemConstructor\n{\n  [Fact]\n  public void InitializesPriority()\n  {\n    var item = new ToDoItemBuilder()\n    .WithDefaultValues()\n    .Build();\n\n    Assert.Equal(item.Priority, Priority.Backlog);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\ProjectAggregate\\ToDoItemConstructor.cs",
      "file_type": "csharp",
      "token_count": 76,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ToDoItemMarkComplete.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate.Events;\n\nnamespace NimblePros.SampleToDo.UnitTests.Core.ProjectAggregate;\n\npublic class ToDoItemMarkComplete\n{\n  [Fact]\n  public void SetsIsDoneToTrue()\n  {\n    var item = new ToDoItemBuilder()\n        .WithDefaultValues()\n        .Description(\"\")\n        .Build();\n\n    item.MarkComplete();\n\n    Assert.True(item.IsDone);\n  }\n\n  [Fact]\n  public void RaisesToDoItemCompletedEvent()\n  {\n    var item = new ToDoItemBuilder().Build();\n\n    item.MarkComplete();\n\n    Assert.Single(item.DomainEvents);\n    Assert.IsType<ToDoItemCompletedEvent>(item.DomainEvents.First());\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\ProjectAggregate\\ToDoItemMarkComplete.cs",
      "file_type": "csharp",
      "token_count": 139,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: DeleteContributorSevice_DeleteContributor.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\nusing NimblePros.SampleToDo.Core.Services;\n\nnamespace NimblePros.SampleToDo.UnitTests.Core.Services;\n\npublic class DeleteContributorService_DeleteContributor\n{\n  private readonly IRepository<Contributor> _repository = Substitute.For<IRepository<Contributor>>();\n  private readonly IMediator _mediator = Substitute.For<IMediator>();\n  private readonly ILogger<DeleteContributorService> _logger = Substitute.For<ILogger<DeleteContributorService>>();\n\n  private readonly DeleteContributorService _service;\n\n  public DeleteContributorService_DeleteContributor()\n  {\n    _service = new DeleteContributorService(_repository, _mediator, _logger);\n  }\n\n  [Fact]\n  public async Task ReturnsNotFoundGivenCantFindContributor()\n  {\n    var result = await _service.DeleteContributor(0);\n\n    Assert.Equal(Ardalis.Result.ResultStatus.NotFound, result.Status);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\Services\\DeleteContributorSevice_DeleteContributor.cs",
      "file_type": "csharp",
      "token_count": 191,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: IncompleteItemSpecificationsConstructor.cs | Type: csharp]\\n\\n﻿using NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.Core.ProjectAggregate.Specifications;\n\nnamespace NimblePros.SampleToDo.UnitTests.Core.Specifications;\n\npublic class IncompleteItemsSpecificationConstructor\n{\n  [Fact]\n  public void FilterCollectionToOnlyReturnItemsWithIsDoneFalse()\n  {\n    var item1 = new ToDoItem();\n    var item2 = new ToDoItem();\n    var item3 = new ToDoItem();\n    item3.MarkComplete();\n\n    var items = new List<ToDoItem>() { item1, item2, item3 };\n\n    var spec = new IncompleteItemsSpec();\n\n    var filteredList = spec.Evaluate(items);\n\n    Assert.Contains(item1, filteredList);\n    Assert.Contains(item2, filteredList);\n    Assert.DoesNotContain(item3, filteredList);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\Specifications\\IncompleteItemSpecificationsConstructor.cs",
      "file_type": "csharp",
      "token_count": 167,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService_GetAllIncompleteItems.cs | Type: csharp | Part 1 of 3]\\n\\n﻿using System.Linq;\nusing System.Threading.Tasks;\nusing Ardalis.Specification;\nusing Clean.Architecture.Core.ProjectAggregate;\nusing Clean.Architecture.Core.Services;\nusing Clean.Architecture.SharedKernel.Interfaces;\nusing Moq;\nusing Xunit;\n\nnamespace Clean.Architecture.UnitTests.Core.Services\n{\n    public class ToDoItemSearchService_GetAllIncompleteItems\n    {\n        private Mock<IRepository<ToDoItem>> _mockRepo = new Mock<IRepository<ToDoItem>>();\n        private ToDoItemSearchService _searchService;\n\n        public ToDoItemSearchService_GetAllIncompleteItems()\n        {\n            _searchService = new ToDoItemSearchService(_mockRepo.Object);\n        }\n\n        [Fact]\n        public async Task ReturnsInvalidGivenNullSearchString()\n        {\n            var result = await _searchService.GetAllIncompleteItemsAsync(null);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\Services\\ToDoItemSearchService_GetAllIncompleteItems.cs",
      "file_type": "csharp",
      "token_count": 165,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService_GetAllIncompleteItems.cs | Type: csharp | Part 2 of 3]\\n\\nAssert.Equal(Ardalis.Result.ResultStatus.Invalid, result.Status);\n            Assert.Equal(\"searchString is required.\", result.ValidationErrors.First().ErrorMessage);\n        }\n\n        [Fact]\n        public async Task ReturnsErrorGivenDataAccessException()\n        {\n            string expectedErrorMessage = \"Database not there.\";\n            _mockRepo.Setup(r => r.ListAsync(It.IsAny<ISpecification<ToDoItem>>()))\n                .ThrowsAsync(new System.Exception(expectedErrorMessage));\n\n            var result = await _searchService.GetAllIncompleteItemsAsync(\"something\");\n\n            Assert.Equal(Ardalis.Result.ResultStatus.Error, result.Status);\n            Assert.Equal(expectedErrorMessage, result.Errors.First());\n        }\n\n        [Fact]\n        public async Task ReturnsListGivenSearchString()\n        {\n            var result = await _searchService.GetAllIncompleteItemsAsync(\"foo\");",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\Services\\ToDoItemSearchService_GetAllIncompleteItems.cs",
      "file_type": "csharp",
      "token_count": 160,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService_GetAllIncompleteItems.cs | Type: csharp | Part 3 of 3]\\n\\nAssert.Equal(Ardalis.Result.ResultStatus.Ok, result.Status);\n        }\n    }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\Services\\ToDoItemSearchService_GetAllIncompleteItems.cs",
      "file_type": "csharp",
      "token_count": 18,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService_GetNextIncompleteItem.cs | Type: csharp | Part 1 of 3]\\n\\n﻿using System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Ardalis.Specification;\nusing Clean.Architecture.Core.ProjectAggregate;\nusing Clean.Architecture.Core.Services;\nusing Clean.Architecture.SharedKernel.Interfaces;\nusing Moq;\nusing Xunit;\n\nnamespace Clean.Architecture.UnitTests.Core.Services\n{\n    public class ToDoItemSearchService_GetNextIncompleteItem\n    {\n        [Fact]\n        public async Task ReturnsNotFoundGivenNoRemainingItems()\n        {\n            var repo = new Mock<IRepository<ToDoItem>>();\n            var service = new ToDoItemSearchService(repo.Object);\n            repo.Setup(r => r.ListAsync(It.IsAny<ISpecification<ToDoItem>>()))\n                .ReturnsAsync(new List<ToDoItem>());\n\n            var result = await service.GetNextIncompleteItemAsync();\n\n            Assert.Equal(Ardalis.Result.ResultStatus.NotFound, result.Status);\n        }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\Services\\ToDoItemSearchService_GetNextIncompleteItem.cs",
      "file_type": "csharp",
      "token_count": 176,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService_GetNextIncompleteItem.cs | Type: csharp | Part 2 of 3]\\n\\nAssert.Equal(Ardalis.Result.ResultStatus.NotFound, result.Status);\n        }\n\n        [Fact]\n        public async Task ReturnsFirstItemFromList()\n        {\n            var repo = new Mock<IRepository<ToDoItem>>();\n            var service = new ToDoItemSearchService(repo.Object);\n            var testItems = GetTestItems();\n            repo.Setup(r => r.ListAsync(It.IsAny<ISpecification<ToDoItem>>()))\n                .ReturnsAsync(testItems);\n\n            var result = await service.GetNextIncompleteItemAsync();\n\n            Assert.Equal(testItems.First(), result.Value);\n        }\n\n        private List<ToDoItem> GetTestItems()\n        {\n            // Note: could use AutoFixture\n            var builder = new ToDoItemBuilder();\n\n            var items = new List<ToDoItem>();\n\n            var item1 = builder.WithDefaultValues().Build();\n            items.Add(item1);\n\n            var item2 = builder.WithDefaultValues().Id(2).Build();\n            items.Add(item2);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\Services\\ToDoItemSearchService_GetNextIncompleteItem.cs",
      "file_type": "csharp",
      "token_count": 195,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService_GetNextIncompleteItem.cs | Type: csharp | Part 3 of 3]\\n\\nvar item2 = builder.WithDefaultValues().Id(2).Build();\n            items.Add(item2);\n\n            var item3 = builder.WithDefaultValues().Id(3).Build();\n            items.Add(item3);\n\n            return items;\n        }\n    }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\Services\\ToDoItemSearchService_GetNextIncompleteItem.cs",
      "file_type": "csharp",
      "token_count": 52,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: GetContributorHandlerHandle.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\nusing NimblePros.SampleToDo.Core.ContributorAggregate.Specifications;\nusing NimblePros.SampleToDo.UseCases.Contributors.Queries.Get;\nusing Shouldly;\n\nnamespace NimblePros.SampleToDo.UnitTests.UseCases.Contributors;\n\npublic class GetContributorHandlerHandle\n{\n  private readonly string _testName = \"test name\";\n  private readonly IReadRepository<Contributor> _repository = Substitute.For<IReadRepository<Contributor>>();\n  private GetContributorHandler _handler;\n\n  public GetContributorHandlerHandle()\n  {\n      _handler = new GetContributorHandler(_repository);\n  }\n\n  [Fact]\n  public async Task ReturnsRecordGivenValidId()\n  {\n    int validId = 1;\n    _repository.FirstOrDefaultAsync(Arg.Any<ContributorByIdSpec>(), Arg.Any<CancellationToken>())\n      .Returns(new Contributor(ContributorName.From(_testName)));\n    var result = await _handler.Handle(new GetContributorQuery(validId), CancellationToken.None);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\UseCases\\Contributors\\GetContributorHandlerHandle.cs",
      "file_type": "csharp",
      "token_count": 210,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: GetContributorHandlerHandle.cs | Type: csharp | Part 2 of 2]\\n\\nresult.IsSuccess.ShouldBeTrue();\n    result.Value.Name.ShouldBe(_testName);\n  }\n\n  [Fact]\n  public async Task ReturnsNotFoundGivenInvalidId()\n  {\n    int invalidId = 1000;\n    _repository.FirstOrDefaultAsync(Arg.Any<ContributorByIdSpec>(), Arg.Any<CancellationToken>()).ReturnsNull();\n    var result = await _handler.Handle(new GetContributorQuery(invalidId), CancellationToken.None);\n\n    result.IsSuccess.ShouldBeFalse();\n    result.Status.ShouldBe(ResultStatus.NotFound);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\UseCases\\Contributors\\GetContributorHandlerHandle.cs",
      "file_type": "csharp",
      "token_count": 100,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: CreateContributorHandlerHandle.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\nusing NimblePros.SampleToDo.UseCases.Contributors.Commands.Create;\nusing Shouldly;\n\nnamespace NimblePros.SampleToDo.UnitTests.UseCases.Contributors;\npublic class CreateContributorHandlerHandle\n{\n  private readonly string _testName = \"test name\";\n  private readonly IRepository<Contributor> _repository = Substitute.For<IRepository<Contributor>>();\n  private CreateContributorHandler _handler;\n\n  public CreateContributorHandlerHandle()\n  {\n    _handler = new CreateContributorHandler(_repository);\n  }\n\n  private Contributor CreateContributor()\n  {\n    return new Contributor(ContributorName.From(_testName));\n  }\n\n  [Fact]\n  public async Task ReturnsSuccessGivenValidName()\n  {\n    _repository.AddAsync(Arg.Any<Contributor>(), Arg.Any<CancellationToken>())\n      .Returns(Task.FromResult(CreateContributor()));\n    var result = await _handler.Handle(new CreateContributorCommand(ContributorName.From(_testName)), CancellationToken.None);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\UseCases\\Contributors\\CreateContributorHandlerHandle.cs",
      "file_type": "csharp",
      "token_count": 207,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: CreateContributorHandlerHandle.cs | Type: csharp | Part 2 of 2]\\n\\nresult.IsSuccess.ShouldBeTrue();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\UseCases\\Contributors\\CreateContributorHandlerHandle.cs",
      "file_type": "csharp",
      "token_count": 8,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ToDoItemSearchServiceTests.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.Interfaces;\nusing NimblePros.SampleToDo.Core.ProjectAggregate;\nusing NimblePros.SampleToDo.Core.Services;\n\nnamespace NimblePros.SampleToDo.UnitTests.Core.Services;\n\npublic class ToDoItemSearchServiceTests\n{\n  private readonly IToDoItemSearchService _service;\n  private readonly IRepository<Project> _repo = Substitute.For<IRepository<Project>>();\n  \n  public ToDoItemSearchServiceTests()\n  {\n    _service = new ToDoItemSearchService(_repo);\n    \n  }\n\n  [Fact]\n  public async Task ReturnsValidationErrors()\n  {\n    var projects = await _service.GetAllIncompleteItemsAsync(ProjectId.From(0), string.Empty);\n    \n    Assert.NotEmpty(projects.ValidationErrors);\n  }\n  \n  [Fact]\n  public async Task ReturnsProjectNotFound()\n  {\n    var projects = await _service.GetAllIncompleteItemsAsync(ProjectId.From(100), \"Hello\");",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\Services\\ToDoItemSearchServiceTests.cs",
      "file_type": "csharp",
      "token_count": 181,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ToDoItemSearchServiceTests.cs | Type: csharp | Part 2 of 2]\\n\\nAssert.Equal(ResultStatus.NotFound, projects.Status);\n  }\n  \n  [Fact]\n  public async Task ReturnsAllIncompleteItems()\n  {\n    var title = \"Some Title\";\n    Project project = new Project(ProjectName.From(\"Cool Project\"));\n    \n    project.AddItem(new ToDoItem\n    {\n      Title = title,\n      Description = \"Some Description\"\n    });\n\n    _repo.FirstOrDefaultAsync(Arg.Any<ISpecification<Project>>(), Arg.Any<CancellationToken>())\n      .Returns(project);\n\n    var projects = await _service.GetAllIncompleteItemsAsync(ProjectId.From(1), title);\n\n    Assert.Empty(projects.ValidationErrors);\n    Assert.Equal(projects.Value.First().Title, title);\n    Assert.Equal(project.Items.Count(), projects.Value.Count);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\Core\\Services\\ToDoItemSearchServiceTests.cs",
      "file_type": "csharp",
      "token_count": 149,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using Ardalis.GuardClauses;\nglobal using Ardalis.Result;\nglobal using Ardalis.SharedKernel;\nglobal using Ardalis.SmartEnum;\nglobal using Ardalis.Specification;\nglobal using MediatR;\nglobal using Microsoft.Extensions.Logging;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 50,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Program.cs | Type: csharp]\\n\\nvar builder = DistributedApplication.CreateBuilder(args);\n\nbuilder.AddProject<Projects.Clean_Architecture_Web>(\"web\");\n\nbuilder.Build().Run();",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.AspireHost\\Program.cs",
      "file_type": "csharp",
      "token_count": 29,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: UpdateContributorHandlerHandle.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using NimblePros.SampleToDo.Core.ContributorAggregate;\nusing NimblePros.SampleToDo.UseCases.Contributors.Commands.Update;\nusing Shouldly;\n\nnamespace NimblePros.SampleToDo.UnitTests.UseCases.Contributors;\n\npublic class UpdateContributorHandlerHandle\n{\n  private readonly string _testName = \"test name\";\n  private readonly string _newName = Guid.NewGuid().ToString();\n  private readonly IRepository<Contributor> _repository = Substitute.For<IRepository<Contributor>>();\n  private UpdateContributorHandler _handler;\n\n  public UpdateContributorHandlerHandle()\n  {\n      _handler = new UpdateContributorHandler(_repository);\n  }\n\n  [Fact]\n  public async Task ReturnsRecordGivenValidId()\n  {\n    int validId = 1;\n    _repository.GetByIdAsync(Arg.Any<int>(), Arg.Any<CancellationToken>())\n      .Returns(new Contributor(ContributorName.From(_testName)));\n    var result = await _handler.Handle(new UpdateContributorCommand(validId, ContributorName.From(_newName)), CancellationToken.None);",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\UseCases\\Contributors\\UpdateContributorHandlerHandle.cs",
      "file_type": "csharp",
      "token_count": 208,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: UpdateContributorHandlerHandle.cs | Type: csharp | Part 2 of 2]\\n\\nresult.IsSuccess.ShouldBeTrue();\n    result.Value.Name.ShouldBe(_newName);\n  }\n\n  [Fact]\n  public async Task ReturnsNotFoundGivenInvalidId()\n  {\n    int invalidId = 1000;\n    _repository.GetByIdAsync(Arg.Any<int>(), Arg.Any<CancellationToken>()).ReturnsNull();\n    var result = await _handler.Handle(new UpdateContributorCommand(invalidId, ContributorName.From(_newName)), CancellationToken.None);\n\n    result.IsSuccess.ShouldBeFalse();\n    result.Status.ShouldBe(ResultStatus.NotFound);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\UseCases\\Contributors\\UpdateContributorHandlerHandle.cs",
      "file_type": "csharp",
      "token_count": 103,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorStatus.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Core.ContributorAggregate;\n\npublic class ContributorStatus : SmartEnum<ContributorStatus>\n{\n  public static readonly ContributorStatus CoreTeam = new(nameof(CoreTeam), 1);\n  public static readonly ContributorStatus Community = new(nameof(Community), 2);\n  public static readonly ContributorStatus NotSet = new(nameof(NotSet), 3);\n\n  protected ContributorStatus(string name, int value) : base(name, value) { }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\ContributorAggregate\\ContributorStatus.cs",
      "file_type": "csharp",
      "token_count": 94,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Contributor.cs | Type: csharp | Part 1 of 2]\\n\\n﻿namespace Clean.Architecture.Core.ContributorAggregate;\n\npublic class Contributor(string name) : EntityBase, IAggregateRoot\n{\n  // Example of validating primary constructor inputs\n  // See: https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/primary-constructors#initialize-base-class\n  public string Name { get; private set; } = Guard.Against.NullOrEmpty(name, nameof(name));\n  public ContributorStatus Status { get; private set; } = ContributorStatus.NotSet;\n  public PhoneNumber? PhoneNumber { get; private set; }\n\n  public void SetPhoneNumber(string phoneNumber) => PhoneNumber = new PhoneNumber(string.Empty, phoneNumber, string.Empty);\n\n  public void UpdateName(string newName) => Name = Guard.Against.NullOrEmpty(newName, nameof(newName));\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\ContributorAggregate\\Contributor.cs",
      "file_type": "csharp",
      "token_count": 168,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Contributor.cs | Type: csharp | Part 2 of 2]\\n\\npublic class PhoneNumber(string countryCode,\n  string number,\n  string? extension) : ValueObject\n{\n  public string CountryCode { get; private set; } = countryCode;\n  public string Number { get; private set; } = number;\n  public string? Extension { get; private set; } = extension;\n\n  protected override IEnumerable<object> GetEqualityComponents()\n  {\n    yield return CountryCode;\n    yield return Number;\n    yield return Extension ?? String.Empty;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\ContributorAggregate\\Contributor.cs",
      "file_type": "csharp",
      "token_count": 98,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorDeletedHandler.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Core.ContributorAggregate.Events;\nusing Clean.Architecture.Core.Interfaces;\n\nnamespace Clean.Architecture.Core.ContributorAggregate.Handlers;\n\n/// <summary>\n/// NOTE: Internal because ContributorDeleted is also marked as internal.\n/// </summary>\ninternal class ContributorDeletedHandler(ILogger<ContributorDeletedHandler> logger,\n  IEmailSender emailSender) : INotificationHandler<ContributorDeletedEvent>\n{\n  public async Task Handle(ContributorDeletedEvent domainEvent, CancellationToken cancellationToken)\n  {\n    logger.LogInformation(\"Handling Contributed Deleted event for {contributorId}\", domainEvent.ContributorId);\n\n    await emailSender.SendEmailAsync(\"to@test.com\",\n                                     \"from@test.com\",\n                                     \"Contributor Deleted\",\n                                     $\"Contributor with id {domainEvent.ContributorId} was deleted.\");\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\ContributorAggregate\\Handlers\\ContributorDeletedHandler.cs",
      "file_type": "csharp",
      "token_count": 172,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorDeletedEvent.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Core.ContributorAggregate.Events;\n\n/// <summary>\n/// A domain event that is dispatched whenever a contributor is deleted.\n/// The DeleteContributorService is used to dispatch this event.\n/// </summary>\ninternal sealed class ContributorDeletedEvent(int contributorId) : DomainEventBase\n{\n  public int ContributorId { get; init; } = contributorId;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\ContributorAggregate\\Events\\ContributorDeletedEvent.cs",
      "file_type": "csharp",
      "token_count": 78,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorByIdSpec.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Core.ContributorAggregate.Specifications;\n\npublic class ContributorByIdSpec : Specification<Contributor>\n{\n  public ContributorByIdSpec(int contributorId) =>\n    Query\n        .Where(contributor => contributor.Id == contributorId);\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\ContributorAggregate\\Specifications\\ContributorByIdSpec.cs",
      "file_type": "csharp",
      "token_count": 52,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: IEmailSender.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Core.Interfaces;\n\npublic interface IEmailSender\n{\n  Task SendEmailAsync(string to, string from, string subject, string body);\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\Interfaces\\IEmailSender.cs",
      "file_type": "csharp",
      "token_count": 33,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: DeleteContributorService.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Clean.Architecture.Core.ContributorAggregate;\nusing Clean.Architecture.Core.ContributorAggregate.Events;\nusing Clean.Architecture.Core.Interfaces;\n\n\nnamespace Clean.Architecture.Core.Services;\n\n/// <summary>\n/// This is here mainly so there's an example of a domain service\n/// and also to demonstrate how to fire domain events from a service.\n/// </summary>\n/// <param name=\"_repository\"></param>\n/// <param name=\"_mediator\"></param>\n/// <param name=\"_logger\"></param>\npublic class DeleteContributorService(IRepository<Contributor> _repository,\n  IMediator _mediator,\n  ILogger<DeleteContributorService> _logger) : IDeleteContributorService\n{\n  public async Task<Result> DeleteContributor(int contributorId)\n  {\n    _logger.LogInformation(\"Deleting Contributor {contributorId}\", contributorId);\n    Contributor? aggregateToDelete = await _repository.GetByIdAsync(contributorId);\n    if (aggregateToDelete == null) return Result.NotFound();",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\Services\\DeleteContributorService.cs",
      "file_type": "csharp",
      "token_count": 203,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: DeleteContributorService.cs | Type: csharp | Part 2 of 2]\\n\\nawait _repository.DeleteAsync(aggregateToDelete);\n    var domainEvent = new ContributorDeletedEvent(contributorId);\n    await _mediator.Publish(domainEvent);\n\n    return Result.Success();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\Services\\DeleteContributorService.cs",
      "file_type": "csharp",
      "token_count": 40,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using System.Net.Mail;\nglobal using System.Reflection;\nglobal using Ardalis.GuardClauses;\nglobal using Ardalis.SharedKernel;\nglobal using Ardalis.Specification.EntityFrameworkCore;\nglobal using MailKit.Net.Smtp;\nglobal using Microsoft.EntityFrameworkCore;\nglobal using Microsoft.EntityFrameworkCore.Metadata.Builders;\nglobal using Microsoft.Extensions.Configuration;\nglobal using Microsoft.Extensions.DependencyInjection;\nglobal using Microsoft.Extensions.Logging;\nglobal using Microsoft.Extensions.Options;\nglobal using MimeKit;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 86,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: IDeleteContributorService.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Core.Interfaces;\n\npublic interface IDeleteContributorService\n{\n  // This service and method exist to provide a place in which to fire domain events\n  // when deleting this aggregate root entity\n  public Task<Result> DeleteContributor(int contributorId);\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\Interfaces\\IDeleteContributorService.cs",
      "file_type": "csharp",
      "token_count": 57,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: AppDbContextExtensions.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Infrastructure.Data;\n\npublic static class AppDbContextExtensions\n{\n  public static void AddApplicationDbContext(this IServiceCollection services, string connectionString) =>\n    services.AddDbContext<AppDbContext>(options =>\n         options.UseSqlite(connectionString));\n\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\AppDbContextExtensions.cs",
      "file_type": "csharp",
      "token_count": 49,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: AppDbContext.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Clean.Architecture.Core.ContributorAggregate;\n\nnamespace Clean.Architecture.Infrastructure.Data;\npublic class AppDbContext(DbContextOptions<AppDbContext> options,\n  IDomainEventDispatcher? dispatcher) : DbContext(options)\n{\n  private readonly IDomainEventDispatcher? _dispatcher = dispatcher;\n\n  public DbSet<Contributor> Contributors => Set<Contributor>();\n\n  protected override void OnModelCreating(ModelBuilder modelBuilder)\n  {\n    base.OnModelCreating(modelBuilder);\n    modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());\n  }\n\n  public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = new CancellationToken())\n  {\n    int result = await base.SaveChangesAsync(cancellationToken).ConfigureAwait(false);\n\n    // ignore events if no dispatcher provided\n    if (_dispatcher == null) return result;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\AppDbContext.cs",
      "file_type": "csharp",
      "token_count": 154,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: AppDbContext.cs | Type: csharp | Part 2 of 2]\\n\\n// ignore events if no dispatcher provided\n    if (_dispatcher == null) return result;\n\n    // dispatch events only if save was successful\n    var entitiesWithEvents = ChangeTracker.Entries<HasDomainEventsBase>()\n        .Select(e => e.Entity)\n        .Where(e => e.DomainEvents.Any())\n        .ToArray();\n\n    await _dispatcher.DispatchAndClearEvents(entitiesWithEvents);\n\n    return result;\n  }\n\n  public override int SaveChanges() =>\n        SaveChangesAsync().GetAwaiter().GetResult();\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\AppDbContext.cs",
      "file_type": "csharp",
      "token_count": 105,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: InfrastructureServiceExtensions.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Clean.Architecture.Core.Interfaces;\nusing Clean.Architecture.Core.Services;\nusing Clean.Architecture.Infrastructure.Data;\nusing Clean.Architecture.Infrastructure.Data.Queries;\nusing Clean.Architecture.UseCases.Contributors.List;\n\n\nnamespace Clean.Architecture.Infrastructure;\npublic static class InfrastructureServiceExtensions\n{\n  public static IServiceCollection AddInfrastructureServices(\n    this IServiceCollection services,\n    ConfigurationManager config,\n    ILogger logger)\n  {\n    string? connectionString = config.GetConnectionString(\"SqliteConnection\");\n    Guard.Against.Null(connectionString);\n    services.AddDbContext<AppDbContext>(options =>\n     options.UseSqlite(connectionString));",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\InfrastructureServiceExtensions.cs",
      "file_type": "csharp",
      "token_count": 123,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: InfrastructureServiceExtensions.cs | Type: csharp | Part 2 of 2]\\n\\nservices.AddScoped(typeof(IRepository<>), typeof(EfRepository<>))\n           .AddScoped(typeof(IReadRepository<>), typeof(EfRepository<>))\n           .AddScoped<IListContributorsQueryService, ListContributorsQueryService>()\n           .AddScoped<IDeleteContributorService, DeleteContributorService>();\n\n\n    logger.LogInformation(\"{Project} services registered\", \"Infrastructure\");\n\n    return services;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\InfrastructureServiceExtensions.cs",
      "file_type": "csharp",
      "token_count": 82,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorConfiguration.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Core.ContributorAggregate;\n\nnamespace Clean.Architecture.Infrastructure.Data.Config;\n\npublic class ContributorConfiguration : IEntityTypeConfiguration<Contributor>\n{\n  public void Configure(EntityTypeBuilder<Contributor> builder)\n  {\n    builder.Property(p => p.Name)\n        .HasMaxLength(DataSchemaConstants.DEFAULT_NAME_LENGTH)\n        .IsRequired();\n\n    builder.OwnsOne(builder => builder.PhoneNumber);\n\n    builder.Property(x => x.Status)\n      .HasConversion(\n          x => x.Value,\n          x => ContributorStatus.FromValue(x));\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Config\\ContributorConfiguration.cs",
      "file_type": "csharp",
      "token_count": 113,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: EfRepository.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Infrastructure.Data;\n\n// inherit from Ardalis.Specification type\npublic class EfRepository<T>(AppDbContext dbContext) :\n  RepositoryBase<T>(dbContext), IReadRepository<T>, IRepository<T> where T : class, IAggregateRoot\n{\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\EfRepository.cs",
      "file_type": "csharp",
      "token_count": 54,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: SeedData.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Core.ContributorAggregate;\n\nnamespace Clean.Architecture.Infrastructure.Data;\n\npublic static class SeedData\n{\n  public static readonly Contributor Contributor1 = new(\"Ardalis\");\n  public static readonly Contributor Contributor2 = new(\"Snowfrog\");\n\n  public static async Task InitializeAsync(AppDbContext dbContext)\n  {\n    if (await dbContext.Contributors.AnyAsync()) return; // DB has been seeded\n\n    await PopulateTestDataAsync(dbContext);\n  }\n\n  public static async Task PopulateTestDataAsync(AppDbContext dbContext)\n  {\n    dbContext.Contributors.AddRange([Contributor1, Contributor2]);\n    await dbContext.SaveChangesAsync();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\SeedData.cs",
      "file_type": "csharp",
      "token_count": 131,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: DataSchemaConstants.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Infrastructure.Data.Config;\n\npublic static class DataSchemaConstants\n{\n  public const int DEFAULT_NAME_LENGTH = 100;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Config\\DataSchemaConstants.cs",
      "file_type": "csharp",
      "token_count": 29,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: 20231218143922_PhoneNumber.Designer.cs | Type: csharp | Part 1 of 3]\\n\\n﻿// <auto-generated />\nusing Clean.Architecture.Infrastructure.Data;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\n\n#nullable disable\n\nnamespace Clean.Architecture.Infrastructure.Data.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    [Migration(\"20231218143922_PhoneNumber\")]\n    partial class PhoneNumber\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder.HasAnnotation(\"ProductVersion\", \"8.0.0\");\n\n            modelBuilder.Entity(\"Clean.Architecture.Core.ContributorAggregate.Contributor\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"INTEGER\");",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Migrations\\20231218143922_PhoneNumber.Designer.cs",
      "file_type": "csharp",
      "token_count": 158,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: 20231218143922_PhoneNumber.Designer.cs | Type: csharp | Part 2 of 3]\\n\\nb.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"TEXT\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"INTEGER\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Contributors\");\n                });\n\n            modelBuilder.Entity(\"Clean.Architecture.Core.ContributorAggregate.Contributor\", b =>\n                {\n                    b.OwnsOne(\"Clean.Architecture.Core.ContributorAggregate.PhoneNumber\", \"PhoneNumber\", b1 =>\n                        {\n                            b1.Property<int>(\"ContributorId\")\n                                .HasColumnType(\"INTEGER\");\n\n                            b1.Property<string>(\"CountryCode\")\n                                .IsRequired()\n                                .HasColumnType(\"TEXT\");",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Migrations\\20231218143922_PhoneNumber.Designer.cs",
      "file_type": "csharp",
      "token_count": 133,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: 20231218143922_PhoneNumber.Designer.cs | Type: csharp | Part 3 of 3]\\n\\nb1.Property<string>(\"Extension\")\n                                .HasColumnType(\"TEXT\");\n\n                            b1.Property<string>(\"Number\")\n                                .IsRequired()\n                                .HasColumnType(\"TEXT\");\n\n                            b1.HasKey(\"ContributorId\");\n\n                            b1.ToTable(\"Contributors\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"ContributorId\");\n                        });\n\n                    b.Navigation(\"PhoneNumber\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Migrations\\20231218143922_PhoneNumber.Designer.cs",
      "file_type": "csharp",
      "token_count": 86,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: 20231218143922_PhoneNumber.cs | Type: csharp | Part 1 of 3]\\n\\n﻿using Microsoft.EntityFrameworkCore.Migrations;\n\n#nullable disable\n\nnamespace Clean.Architecture.Infrastructure.Data.Migrations;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Migrations\\20231218143922_PhoneNumber.cs",
      "file_type": "csharp",
      "token_count": 18,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: 20231218143922_PhoneNumber.cs | Type: csharp | Part 2 of 3]\\n\\nnamespace Clean.Architecture.Infrastructure.Data.Migrations;\n\n/// <inheritdoc />\npublic partial class PhoneNumber : Migration\n{\n  /// <inheritdoc />\n  protected override void Up(MigrationBuilder migrationBuilder)\n  {\n    migrationBuilder.CreateTable(\n        name: \"Contributors\",\n        columns: table => new\n        {\n          Id = table.Column<int>(type: \"INTEGER\", nullable: false)\n                .Annotation(\"Sqlite:Autoincrement\", true),\n          Name = table.Column<string>(type: \"TEXT\", maxLength: 100, nullable: false),\n          Status = table.Column<int>(type: \"INTEGER\", nullable: false),\n          PhoneNumber_CountryCode = table.Column<string>(type: \"TEXT\", nullable: true),\n          PhoneNumber_Number = table.Column<string>(type: \"TEXT\", nullable: true),\n          PhoneNumber_Extension = table.Column<string>(type: \"TEXT\", nullable: true)\n        },\n        constraints: table =>\n        {\n          table.PrimaryKey(\"PK_Contributors\", x => x.Id);\n        });\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Migrations\\20231218143922_PhoneNumber.cs",
      "file_type": "csharp",
      "token_count": 202,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: 20231218143922_PhoneNumber.cs | Type: csharp | Part 3 of 3]\\n\\n/// <inheritdoc />\n  protected override void Down(MigrationBuilder migrationBuilder)\n  {\n    migrationBuilder.DropTable(\n        name: \"Contributors\");\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Migrations\\20231218143922_PhoneNumber.cs",
      "file_type": "csharp",
      "token_count": 28,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: FakeEmailSender.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Core.Interfaces;\n\nnamespace Clean.Architecture.Infrastructure.Email;\n\npublic class FakeEmailSender(ILogger<FakeEmailSender> logger) : IEmailSender\n{\n  private readonly ILogger<FakeEmailSender> _logger = logger;\n  public Task SendEmailAsync(string to, string from, string subject, string body)\n  {\n    _logger.LogInformation(\"Not actually sending an email to {to} from {from} with subject {subject}\", to, from, subject);\n    return Task.CompletedTask;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Email\\FakeEmailSender.cs",
      "file_type": "csharp",
      "token_count": 108,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: AppDbContextModelSnapshot.cs | Type: csharp | Part 1 of 3]\\n\\n﻿// <auto-generated />\nusing Clean.Architecture.Infrastructure.Data;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\n\n#nullable disable\n\nnamespace Clean.Architecture.Infrastructure.Data.Migrations\n{\n    [DbContext(typeof(AppDbContext))]\n    partial class AppDbContextModelSnapshot : ModelSnapshot\n    {\n        protected override void BuildModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder.HasAnnotation(\"ProductVersion\", \"8.0.0\");\n\n            modelBuilder.Entity(\"Clean.Architecture.Core.ContributorAggregate.Contributor\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"INTEGER\");",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Migrations\\AppDbContextModelSnapshot.cs",
      "file_type": "csharp",
      "token_count": 140,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: AppDbContextModelSnapshot.cs | Type: csharp | Part 2 of 3]\\n\\nb.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(100)\n                        .HasColumnType(\"TEXT\");\n\n                    b.Property<int>(\"Status\")\n                        .HasColumnType(\"INTEGER\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Contributors\");\n                });\n\n            modelBuilder.Entity(\"Clean.Architecture.Core.ContributorAggregate.Contributor\", b =>\n                {\n                    b.OwnsOne(\"Clean.Architecture.Core.ContributorAggregate.PhoneNumber\", \"PhoneNumber\", b1 =>\n                        {\n                            b1.Property<int>(\"ContributorId\")\n                                .HasColumnType(\"INTEGER\");\n\n                            b1.Property<string>(\"CountryCode\")\n                                .IsRequired()\n                                .HasColumnType(\"TEXT\");",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Migrations\\AppDbContextModelSnapshot.cs",
      "file_type": "csharp",
      "token_count": 133,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: AppDbContextModelSnapshot.cs | Type: csharp | Part 3 of 3]\\n\\nb1.Property<string>(\"Extension\")\n                                .HasColumnType(\"TEXT\");\n\n                            b1.Property<string>(\"Number\")\n                                .IsRequired()\n                                .HasColumnType(\"TEXT\");\n\n                            b1.HasKey(\"ContributorId\");\n\n                            b1.ToTable(\"Contributors\");\n\n                            b1.WithOwner()\n                                .HasForeignKey(\"ContributorId\");\n                        });\n\n                    b.Navigation(\"PhoneNumber\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Migrations\\AppDbContextModelSnapshot.cs",
      "file_type": "csharp",
      "token_count": 86,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ListContributorsQueryService.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.UseCases.Contributors;\nusing Clean.Architecture.UseCases.Contributors.List;\n\nnamespace Clean.Architecture.Infrastructure.Data.Queries;\n\npublic class ListContributorsQueryService(AppDbContext _db) : IListContributorsQueryService\n{\n  // You can use EF, Dapper, SqlClient, etc. for queries -\n  // this is just an example\n\n  public async Task<IEnumerable<ContributorDTO>> ListAsync()\n  {\n    // NOTE: This will fail if testing with EF InMemory provider!\n    var result = await _db.Database.SqlQuery<ContributorDTO>(\n      $\"SELECT Id, Name, PhoneNumber_Number AS PhoneNumber FROM Contributors\") // don't fetch other big columns\n      .ToListAsync();\n\n    return result;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Queries\\ListContributorsQueryService.cs",
      "file_type": "csharp",
      "token_count": 157,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: FakeListContributorsQueryService.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.UseCases.Contributors;\nusing Clean.Architecture.UseCases.Contributors.List;\n\nnamespace Clean.Architecture.Infrastructure.Data.Queries;\n\npublic class FakeListContributorsQueryService : IListContributorsQueryService\n{\n  public Task<IEnumerable<ContributorDTO>> ListAsync()\n  {\n    IEnumerable<ContributorDTO> result =\n        [new ContributorDTO(1, \"Fake Contributor 1\", \"\"),\n        new ContributorDTO(2, \"Fake Contributor 2\", \"\")];\n\n    return Task.FromResult(result);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Data\\Queries\\FakeListContributorsQueryService.cs",
      "file_type": "csharp",
      "token_count": 111,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: MailserverConfiguration.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Infrastructure.Email;\n\npublic class MailserverConfiguration()\n{\n  public string Hostname { get; set; } = \"localhost\";\n  public int Port { get; set; } = 25;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Email\\MailserverConfiguration.cs",
      "file_type": "csharp",
      "token_count": 45,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: MimeKitEmailSender.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Clean.Architecture.Core.Interfaces;\n\nnamespace Clean.Architecture.Infrastructure.Email;\n\npublic class MimeKitEmailSender(ILogger<MimeKitEmailSender> logger,\n  IOptions<MailserverConfiguration> mailserverOptions) : IEmailSender\n{\n  private readonly ILogger<MimeKitEmailSender> _logger = logger;\n  private readonly MailserverConfiguration _mailserverConfiguration = mailserverOptions.Value!;\n\n  public async Task SendEmailAsync(string to, string from, string subject, string body)\n  {\n    _logger.LogWarning(\"Sending email to {to} from {from} with subject {subject} using {type}.\", to, from, subject, this.ToString());",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Email\\MimeKitEmailSender.cs",
      "file_type": "csharp",
      "token_count": 137,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: MimeKitEmailSender.cs | Type: csharp | Part 2 of 2]\\n\\nusing var client = new MailKit.Net.Smtp.SmtpClient(); \n    await client.ConnectAsync(_mailserverConfiguration.Hostname, \n      _mailserverConfiguration.Port, false);\n    var message = new MimeMessage();\n    message.From.Add(new MailboxAddress(from, from));\n    message.To.Add(new MailboxAddress(to, to));\n    message.Subject = subject;\n    message.Body = new TextPart(\"plain\") { Text = body };\n\n    await client.SendAsync(message);\n\n    await client.DisconnectAsync(true, \n      new CancellationToken(canceled: true));\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Email\\MimeKitEmailSender.cs",
      "file_type": "csharp",
      "token_count": 117,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: SmtpEmailSender.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Clean.Architecture.Core.Interfaces;\n\nnamespace Clean.Architecture.Infrastructure.Email;\n\n/// <summary>\n/// MimeKit is recommended over this now:\n/// https://weblogs.asp.net/sreejukg/system-net-mail-smtpclient-is-not-recommended-anymore-what-is-the-alternative\n/// </summary>\npublic class SmtpEmailSender(ILogger<SmtpEmailSender> logger,\n                       IOptions<MailserverConfiguration> mailserverOptions) : IEmailSender\n{\n  private readonly ILogger<SmtpEmailSender> _logger = logger;\n  private readonly MailserverConfiguration _mailserverConfiguration = mailserverOptions.Value!;\n\n  public async Task SendEmailAsync(string to, string from, string subject, string body)\n  {\n    var emailClient = new System.Net.Mail.SmtpClient(_mailserverConfiguration.Hostname, _mailserverConfiguration.Port);",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Email\\SmtpEmailSender.cs",
      "file_type": "csharp",
      "token_count": 178,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: SmtpEmailSender.cs | Type: csharp | Part 2 of 2]\\n\\nvar message = new MailMessage\n    {\n      From = new MailAddress(from),\n      Subject = subject,\n      Body = body\n    };\n    message.To.Add(new MailAddress(to));\n    await emailClient.SendMailAsync(message);\n    _logger.LogWarning(\"Sending email to {to} from {from} with subject {subject} using {type}.\", to, from, subject, this.ToString());\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Email\\SmtpEmailSender.cs",
      "file_type": "csharp",
      "token_count": 84,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorDTO.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.UseCases.Contributors;\npublic record ContributorDTO(int Id, string Name, string? PhoneNumber);",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\ContributorDTO.cs",
      "file_type": "csharp",
      "token_count": 25,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using Ardalis.Result;\nglobal using Ardalis.SharedKernel;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 14,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Extensions.cs | Type: csharp | Part 1 of 5]\\n\\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Diagnostics.HealthChecks;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Diagnostics.HealthChecks;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.ServiceDiscovery;\nusing OpenTelemetry;\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Trace;\n\nnamespace Microsoft.Extensions.Hosting;\n\n// Adds common .NET Aspire services: service discovery, resilience, health checks, and OpenTelemetry.\n// This project should be referenced by each service project in your solution.\n// To learn more about using this project, see https://aka.ms/dotnet/aspire/service-defaults\npublic static class Extensions\n{\n    public static TBuilder AddServiceDefaults<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder\n    {\n        builder.ConfigureOpenTelemetry();\n\n        builder.AddDefaultHealthChecks();\n\n        builder.Services.AddServiceDiscovery();",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.ServiceDefaults\\Extensions.cs",
      "file_type": "csharp",
      "token_count": 171,
      "chunk_index": 0,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: Extensions.cs | Type: csharp | Part 2 of 5]\\n\\nbuilder.AddDefaultHealthChecks();\n\n        builder.Services.AddServiceDiscovery();\n\n        builder.Services.ConfigureHttpClientDefaults(http =>\n        {\n            // Turn on resilience by default\n            http.AddStandardResilienceHandler();\n\n            // Turn on service discovery by default\n            http.AddServiceDiscovery();\n        });\n\n        // Uncomment the following to restrict the allowed schemes for service discovery.\n        // builder.Services.Configure<ServiceDiscoveryOptions>(options =>\n        // {\n        //     options.AllowedSchemes = [\"https\"];\n        // });\n\n        return builder;\n    }\n\n    public static TBuilder ConfigureOpenTelemetry<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder\n    {\n        builder.Logging.AddOpenTelemetry(logging =>\n        {\n            logging.IncludeFormattedMessage = true;\n            logging.IncludeScopes = true;\n        });",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.ServiceDefaults\\Extensions.cs",
      "file_type": "csharp",
      "token_count": 161,
      "chunk_index": 1,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: Extensions.cs | Type: csharp | Part 3 of 5]\\n\\nbuilder.Services.AddOpenTelemetry()\n            .WithMetrics(metrics =>\n            {\n                metrics.AddAspNetCoreInstrumentation()\n                    .AddHttpClientInstrumentation()\n                    .AddRuntimeInstrumentation();\n            })\n            .WithTracing(tracing =>\n            {\n                tracing.AddAspNetCoreInstrumentation()\n                    // Uncomment the following line to enable gRPC instrumentation (requires the OpenTelemetry.Instrumentation.GrpcNetClient package)\n                    //.AddGrpcClientInstrumentation()\n                    .AddHttpClientInstrumentation();\n            });\n\n        builder.AddOpenTelemetryExporters();\n\n        return builder;\n    }\n\n    private static TBuilder AddOpenTelemetryExporters<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder\n    {\n        var useOtlpExporter = !string.IsNullOrWhiteSpace(builder.Configuration[\"OTEL_EXPORTER_OTLP_ENDPOINT\"]);",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.ServiceDefaults\\Extensions.cs",
      "file_type": "csharp",
      "token_count": 167,
      "chunk_index": 2,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: Extensions.cs | Type: csharp | Part 4 of 5]\\n\\nif (useOtlpExporter)\n        {\n            builder.Services.AddOpenTelemetry().UseOtlpExporter();\n        }\n\n        // Uncomment the following lines to enable the Azure Monitor exporter (requires the Azure.Monitor.OpenTelemetry.AspNetCore package)\n        //if (!string.IsNullOrEmpty(builder.Configuration[\"APPLICATIONINSIGHTS_CONNECTION_STRING\"]))\n        //{\n        //    builder.Services.AddOpenTelemetry()\n        //       .UseAzureMonitor();\n        //}\n\n        return builder;\n    }\n\n    public static TBuilder AddDefaultHealthChecks<TBuilder>(this TBuilder builder) where TBuilder : IHostApplicationBuilder\n    {\n        builder.Services.AddHealthChecks()\n            // Add a default liveness check to ensure app is responsive\n            .AddCheck(\"self\", () => HealthCheckResult.Healthy(), [\"live\"]);\n\n        return builder;\n    }",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.ServiceDefaults\\Extensions.cs",
      "file_type": "csharp",
      "token_count": 166,
      "chunk_index": 3,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: Extensions.cs | Type: csharp | Part 5 of 5]\\n\\nreturn builder;\n    }\n\n    public static WebApplication MapDefaultEndpoints(this WebApplication app)\n    {\n        // Adding health checks endpoints to applications in non-development environments has security implications.\n        // See https://aka.ms/dotnet/aspire/healthchecks for details before enabling these endpoints in non-development environments.\n        if (app.Environment.IsDevelopment())\n        {\n            // All health checks must pass for app to be considered ready to accept traffic after starting\n            app.MapHealthChecks(\"/health\");\n\n            // Only health checks tagged with the \"live\" tag must pass for app to be considered alive\n            app.MapHealthChecks(\"/alive\", new HealthCheckOptions\n            {\n                Predicate = r => r.Tags.Contains(\"live\")\n            });\n        }\n\n        return app;\n    }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.ServiceDefaults\\Extensions.cs",
      "file_type": "csharp",
      "token_count": 158,
      "chunk_index": 4,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: CreateContributorHandler.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Core.ContributorAggregate;\n\nnamespace Clean.Architecture.UseCases.Contributors.Create;\n\npublic class CreateContributorHandler(IRepository<Contributor> _repository)\n  : ICommandHandler<CreateContributorCommand, Result<int>>\n{\n  public async Task<Result<int>> Handle(CreateContributorCommand request,\n    CancellationToken cancellationToken)\n  {\n    var newContributor = new Contributor(request.Name);\n    if (!string.IsNullOrEmpty(request.PhoneNumber))\n    {\n      newContributor.SetPhoneNumber(request.PhoneNumber);\n    }\n    var createdItem = await _repository.AddAsync(newContributor, cancellationToken);\n\n    return createdItem.Id;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\Create\\CreateContributorHandler.cs",
      "file_type": "csharp",
      "token_count": 131,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: CreateContributorCommand.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.UseCases.Contributors.Create;\n\n/// <summary>\n/// Create a new Contributor.\n/// </summary>\n/// <param name=\"Name\"></param>\npublic record CreateContributorCommand(string Name, string? PhoneNumber) : Ardalis.SharedKernel.ICommand<Result<int>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\Create\\CreateContributorCommand.cs",
      "file_type": "csharp",
      "token_count": 59,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: DeleteContributorCommand.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.UseCases.Contributors.Delete;\n\npublic record DeleteContributorCommand(int ContributorId) : ICommand<Result>;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\Delete\\DeleteContributorCommand.cs",
      "file_type": "csharp",
      "token_count": 26,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GetContributorHandler.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Core.ContributorAggregate;\nusing Clean.Architecture.Core.ContributorAggregate.Specifications;\n\nnamespace Clean.Architecture.UseCases.Contributors.Get;\n\n/// <summary>\n/// Queries don't necessarily need to use repository methods, but they can if it's convenient\n/// </summary>\npublic class GetContributorHandler(IReadRepository<Contributor> _repository)\n  : IQueryHandler<GetContributorQuery, Result<ContributorDTO>>\n{\n  public async Task<Result<ContributorDTO>> Handle(GetContributorQuery request, CancellationToken cancellationToken)\n  {\n    var spec = new ContributorByIdSpec(request.ContributorId);\n    var entity = await _repository.FirstOrDefaultAsync(spec, cancellationToken);\n    if (entity == null) return Result.NotFound();\n\n    return new ContributorDTO(entity.Id, entity.Name, entity.PhoneNumber?.Number ?? \"\");\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\Get\\GetContributorHandler.cs",
      "file_type": "csharp",
      "token_count": 178,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: IListContributorsQueryService.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.UseCases.Contributors.List;\n\n/// <summary>\n/// Represents a service that will actually fetch the necessary data\n/// Typically implemented in Infrastructure\n/// </summary>\npublic interface IListContributorsQueryService\n{\n  Task<IEnumerable<ContributorDTO>> ListAsync();\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\List\\IListContributorsQueryService.cs",
      "file_type": "csharp",
      "token_count": 59,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: DeleteContributorHandler.cs | Type: csharp | Part 1 of 3]\\n\\n﻿using Clean.Architecture.Core.Interfaces;\n\nnamespace Clean.Architecture.UseCases.Contributors.Delete;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\Delete\\DeleteContributorHandler.cs",
      "file_type": "csharp",
      "token_count": 20,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: DeleteContributorHandler.cs | Type: csharp | Part 2 of 3]\\n\\npublic class DeleteContributorHandler(IDeleteContributorService _deleteContributorService)\n  : ICommandHandler<DeleteContributorCommand, Result>\n{\n  public async Task<Result> Handle(DeleteContributorCommand request, CancellationToken cancellationToken) =>\n    // This Approach: Keep Domain Events in the Domain Model / Core project; this becomes a pass-through\n    // This is @ardalis's preferred approach\n    await _deleteContributorService.DeleteContributor(request.ContributorId);\n    // Another Approach: Do the real work here including dispatching domain events - change the event from internal to public\n    // @ardalis prefers using the service above so that **domain** event behavior remains in the **domain model** (core project)\n    // var aggregateToDelete = await _repository.GetByIdAsync(request.ContributorId);\n    // if (aggregateToDelete == null) return Result.NotFound();\n    // await _repository.DeleteAsync(aggregateToDelete);",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\Delete\\DeleteContributorHandler.cs",
      "file_type": "csharp",
      "token_count": 191,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: DeleteContributorHandler.cs | Type: csharp | Part 3 of 3]\\n\\n// await _repository.DeleteAsync(aggregateToDelete);\n    // var domainEvent = new ContributorDeletedEvent(request.ContributorId);\n    // await _mediator.Publish(domainEvent);// return Result.Success();\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\Delete\\DeleteContributorHandler.cs",
      "file_type": "csharp",
      "token_count": 41,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: GetContributorQuery.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.UseCases.Contributors.Get;\n\npublic record GetContributorQuery(int ContributorId) : IQuery<Result<ContributorDTO>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\Get\\GetContributorQuery.cs",
      "file_type": "csharp",
      "token_count": 32,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListContributorsHandler.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.UseCases.Contributors.List;\n\npublic class ListContributorsHandler(IListContributorsQueryService _query)\n  : IQueryHandler<ListContributorsQuery, Result<IEnumerable<ContributorDTO>>>\n{\n  public async Task<Result<IEnumerable<ContributorDTO>>> Handle(ListContributorsQuery request, CancellationToken cancellationToken)\n  {\n    var result = await _query.ListAsync();\n\n    return Result.Success(result);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\List\\ListContributorsHandler.cs",
      "file_type": "csharp",
      "token_count": 88,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ListContributorsQuery.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.UseCases.Contributors.List;\n\npublic record ListContributorsQuery(int? Skip, int? Take) : IQuery<Result<IEnumerable<ContributorDTO>>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\List\\ListContributorsQuery.cs",
      "file_type": "csharp",
      "token_count": 37,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: UpdateContributorCommand.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.UseCases.Contributors.Update;\n\npublic record UpdateContributorCommand(int ContributorId, string NewName) : ICommand<Result<ContributorDTO>>;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\Update\\UpdateContributorCommand.cs",
      "file_type": "csharp",
      "token_count": 35,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: UpdateContributorHandler.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Core.ContributorAggregate;\n\nnamespace Clean.Architecture.UseCases.Contributors.Update;\n\npublic class UpdateContributorHandler(IRepository<Contributor> _repository)\n  : ICommandHandler<UpdateContributorCommand, Result<ContributorDTO>>\n{\n  public async Task<Result<ContributorDTO>> Handle(UpdateContributorCommand request, CancellationToken cancellationToken)\n  {\n    var existingContributor = await _repository.GetByIdAsync(request.ContributorId, cancellationToken);\n    if (existingContributor == null)\n    {\n      return Result.NotFound();\n    }\n\n    existingContributor.UpdateName(request.NewName!);\n\n    await _repository.UpdateAsync(existingContributor, cancellationToken);\n\n    return new ContributorDTO(existingContributor.Id,\n      existingContributor.Name, existingContributor.PhoneNumber?.Number ?? \"\");\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Contributors\\Update\\UpdateContributorHandler.cs",
      "file_type": "csharp",
      "token_count": 166,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using FastEndpoints;\nglobal using FastEndpoints.Swagger;\nglobal using MediatR;\nglobal using Serilog;\nglobal using Serilog.Extensions.Logging;\nglobal using Ardalis.Result;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 38,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Program.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Web.Configurations;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nvar logger = Log.Logger = new LoggerConfiguration()\n  .Enrich.FromLogContext()\n  .WriteTo.Console()\n  .CreateLogger();\n\nlogger.Information(\"Starting web host\");\n\nbuilder.AddLoggerConfigs();\n\nvar appLogger = new SerilogLoggerFactory(logger)\n    .CreateLogger<Program>();\n\nbuilder.Services.AddOptionConfigs(builder.Configuration, appLogger, builder);\nbuilder.Services.AddServiceConfigs(appLogger, builder);\n\nbuilder.Services.AddFastEndpoints()\n                .SwaggerDocument(o =>\n                {\n                  o.ShortSchemaNames = true;\n                });\n\n#if (aspire)\nbuilder.AddServiceDefaults();\n#endif\n\nvar app = builder.Build();\n\nawait app.UseAppMiddlewareAndSeedDatabase();\n\napp.Run();\n\n// Make the implicit Program.cs class public, so integration tests can reference the correct assembly for host building\npublic partial class Program { }",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Program.cs",
      "file_type": "csharp",
      "token_count": 181,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: LoggerConfigs.cs | Type: csharp]\\n\\n﻿using Serilog;\n\nnamespace Clean.Architecture.Web.Configurations;\n\npublic static class LoggerConfigs\n{\n  public static WebApplicationBuilder AddLoggerConfigs(this WebApplicationBuilder builder)\n  {\n\n    builder.Host.UseSerilog((_, config) => config.ReadFrom.Configuration(builder.Configuration));\n\n    return builder;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Configurations\\LoggerConfigs.cs",
      "file_type": "csharp",
      "token_count": 60,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: MediatrConfigs.cs | Type: csharp]\\n\\n﻿using Ardalis.SharedKernel;\nusing Clean.Architecture.Core.ContributorAggregate;\nusing Clean.Architecture.UseCases.Contributors.Create;\nusing MediatR;\nusing System.Reflection;\n\nnamespace Clean.Architecture.Web.Configurations;\n\npublic static class MediatrConfigs\n{\n  public static IServiceCollection AddMediatrConfigs(this IServiceCollection services)\n  {\n    var mediatRAssemblies = new[]\n      {\n        Assembly.GetAssembly(typeof(Contributor)), // Core\n        Assembly.GetAssembly(typeof(CreateContributorCommand)) // UseCases\n      };\n\n    services.AddMediatR(cfg => cfg.RegisterServicesFromAssemblies(mediatRAssemblies!))\n            .AddScoped(typeof(IPipelineBehavior<,>), typeof(LoggingBehavior<,>))\n            .AddScoped<IDomainEventDispatcher, MediatRDomainEventDispatcher>();\n\n    return services;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Configurations\\MediatrConfigs.cs",
      "file_type": "csharp",
      "token_count": 178,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorRecord.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Web.Contributors;\n\npublic record ContributorRecord(int Id, string Name, string? PhoneNumber);",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\ContributorRecord.cs",
      "file_type": "csharp",
      "token_count": 24,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ServiceConfigs.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Clean.Architecture.Core.Interfaces;\nusing Clean.Architecture.Infrastructure;\nusing Clean.Architecture.Infrastructure.Email;\n\nnamespace Clean.Architecture.Web.Configurations;\n\npublic static class ServiceConfigs\n{\n  public static IServiceCollection AddServiceConfigs(this IServiceCollection services, Microsoft.Extensions.Logging.ILogger logger, WebApplicationBuilder builder)\n  {\n    services.AddInfrastructureServices(builder.Configuration, logger)\n            .AddMediatrConfigs();\n\n\n    if (builder.Environment.IsDevelopment())\n    {\n      // Use a local test email server\n      // See: https://ardalis.com/configuring-a-local-test-email-server/\n      services.AddScoped<IEmailSender, MimeKitEmailSender>();\n\n      // Otherwise use this:\n      //builder.Services.AddScoped<IEmailSender, FakeEmailSender>();\n\n    }\n    else\n    {\n      services.AddScoped<IEmailSender, MimeKitEmailSender>();\n    }\n\n    logger.LogInformation(\"{Project} services registered\", \"Mediatr and Email Sender\");",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Configurations\\ServiceConfigs.cs",
      "file_type": "csharp",
      "token_count": 188,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ServiceConfigs.cs | Type: csharp | Part 2 of 2]\\n\\nlogger.LogInformation(\"{Project} services registered\", \"Mediatr and Email Sender\");\n\n    return services;\n  }\n\n\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Configurations\\ServiceConfigs.cs",
      "file_type": "csharp",
      "token_count": 23,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: MiddlewareConfig.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Ardalis.ListStartupServices;\nusing Clean.Architecture.Infrastructure.Data;\n\nnamespace Clean.Architecture.Web.Configurations;\n\npublic static class MiddlewareConfig\n{\n  public static async Task<IApplicationBuilder> UseAppMiddlewareAndSeedDatabase(this WebApplication app)\n  {\n    if (app.Environment.IsDevelopment())\n    {\n      app.UseDeveloperExceptionPage();\n      app.UseShowAllServicesMiddleware(); // see https://github.com/ardalis/AspNetCoreStartupServices\n    }\n    else\n    {\n      app.UseDefaultExceptionHandler(); // from FastEndpoints\n      app.UseHsts();\n    }\n\n    app.UseFastEndpoints()\n        .UseSwaggerGen(); // Includes AddFileServer and static files middleware\n\n    app.UseHttpsRedirection(); // Note this will drop Authorization headers\n\n    await SeedDatabase(app);\n\n    return app;\n  }\n\n  static async Task SeedDatabase(WebApplication app)\n  {\n    using var scope = app.Services.CreateScope();\n    var services = scope.ServiceProvider;",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Configurations\\MiddlewareConfig.cs",
      "file_type": "csharp",
      "token_count": 197,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: MiddlewareConfig.cs | Type: csharp | Part 2 of 2]\\n\\ntry\n    {\n      var context = services.GetRequiredService<AppDbContext>();\n      //          context.Database.Migrate();\n      context.Database.EnsureCreated();\n      await SeedData.InitializeAsync(context);\n    }\n    catch (Exception ex)\n    {\n      var logger = services.GetRequiredService<ILogger<Program>>();\n      logger.LogError(ex, \"An error occurred seeding the DB. {exceptionMessage}\", ex.Message);\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Configurations\\MiddlewareConfig.cs",
      "file_type": "csharp",
      "token_count": 86,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Create.CreateContributorResponse.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Web.Contributors;\n\npublic class CreateContributorResponse(int id, string name)\n{\n  public int Id { get; set; } = id;\n  public string Name { get; set; } = name;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Create.CreateContributorResponse.cs",
      "file_type": "csharp",
      "token_count": 50,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: OptionConfigs.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Ardalis.ListStartupServices;\nusing Clean.Architecture.Infrastructure.Email;\n\nnamespace Clean.Architecture.Web.Configurations;\n\npublic static class OptionConfigs\n{\n  public static IServiceCollection AddOptionConfigs(this IServiceCollection services,\n                                                    IConfiguration configuration,\n                                                    Microsoft.Extensions.Logging.ILogger logger,\n                                                    WebApplicationBuilder builder)\n  {\n    services.Configure<MailserverConfiguration>(configuration.GetSection(\"Mailserver\"))\n    // Configure Web Behavior\n    .Configure<CookiePolicyOptions>(options =>\n    {\n      options.CheckConsentNeeded = context => true;\n      options.MinimumSameSitePolicy = SameSiteMode.None;\n    });",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Configurations\\OptionConfigs.cs",
      "file_type": "csharp",
      "token_count": 121,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: OptionConfigs.cs | Type: csharp | Part 2 of 2]\\n\\nif (builder.Environment.IsDevelopment())\n    {\n      // add list services for diagnostic purposes - see https://github.com/ardalis/AspNetCoreStartupServices\n      services.Configure<ServiceConfig>(config =>\n      {\n        config.Services = new List<ServiceDescriptor>(builder.Services);\n\n        // optional - default path to view services is /listallservices - recommended to choose your own path\n        config.Path = \"/listservices\";\n      });\n    }\n\n    logger.LogInformation(\"{Project} were configured\", \"Options\");\n\n    return services;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Configurations\\OptionConfigs.cs",
      "file_type": "csharp",
      "token_count": 107,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Create.CreateContributorValidator.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Infrastructure.Data.Config;\nusing FastEndpoints;\nusing FluentValidation;\n\nnamespace Clean.Architecture.Web.Contributors;\n\n/// <summary>\n/// See: https://fast-endpoints.com/docs/validation\n/// </summary>\npublic class CreateContributorValidator : Validator<CreateContributorRequest>\n{\n  public CreateContributorValidator()\n  {\n    RuleFor(x => x.Name)\n      .NotEmpty()\n      .WithMessage(\"Name is required.\")\n      .MinimumLength(2)\n      .MaximumLength(DataSchemaConstants.DEFAULT_NAME_LENGTH);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Create.CreateContributorValidator.cs",
      "file_type": "csharp",
      "token_count": 113,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Create.CreateContributorRequest.cs | Type: csharp]\\n\\n﻿using System.ComponentModel.DataAnnotations;\n\nnamespace Clean.Architecture.Web.Contributors;\n\npublic class CreateContributorRequest\n{\n  public const string Route = \"/Contributors\";\n\n  [Required]\n  public string? Name { get; set; }\n  public string? PhoneNumber { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Create.CreateContributorRequest.cs",
      "file_type": "csharp",
      "token_count": 60,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Create.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Clean.Architecture.UseCases.Contributors.Create;\n\nnamespace Clean.Architecture.Web.Contributors;\n\n/// <summary>\n/// Create a new Contributor\n/// </summary>\n/// <remarks>\n/// Creates a new Contributor given a name.\n/// </remarks>\npublic class Create(IMediator _mediator)\n  : Endpoint<CreateContributorRequest, CreateContributorResponse>\n{\n  public override void Configure()\n  {\n    Post(CreateContributorRequest.Route);\n    AllowAnonymous();\n    Summary(s =>\n    {\n      // XML Docs are used by default but are overridden by these properties:\n      //s.Summary = \"Create a new Contributor.\";\n      //s.Description = \"Create a new Contributor. A valid name is required.\";\n      s.ExampleRequest = new CreateContributorRequest { Name = \"Contributor Name\" };\n    });\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Create.cs",
      "file_type": "csharp",
      "token_count": 170,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Create.cs | Type: csharp | Part 2 of 2]\\n\\npublic override async Task HandleAsync(\n    CreateContributorRequest request,\n    CancellationToken cancellationToken)\n  {\n    var result = await _mediator.Send(new CreateContributorCommand(request.Name!,\n      request.PhoneNumber), cancellationToken);\n\n    if (result.IsSuccess)\n    {\n      Response = new CreateContributorResponse(result.Value, request.Name!);\n      return;\n    }\n    // TODO: Handle other cases as necessary\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Create.cs",
      "file_type": "csharp",
      "token_count": 85,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Delete.DeleteContributorRequest.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Web.Contributors;\n\npublic record DeleteContributorRequest\n{\n  public const string Route = \"/Contributors/{ContributorId:int}\";\n  public static string BuildRoute(int contributorId) => Route.Replace(\"{ContributorId:int}\", contributorId.ToString());\n\n  public int ContributorId { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Delete.DeleteContributorRequest.cs",
      "file_type": "csharp",
      "token_count": 68,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Delete.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.UseCases.Contributors.Delete;\n\nnamespace Clean.Architecture.Web.Contributors;\n\n/// <summary>\n/// Delete a Contributor.\n/// </summary>\n/// <remarks>\n/// Delete a Contributor by providing a valid integer id.\n/// </remarks>\npublic class Delete(IMediator _mediator)\n  : Endpoint<DeleteContributorRequest>\n{\n  public override void Configure()\n  {\n    Delete(DeleteContributorRequest.Route);\n    AllowAnonymous();\n  }\n\n  public override async Task HandleAsync(\n    DeleteContributorRequest request,\n    CancellationToken cancellationToken)\n  {\n    var command = new DeleteContributorCommand(request.ContributorId);\n\n    var result = await _mediator.Send(command, cancellationToken);\n\n    if (result.Status == ResultStatus.NotFound)\n    {\n      await SendNotFoundAsync(cancellationToken);\n      return;\n    }\n\n    if (result.IsSuccess)\n    {\n      await SendNoContentAsync(cancellationToken);\n    };\n    // TODO: Handle other issues as needed\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Delete.cs",
      "file_type": "csharp",
      "token_count": 202,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Delete.DeleteContributorValidator.cs | Type: csharp]\\n\\n﻿using FastEndpoints;\nusing FluentValidation;\n\nnamespace Clean.Architecture.Web.Contributors;\n\n/// <summary>\n/// See: https://fast-endpoints.com/docs/validation\n/// </summary>\npublic class DeleteContributorValidator : Validator<DeleteContributorRequest>\n{\n  public DeleteContributorValidator()\n  {\n    RuleFor(x => x.ContributorId)\n      .GreaterThan(0);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Delete.DeleteContributorValidator.cs",
      "file_type": "csharp",
      "token_count": 82,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GetById.GetContributorByIdRequest.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Web.Contributors;\n\npublic class GetContributorByIdRequest\n{\n  public const string Route = \"/Contributors/{ContributorId:int}\";\n  public static string BuildRoute(int contributorId) => Route.Replace(\"{ContributorId:int}\", contributorId.ToString());\n\n  public int ContributorId { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\GetById.GetContributorByIdRequest.cs",
      "file_type": "csharp",
      "token_count": 69,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GetById.GetContributorValidator.cs | Type: csharp]\\n\\n﻿using FastEndpoints;\nusing FluentValidation;\n\nnamespace Clean.Architecture.Web.Contributors;\n\n/// <summary>\n/// See: https://fast-endpoints.com/docs/validation\n/// </summary>\npublic class GetContributorValidator : Validator<GetContributorByIdRequest>\n{\n  public GetContributorValidator()\n  {\n    RuleFor(x => x.ContributorId)\n      .GreaterThan(0);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\GetById.GetContributorValidator.cs",
      "file_type": "csharp",
      "token_count": 83,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GetById.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Clean.Architecture.UseCases.Contributors.Get;\n\nnamespace Clean.Architecture.Web.Contributors;\n\n/// <summary>\n/// Get a Contributor by integer ID.\n/// </summary>\n/// <remarks>\n/// Takes a positive integer ID and returns a matching Contributor record.\n/// </remarks>\npublic class GetById(IMediator _mediator)\n  : Endpoint<GetContributorByIdRequest, ContributorRecord>\n{\n  public override void Configure()\n  {\n    Get(GetContributorByIdRequest.Route);\n    AllowAnonymous();\n  }\n\n  public override async Task HandleAsync(GetContributorByIdRequest request,\n    CancellationToken cancellationToken)\n  {\n    var query = new GetContributorQuery(request.ContributorId);\n\n    var result = await _mediator.Send(query, cancellationToken);\n\n    if (result.Status == ResultStatus.NotFound)\n    {\n      await SendNotFoundAsync(cancellationToken);\n      return;\n    }",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\GetById.cs",
      "file_type": "csharp",
      "token_count": 178,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: GetById.cs | Type: csharp | Part 2 of 2]\\n\\nif (result.IsSuccess)\n    {\n      Response = new ContributorRecord(result.Value.Id, result.Value.Name, result.Value.PhoneNumber);\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\GetById.cs",
      "file_type": "csharp",
      "token_count": 31,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: List.ContributorListResponse.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Web.Contributors;\n\npublic class ContributorListResponse\n{\n  public List<ContributorRecord> Contributors { get; set; } = [];\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\List.ContributorListResponse.cs",
      "file_type": "csharp",
      "token_count": 35,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: List.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.UseCases.Contributors;\nusing Clean.Architecture.UseCases.Contributors.List;\n\nnamespace Clean.Architecture.Web.Contributors;\n\n/// <summary>\n/// List all Contributors\n/// </summary>\n/// <remarks>\n/// List all contributors - returns a ContributorListResponse containing the Contributors.\n/// </remarks>\npublic class List(IMediator _mediator) : EndpointWithoutRequest<ContributorListResponse>\n{\n  public override void Configure()\n  {\n    Get(\"/Contributors\");\n    AllowAnonymous();\n  }\n\n  public override async Task HandleAsync(CancellationToken cancellationToken)\n  {\n    Result<IEnumerable<ContributorDTO>> result = await _mediator.Send(new ListContributorsQuery(null, null), cancellationToken);\n\n    if (result.IsSuccess)\n    {\n      Response = new ContributorListResponse\n      {\n        Contributors = result.Value.Select(c => new ContributorRecord(c.Id, c.Name, c.PhoneNumber)).ToList()\n      };\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\List.cs",
      "file_type": "csharp",
      "token_count": 194,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Update.UpdateContributorRequest.cs | Type: csharp]\\n\\n﻿using System.ComponentModel.DataAnnotations;\n\nnamespace Clean.Architecture.Web.Contributors;\n\npublic class UpdateContributorRequest\n{\n  public const string Route = \"/Contributors/{ContributorId:int}\";\n  public static string BuildRoute(int contributorId) => Route.Replace(\"{ContributorId:int}\", contributorId.ToString());\n\n  public int ContributorId { get; set; }\n\n  [Required]\n  public int Id { get; set; }\n  [Required]\n  public string? Name { get; set; }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Update.UpdateContributorRequest.cs",
      "file_type": "csharp",
      "token_count": 102,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Update.UpdateContributorResponse.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.Web.Contributors;\n\npublic class UpdateContributorResponse(ContributorRecord contributor)\n{\n  public ContributorRecord Contributor { get; set; } = contributor;\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Update.UpdateContributorResponse.cs",
      "file_type": "csharp",
      "token_count": 38,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Update.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Clean.Architecture.UseCases.Contributors.Get;\nusing Clean.Architecture.UseCases.Contributors.Update;\n\nnamespace Clean.Architecture.Web.Contributors;\n\n/// <summary>\n/// Update an existing Contributor.\n/// </summary>\n/// <remarks>\n/// Update an existing Contributor by providing a fully defined replacement set of values.\n/// See: https://stackoverflow.com/questions/60761955/rest-update-best-practice-put-collection-id-without-id-in-body-vs-put-collecti\n/// </remarks>\npublic class Update(IMediator _mediator)\n  : Endpoint<UpdateContributorRequest, UpdateContributorResponse>\n{\n  public override void Configure()\n  {\n    Put(UpdateContributorRequest.Route);\n    AllowAnonymous();\n  }\n\n  public override async Task HandleAsync(\n    UpdateContributorRequest request,\n    CancellationToken cancellationToken)\n  {\n    var result = await _mediator.Send(new UpdateContributorCommand(request.Id, request.Name!), cancellationToken);",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Update.cs",
      "file_type": "csharp",
      "token_count": 194,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Update.cs | Type: csharp | Part 2 of 2]\\n\\nif (result.Status == ResultStatus.NotFound)\n    {\n      await SendNotFoundAsync(cancellationToken);\n      return;\n    }\n\n    var query = new GetContributorQuery(request.ContributorId);\n\n    var queryResult = await _mediator.Send(query, cancellationToken);\n\n    if (queryResult.Status == ResultStatus.NotFound)\n    {\n      await SendNotFoundAsync(cancellationToken);\n      return;\n    }\n\n    if (queryResult.IsSuccess)\n    {\n      var dto = queryResult.Value;\n      Response = new UpdateContributorResponse(new ContributorRecord(dto.Id, dto.Name, dto.PhoneNumber));\n      return;\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Update.cs",
      "file_type": "csharp",
      "token_count": 125,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: AspireIntegrationTests.cs | Type: csharp]\\n\\nnamespace Clean.Architecture.AspireTests.Tests;\n\npublic class AspireIntegrationTests\n{\n    // Follow the link below to write you tests with Aspire\n    // https://learn.microsoft.com/en-us/dotnet/aspire/testing/write-your-first-test?pivots=xunit\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.AspireTests\\AspireIntegrationTests.cs",
      "file_type": "csharp",
      "token_count": 60,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Update.UpdateContributorValidator.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Infrastructure.Data.Config;\nusing FastEndpoints;\nusing FluentValidation;\n\nnamespace Clean.Architecture.Web.Contributors;\n\n/// <summary>\n/// See: https://fast-endpoints.com/docs/validation\n/// </summary>\npublic class UpdateContributorValidator : Validator<UpdateContributorRequest>\n{\n  public UpdateContributorValidator()\n  {\n    RuleFor(x => x.Name)\n      .NotEmpty()\n      .WithMessage(\"Name is required.\")\n      .MinimumLength(2)\n      .MaximumLength(DataSchemaConstants.DEFAULT_NAME_LENGTH);\n    RuleFor(x => x.ContributorId)\n      .Must((args, contributorId) => args.Id == contributorId)\n      .WithMessage(\"Route and body Ids must match; cannot update Id of an existing resource.\");\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Contributors\\Update.UpdateContributorValidator.cs",
      "file_type": "csharp",
      "token_count": 161,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ContributorGetById.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Infrastructure.Data;\nusing Clean.Architecture.Web.Contributors;\n\n\nnamespace Clean.Architecture.FunctionalTests.ApiEndpoints;\n\n[Collection(\"Sequential\")]\npublic class ContributorGetById(CustomWebApplicationFactory<Program> factory) : IClassFixture<CustomWebApplicationFactory<Program>>\n{\n  private readonly HttpClient _client = factory.CreateClient();\n\n  [Fact]\n  public async Task ReturnsSeedContributorGivenId1()\n  {\n    var result = await _client.GetAndDeserializeAsync<ContributorRecord>(GetContributorByIdRequest.BuildRoute(1));\n\n    result.Id.ShouldBe(1);\n    result.Name.ShouldBe(SeedData.Contributor1.Name);\n  }\n\n  [Fact]\n  public async Task ReturnsNotFoundGivenId1000()\n  {\n    string route = GetContributorByIdRequest.BuildRoute(1000);\n    _ = await _client.GetAndEnsureNotFoundAsync(route);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.FunctionalTests\\ApiEndpoints\\ContributorGetById.cs",
      "file_type": "csharp",
      "token_count": 187,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using Ardalis.HttpClientTestExtensions;\nglobal using Microsoft.AspNetCore.Hosting;\nglobal using Microsoft.AspNetCore.Mvc.Testing;\nglobal using Microsoft.Extensions.DependencyInjection;\nglobal using Microsoft.Extensions.Hosting;\nglobal using Microsoft.Extensions.Logging;\nglobal using Shouldly;\nglobal using Xunit;",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.FunctionalTests\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 51,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: CustomWebApplicationFactory.cs | Type: csharp | Part 1 of 3]\\n\\n﻿using Clean.Architecture.Infrastructure.Data;\n\nnamespace Clean.Architecture.FunctionalTests;\n\npublic class CustomWebApplicationFactory<TProgram> : WebApplicationFactory<TProgram> where TProgram : class\n{\n  /// <summary>\n  /// Overriding CreateHost to avoid creating a separate ServiceProvider per this thread:\n  /// https://github.com/dotnet-architecture/eShopOnWeb/issues/465\n  /// </summary>\n  /// <param name=\"builder\"></param>\n  /// <returns></returns>\n  protected override IHost CreateHost(IHostBuilder builder)\n  {\n    builder.UseEnvironment(\"Development\"); // will not send real emails\n    var host = builder.Build();\n    host.Start();\n\n    // Get service provider.\n    var serviceProvider = host.Services;\n\n    // Create a scope to obtain a reference to the database\n    // context (AppDbContext).\n    using (var scope = serviceProvider.CreateScope())\n    {\n      var scopedServices = scope.ServiceProvider;\n      var db = scopedServices.GetRequiredService<AppDbContext>();",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.FunctionalTests\\CustomWebApplicationFactory.cs",
      "file_type": "csharp",
      "token_count": 207,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: CustomWebApplicationFactory.cs | Type: csharp | Part 2 of 3]\\n\\nvar logger = scopedServices\n          .GetRequiredService<ILogger<CustomWebApplicationFactory<TProgram>>>();\n\n      // Reset Sqlite database for each test run\n      // If using a real database, you'll likely want to remove this step.\n      db.Database.EnsureDeleted();\n\n      // Ensure the database is created.\n      db.Database.EnsureCreated();\n\n      try\n      {\n        // Can also skip creating the items\n        //if (!db.ToDoItems.Any())\n        //{\n        // Seed the database with test data.\n        SeedData.PopulateTestDataAsync(db).Wait();\n        //}\n      }\n      catch (Exception ex)\n      {\n        logger.LogError(ex, \"An error occurred seeding the \" +\n                            \"database with test messages. Error: {exceptionMessage}\", ex.Message);\n      }\n    }\n\n    return host;\n  }\n\n  protected override void ConfigureWebHost(IWebHostBuilder builder)\n  {\n    builder\n        .ConfigureServices(services =>\n        {\n          // Configure test dependencies here",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.FunctionalTests\\CustomWebApplicationFactory.cs",
      "file_type": "csharp",
      "token_count": 200,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: CustomWebApplicationFactory.cs | Type: csharp | Part 3 of 3]\\n\\n//// Remove the app's ApplicationDbContext registration.\n          //var descriptor = services.SingleOrDefault(\n          //d => d.ServiceType ==\n          //    typeof(DbContextOptions<AppDbContext>));\n\n          //if (descriptor != null)\n          //{\n          //  services.Remove(descriptor);\n          //}\n\n          //// This should be set for each individual test run\n          //string inMemoryCollectionName = Guid.NewGuid().ToString();\n\n          //// Add ApplicationDbContext using an in-memory database for testing.\n          //services.AddDbContext<AppDbContext>(options =>\n          //{\n          //  options.UseInMemoryDatabase(inMemoryCollectionName);\n          //});\n        });\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.FunctionalTests\\CustomWebApplicationFactory.cs",
      "file_type": "csharp",
      "token_count": 123,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ContributorList.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Infrastructure.Data;\nusing Clean.Architecture.Web.Contributors;\n\nnamespace Clean.Architecture.FunctionalTests.ApiEndpoints;\n\n[Collection(\"Sequential\")]\npublic class ContributorList(CustomWebApplicationFactory<Program> factory) : IClassFixture<CustomWebApplicationFactory<Program>>\n{\n  private readonly HttpClient _client = factory.CreateClient();\n\n  [Fact]\n  public async Task ReturnsTwoContributors()\n  {\n    var result = await _client.GetAndDeserializeAsync<ContributorListResponse>(\"/Contributors\");\n\n    result.Contributors.Count.ShouldBe(2);\n    result.Contributors.ShouldContain(contributor => contributor.Name == SeedData.Contributor1.Name);\n    result.Contributors.ShouldContain(contributor => contributor.Name == SeedData.Contributor2.Name);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.FunctionalTests\\ApiEndpoints\\ContributorList.cs",
      "file_type": "csharp",
      "token_count": 165,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using Ardalis.SharedKernel;\nglobal using Microsoft.EntityFrameworkCore;\nglobal using Microsoft.Extensions.DependencyInjection;\nglobal using NSubstitute;\nglobal using Shouldly;\nglobal using Xunit;",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.IntegrationTests\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 34,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: BaseEfRepoTestFixture.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Clean.Architecture.Core.ContributorAggregate;\nusing Clean.Architecture.Infrastructure.Data;\n\nnamespace Clean.Architecture.IntegrationTests.Data;\n\npublic abstract class BaseEfRepoTestFixture\n{\n  protected AppDbContext _dbContext;\n\n  protected BaseEfRepoTestFixture()\n  {\n    var options = CreateNewContextOptions();\n    var _fakeEventDispatcher = Substitute.For<IDomainEventDispatcher>();\n\n    _dbContext = new AppDbContext(options, _fakeEventDispatcher);\n  }\n\n  protected static DbContextOptions<AppDbContext> CreateNewContextOptions()\n  {\n    // Create a fresh service provider, and therefore a fresh\n    // InMemory database instance.\n    var serviceProvider = new ServiceCollection()\n        .AddEntityFrameworkInMemoryDatabase()\n        .BuildServiceProvider();",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.IntegrationTests\\Data\\BaseEfRepoTestFixture.cs",
      "file_type": "csharp",
      "token_count": 150,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: BaseEfRepoTestFixture.cs | Type: csharp | Part 2 of 2]\\n\\n// Create a new options instance telling the context to use an\n    // InMemory database and the new service provider.\n    var builder = new DbContextOptionsBuilder<AppDbContext>();\n    builder.UseInMemoryDatabase(\"cleanarchitecture\")\n           .UseInternalServiceProvider(serviceProvider);\n\n    return builder.Options;\n  }\n\n  protected EfRepository<Contributor> GetRepository()\n  {\n    return new EfRepository<Contributor>(_dbContext);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.IntegrationTests\\Data\\BaseEfRepoTestFixture.cs",
      "file_type": "csharp",
      "token_count": 87,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: EfRepositoryAdd.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Core.ContributorAggregate;\n\nnamespace Clean.Architecture.IntegrationTests.Data;\n\npublic class EfRepositoryAdd : BaseEfRepoTestFixture\n{\n  [Fact]\n  public async Task AddsContributorAndSetsId()\n  {\n    var testContributorName = \"testContributor\";\n    var testContributorStatus = ContributorStatus.NotSet;\n    var repository = GetRepository();\n    var Contributor = new Contributor(testContributorName);\n\n    await repository.AddAsync(Contributor);\n\n    var newContributor = (await repository.ListAsync())\n                    .FirstOrDefault();\n\n    newContributor.ShouldNotBeNull();\n    testContributorName.ShouldBe(newContributor.Name);\n    testContributorStatus.ShouldBe(newContributor.Status);\n    newContributor.Id.ShouldBeGreaterThan(0);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.IntegrationTests\\Data\\EfRepositoryAdd.cs",
      "file_type": "csharp",
      "token_count": 160,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: EfRepositoryUpdate.cs | Type: csharp | Part 1 of 2]\\n\\n﻿using Clean.Architecture.Core.ContributorAggregate;\n\nnamespace Clean.Architecture.IntegrationTests.Data;\n\npublic class EfRepositoryUpdate : BaseEfRepoTestFixture\n{\n  [Fact]\n  public async Task UpdatesItemAfterAddingIt()\n  {\n    // add a Contributor\n    var repository = GetRepository();\n    var initialName = Guid.NewGuid().ToString();\n    var Contributor = new Contributor(initialName);\n\n    await repository.AddAsync(Contributor);\n\n    // detach the item so we get a different instance\n    _dbContext.Entry(Contributor).State = EntityState.Detached;\n\n    // fetch the item and update its title\n    var newContributor = (await repository.ListAsync())\n        .FirstOrDefault(Contributor => Contributor.Name == initialName);\n    newContributor.ShouldNotBeNull();\n\n    Contributor.ShouldNotBeSameAs(newContributor);\n    var newName = Guid.NewGuid().ToString();\n    newContributor.UpdateName(newName);\n\n    // Update the item\n    await repository.UpdateAsync(newContributor);",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.IntegrationTests\\Data\\EfRepositoryUpdate.cs",
      "file_type": "csharp",
      "token_count": 204,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: EfRepositoryUpdate.cs | Type: csharp | Part 2 of 2]\\n\\n// Update the item\n    await repository.UpdateAsync(newContributor);\n\n    // Fetch the updated item\n    var updatedItem = (await repository.ListAsync())\n        .FirstOrDefault(Contributor => Contributor.Name == newName);\n\n    updatedItem.ShouldNotBeNull();\n    Contributor.Name.ShouldNotBe(updatedItem.Name);\n    Contributor.Status.ShouldBe(updatedItem.Status);\n    newContributor.Id.ShouldBe(updatedItem.Id);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.IntegrationTests\\Data\\EfRepositoryUpdate.cs",
      "file_type": "csharp",
      "token_count": 82,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: EfRepositoryDelete.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Core.ContributorAggregate;\n\nnamespace Clean.Architecture.IntegrationTests.Data;\n\npublic class EfRepositoryDelete : BaseEfRepoTestFixture\n{\n  [Fact]\n  public async Task DeletesItemAfterAddingIt()\n  {\n    // add a Contributor\n    var repository = GetRepository();\n    var initialName = Guid.NewGuid().ToString();\n    var Contributor = new Contributor(initialName);\n    await repository.AddAsync(Contributor);\n\n    // delete the item\n    await repository.DeleteAsync(Contributor);\n\n    // verify it's no longer there\n    (await repository.ListAsync()).ShouldNotContain(Contributor => Contributor.Name == initialName);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.IntegrationTests\\Data\\EfRepositoryDelete.cs",
      "file_type": "csharp",
      "token_count": 137,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: GlobalUsings.cs | Type: csharp]\\n\\n﻿global using System.Runtime.CompilerServices;\nglobal using Ardalis.SharedKernel;\nglobal using Clean.Architecture.Core.ContributorAggregate;\nglobal using Clean.Architecture.UseCases.Contributors.Create;\nglobal using Shouldly;\nglobal using MediatR;\nglobal using Microsoft.Extensions.Logging;\nglobal using NSubstitute;\nglobal using Xunit;",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\GlobalUsings.cs",
      "file_type": "csharp",
      "token_count": 66,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: DeleteContributorSevice_DeleteContributor.cs | Type: csharp]\\n\\n﻿using Clean.Architecture.Core.Services;\n\nnamespace Clean.Architecture.UnitTests.Core.Services;\n\npublic class DeleteContributorService_DeleteContributor\n{\n  private readonly IRepository<Contributor> _repository = Substitute.For<IRepository<Contributor>>();\n  private readonly IMediator _mediator = Substitute.For<IMediator>();\n  private readonly ILogger<DeleteContributorService> _logger = Substitute.For<ILogger<DeleteContributorService>>();\n\n  private readonly DeleteContributorService _service;\n\n  public DeleteContributorService_DeleteContributor()\n  {\n    _service = new DeleteContributorService(_repository, _mediator, _logger);\n  }\n\n  [Fact]\n  public async Task ReturnsNotFoundGivenCantFindContributor()\n  {\n    var result = await _service.DeleteContributor(0);\n\n    result.Status.ShouldBe(Ardalis.Result.ResultStatus.NotFound);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\Core\\Services\\DeleteContributorSevice_DeleteContributor.cs",
      "file_type": "csharp",
      "token_count": 175,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: NoOpMediator.cs | Type: csharp | Part 1 of 2]\\n\\n﻿namespace Clean.Architecture.UnitTests;\n\npublic class NoOpMediator : IMediator\n{\n  public Task Publish(object notification, CancellationToken cancellationToken = default)\n  {\n    return Task.CompletedTask;\n  }\n\n  public Task Publish<TNotification>(TNotification notification, CancellationToken cancellationToken = default) where TNotification : INotification\n  {\n    return Task.CompletedTask;\n  }\n\n  public Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)\n  {\n    return Task.FromResult<TResponse>(default!);\n  }\n\n  public Task<object?> Send(object request, CancellationToken cancellationToken = default)\n  {\n    return Task.FromResult<object?>(default);\n  }\n\n  public async IAsyncEnumerable<TResponse> CreateStream<TResponse>(IStreamRequest<TResponse> request,\n    [EnumeratorCancellation] CancellationToken cancellationToken = default)\n  {\n    await Task.CompletedTask;\n    yield break;\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\NoOpMediator.cs",
      "file_type": "csharp",
      "token_count": 184,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: NoOpMediator.cs | Type: csharp | Part 2 of 2]\\n\\npublic async IAsyncEnumerable<object?> CreateStream(object request,\n    [EnumeratorCancellation] CancellationToken cancellationToken = default)\n  {\n    await Task.CompletedTask;\n    yield break;\n  }\n\n  public Task Send<TRequest>(TRequest request, CancellationToken cancellationToken = default) where TRequest : IRequest\n  {\n    return Task.CompletedTask;\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\NoOpMediator.cs",
      "file_type": "csharp",
      "token_count": 69,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: ContributorConstructor.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.UnitTests.Core.ContributorAggregate;\n\npublic class ContributorConstructor\n{\n  private readonly string _testName = \"test name\";\n  private Contributor? _testContributor;\n\n  private Contributor CreateContributor()\n  {\n    return new Contributor(_testName);\n  }\n\n  [Fact]\n  public void InitializesName()\n  {\n    _testContributor = CreateContributor();\n\n    _testContributor.Name.ShouldBe(_testName);\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\Core\\ContributorAggregate\\ContributorConstructor.cs",
      "file_type": "csharp",
      "token_count": 95,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: CODE_OF_CONDUCT.md | Type: documentation]\\n\\n# Code of Conduct\n\nThis project has adopted the code of conduct defined by the Contributor Covenant\nto clarify expected behavior in our community.\nFor more information, see the [.NET Foundation Code of Conduct](https://dotnetfoundation.org/code-of-conduct).",
    "metadata": {
      "source": "CleanArchitecture-main\\CODE_OF_CONDUCT.md",
      "file_type": "documentation",
      "token_count": 51,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService_GetAllIncompleteItems.cs | Type: csharp | Part 1 of 3]\\n\\n﻿using System.Linq;\nusing System.Threading.Tasks;\nusing Ardalis.Specification;\nusing Clean.Architecture.Core.ProjectAggregate;\nusing Clean.Architecture.Core.Services;\nusing Clean.Architecture.SharedKernel.Interfaces;\nusing Moq;\nusing Xunit;\n\nnamespace Clean.Architecture.UnitTests.Core.Services\n{\n    public class ToDoItemSearchService_GetAllIncompleteItems\n    {\n        private Mock<IRepository<ToDoItem>> _mockRepo = new Mock<IRepository<ToDoItem>>();\n        private ToDoItemSearchService _searchService;\n\n        public ToDoItemSearchService_GetAllIncompleteItems()\n        {\n            _searchService = new ToDoItemSearchService(_mockRepo.Object);\n        }\n\n        [Fact]\n        public async Task ReturnsInvalidGivenNullSearchString()\n        {\n            var result = await _searchService.GetAllIncompleteItemsAsync(null);",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\Core\\Services\\ToDoItemSearchService_GetAllIncompleteItems.cs",
      "file_type": "csharp",
      "token_count": 165,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService_GetAllIncompleteItems.cs | Type: csharp | Part 2 of 3]\\n\\nAssert.Equal(Ardalis.Result.ResultStatus.Invalid, result.Status);\n            Assert.Equal(\"searchString is required.\", result.ValidationErrors.First().ErrorMessage);\n        }\n\n        [Fact]\n        public async Task ReturnsErrorGivenDataAccessException()\n        {\n            string expectedErrorMessage = \"Database not there.\";\n            _mockRepo.Setup(r => r.ListAsync(It.IsAny<ISpecification<ToDoItem>>()))\n                .ThrowsAsync(new System.Exception(expectedErrorMessage));\n\n            var result = await _searchService.GetAllIncompleteItemsAsync(\"something\");\n\n            Assert.Equal(Ardalis.Result.ResultStatus.Error, result.Status);\n            Assert.Equal(expectedErrorMessage, result.Errors.First());\n        }\n\n        [Fact]\n        public async Task ReturnsListGivenSearchString()\n        {\n            var result = await _searchService.GetAllIncompleteItemsAsync(\"foo\");",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\Core\\Services\\ToDoItemSearchService_GetAllIncompleteItems.cs",
      "file_type": "csharp",
      "token_count": 160,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService_GetAllIncompleteItems.cs | Type: csharp | Part 3 of 3]\\n\\nAssert.Equal(Ardalis.Result.ResultStatus.Ok, result.Status);\n        }\n    }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\Core\\Services\\ToDoItemSearchService_GetAllIncompleteItems.cs",
      "file_type": "csharp",
      "token_count": 18,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService_GetNextIncompleteItem.cs | Type: csharp | Part 1 of 3]\\n\\n﻿using System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Ardalis.Specification;\nusing Clean.Architecture.Core.ProjectAggregate;\nusing Clean.Architecture.Core.Services;\nusing Clean.Architecture.SharedKernel.Interfaces;\nusing Moq;\nusing Xunit;\n\nnamespace Clean.Architecture.UnitTests.Core.Services\n{\n    public class ToDoItemSearchService_GetNextIncompleteItem\n    {\n        [Fact]\n        public async Task ReturnsNotFoundGivenNoRemainingItems()\n        {\n            var repo = new Mock<IRepository<ToDoItem>>();\n            var service = new ToDoItemSearchService(repo.Object);\n            repo.Setup(r => r.ListAsync(It.IsAny<ISpecification<ToDoItem>>()))\n                .ReturnsAsync(new List<ToDoItem>());\n\n            var result = await service.GetNextIncompleteItemAsync();\n\n            Assert.Equal(Ardalis.Result.ResultStatus.NotFound, result.Status);\n        }",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\Core\\Services\\ToDoItemSearchService_GetNextIncompleteItem.cs",
      "file_type": "csharp",
      "token_count": 176,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService_GetNextIncompleteItem.cs | Type: csharp | Part 2 of 3]\\n\\nAssert.Equal(Ardalis.Result.ResultStatus.NotFound, result.Status);\n        }\n\n        [Fact]\n        public async Task ReturnsFirstItemFromList()\n        {\n            var repo = new Mock<IRepository<ToDoItem>>();\n            var service = new ToDoItemSearchService(repo.Object);\n            var testItems = GetTestItems();\n            repo.Setup(r => r.ListAsync(It.IsAny<ISpecification<ToDoItem>>()))\n                .ReturnsAsync(testItems);\n\n            var result = await service.GetNextIncompleteItemAsync();\n\n            Assert.Equal(testItems.First(), result.Value);\n        }\n\n        private List<ToDoItem> GetTestItems()\n        {\n            // Note: could use AutoFixture\n            var builder = new ToDoItemBuilder();\n\n            var items = new List<ToDoItem>();\n\n            var item1 = builder.WithDefaultValues().Build();\n            items.Add(item1);\n\n            var item2 = builder.WithDefaultValues().Id(2).Build();\n            items.Add(item2);",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\Core\\Services\\ToDoItemSearchService_GetNextIncompleteItem.cs",
      "file_type": "csharp",
      "token_count": 195,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: ToDoItemSearchService_GetNextIncompleteItem.cs | Type: csharp | Part 3 of 3]\\n\\nvar item2 = builder.WithDefaultValues().Id(2).Build();\n            items.Add(item2);\n\n            var item3 = builder.WithDefaultValues().Id(3).Build();\n            items.Add(item3);\n\n            return items;\n        }\n    }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\Core\\Services\\ToDoItemSearchService_GetNextIncompleteItem.cs",
      "file_type": "csharp",
      "token_count": 52,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: CreateContributorHandlerHandle.cs | Type: csharp]\\n\\n﻿namespace Clean.Architecture.UnitTests.UseCases.Contributors;\n\npublic class CreateContributorHandlerHandle\n{\n  private readonly string _testName = \"test name\";\n  private readonly IRepository<Contributor> _repository = Substitute.For<IRepository<Contributor>>();\n  private CreateContributorHandler _handler;\n\n  public CreateContributorHandlerHandle()\n  {\n    _handler = new CreateContributorHandler(_repository);\n  }\n\n  private Contributor CreateContributor()\n  {\n    return new Contributor(_testName);\n  }\n\n  [Fact]\n  public async Task ReturnsSuccessGivenValidName()\n  {\n    _repository.AddAsync(Arg.Any<Contributor>(), Arg.Any<CancellationToken>())\n      .Returns(Task.FromResult(CreateContributor()));\n    var result = await _handler.Handle(new CreateContributorCommand(_testName, null), CancellationToken.None);\n\n    result.IsSuccess.ShouldBeTrue();\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\UseCases\\Contributors\\CreateContributorHandlerHandle.cs",
      "file_type": "csharp",
      "token_count": 177,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: CONTRIBUTING.md | Type: documentation | Part 1 of 3]\\n\\n# Contributing to Ardalis.GuardClauses\n\nWe love your input! We want to make contributing to this project as easy and transparent as possible, whether it's:\n\n- Reporting a bug\n- Discussing the current state of the code\n- Submitting a fix\n- Proposing new features\n\n## We Develop with GitHub\n\nObviously...\n\n## We Use Pull Requests\n\nMostly. But pretty much exclusively for non-maintainers. You'll need to fork the repo in order to submit a pull request. Here are the basic steps:\n\n1. Fork the repo and create your branch from `main`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. Make sure your code lints.\n6. Issue that pull request!\n\n- [Pull Request Check List](https://ardalis.com/github-pull-request-checklist/)\n- [Resync your fork with this upstream repo](https://ardalis.com/syncing-a-fork-of-a-github-repository-with-upstream/)\n\n## Ask before adding a pull request",
    "metadata": {
      "source": "CleanArchitecture-main\\CONTRIBUTING.md",
      "file_type": "documentation",
      "token_count": 233,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: CONTRIBUTING.md | Type: documentation | Part 2 of 3]\\n\\n## Ask before adding a pull request\n\nYou can just add a pull request out of the blue if you want, but it's much better etitquette (and more likely to be accepted) if you open a new issue or comment in an existing issue stating you'd like to make a pull request.\n\n## Getting Started\n\nLook for [issues marked with 'help wanted'](https://github.com/ardalis/guardclauses/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22) to find good places to start contributing.\n\n## Any contributions you make will be under the MIT Software License\n\nIn short, when you submit code changes, your submissions are understood to be under the same [MIT License](http://choosealicense.com/licenses/mit/) that covers this project.\n\n## Report bugs using Github's [issues](https://github.com/ardalis/guardclauses/issues)\n\nWe use GitHub issues to track public bugs. Report a bug by [opening a new issue](https://github.com/ardalis/GuardClauses/issues/new/choose); it's that easy!\n\n## Sponsor us",
    "metadata": {
      "source": "CleanArchitecture-main\\CONTRIBUTING.md",
      "file_type": "documentation",
      "token_count": 234,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: CONTRIBUTING.md | Type: documentation | Part 3 of 3]\\n\\n## Sponsor us\n\nIf you don't have the time or expertise to contribute code, you can still support us by [sponsoring](https://github.com/sponsors/ardalis).",
    "metadata": {
      "source": "CleanArchitecture-main\\CONTRIBUTING.md",
      "file_type": "documentation",
      "token_count": 38,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: CONTRIBUTING.md | Type: documentation | Part 1 of 4]\\n\\n# Contributing to CleanArchitecture\n\n**First:** if you're unsure or afraid of _anything_, just ask or submit the\nissue or pull request anyways. You won't be yelled at for giving your best\neffort. The worst that can happen is that you'll be politely asked to change\nsomething. We appreciate any sort of contributions, and don't want a wall of\nrules to get in the way of that.\n\nHowever, for those individuals who want a bit more guidance on the best way to\ncontribute to the project, read on. This document will cover what we're looking\nfor. By addressing all the points we're looking for, it raises the chances we\ncan quickly merge or address your contributions.\n\n## Issues\n\n### Reporting an Issue",
    "metadata": {
      "source": "CleanArchitecture-main\\.github\\CONTRIBUTING.md",
      "file_type": "documentation",
      "token_count": 155,
      "chunk_index": 0,
      "total_chunks": 4
    }
  },
  {
    "page_content": "[File: CONTRIBUTING.md | Type: documentation | Part 2 of 4]\\n\\n## Issues\n\n### Reporting an Issue\n\n* Make sure you test against the latest released version. It is possible we\n  already fixed the bug you're experiencing.\n  \n* If you can, check and see if there is an existing open issue that is already \n  reporting the problem. Feel free to upvote this issue or comment on it to \n  describe your specific scenario (assuming it's the same underlying issue).\n\n* Provide a reproducible test case. If a contributor can't reproduce an issue,\n  then it dramatically lowers the chances it'll get fixed. And in some cases,\n  the issue will eventually be closed.\n\n* Respond promptly to any questions made by the maintainers about your issue. Stale\n  issues will be closed (eventually).\n\n## Pull Requests",
    "metadata": {
      "source": "CleanArchitecture-main\\.github\\CONTRIBUTING.md",
      "file_type": "documentation",
      "token_count": 157,
      "chunk_index": 1,
      "total_chunks": 4
    }
  },
  {
    "page_content": "[File: CONTRIBUTING.md | Type: documentation | Part 3 of 4]\\n\\n* Pull requests are welcome but are most likely to be accepted when they address\n  an existing issue. A common workflow is to create an issue describing the problem\n  your PR would solve, and then volunteer to submit a PR addressing the issue as an \n  initial comment on the issue.\n  \n* As much as possible, pull requests should follow the existing coding conventions\n  used by the project. This is generally true for any project. The only exception to \n  this would be a pull request whose purpose is to adjust the coding conventions used\n  by the project.\n  \n* When possible, issues will be marked with a `help wanted` tag if community contributions\n  are particularly welcome for them. This will often be the case for relatively simple\n  fixes that would make good initial contributions.\n  \n* If your PR addresses an issue, please include \"Fixes #NNN\" in the summary for the PR\n  so that the issue is linked to the PR (and vice versa) and if/when the PR is merged,",
    "metadata": {
      "source": "CleanArchitecture-main\\.github\\CONTRIBUTING.md",
      "file_type": "documentation",
      "token_count": 211,
      "chunk_index": 2,
      "total_chunks": 4
    }
  },
  {
    "page_content": "[File: CONTRIBUTING.md | Type: documentation | Part 4 of 4]\\n\\nso that the issue is linked to the PR (and vice versa) and if/when the PR is merged,\n  the issue is automatically closed.\n  \nThank you for reading this and for considering contributing to this project!",
    "metadata": {
      "source": "CleanArchitecture-main\\.github\\CONTRIBUTING.md",
      "file_type": "documentation",
      "token_count": 44,
      "chunk_index": 3,
      "total_chunks": 4
    }
  },
  {
    "page_content": "[File: bug_report.md | Type: documentation]\\n\\n---\nname: Bug report\nabout: Create a report to help us improve\n---\n<!-- ⚠️⚠️ Do Not Delete This! bug_report_template ⚠️⚠️ -->\n<!-- 🔎 Search existing issues to avoid creating duplicates. -->\n\n- .NET SDK Version:\n\nSteps to Reproduce:\n\n1.\n2.",
    "metadata": {
      "source": "CleanArchitecture-main\\.github\\ISSUE_TEMPLATE\\bug_report.md",
      "file_type": "documentation",
      "token_count": 70,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: feature_request.md | Type: documentation]\\n\\n---\nname: Feature request\nabout: Suggest an idea for this project\n\n---\n\n<!-- ⚠️⚠️ Do Not Delete This! feature_request_template ⚠️⚠️ -->\n<!-- Please search existing issues to avoid creating duplicates. -->\n\n<!-- Describe the feature you'd like. -->",
    "metadata": {
      "source": "CleanArchitecture-main\\.github\\ISSUE_TEMPLATE\\feature_request.md",
      "file_type": "documentation",
      "token_count": 63,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: adr-001-dotnet-di-adoption.md | Type: documentation | Part 1 of 3]\\n\\n# ADR 001: Replace Autofac with .NET Core Dependency Injection\n\n## Status\nAccepted\n\n## Context\nInitially, this repository employed Autofac for dependency injection. At the time of adoption, Autofac was preferred due to its robust feature set, including:\n- Support for advanced scenarios such as decorators and modules, which could be placed close to their corresponding implementations.\n- A well-established history of stability and maturity, having been used in various projects before .NET Core's built-in DI was fully featured.\n\nAs the .NET ecosystem evolved, the built-in DI container began to meet the needs of our project without introducing the added complexity associated with Autofac. The .NET DI framework has matured significantly, offering sufficient functionality for typical use cases, including:\n- Improved support for configuration through extension methods.\n- A simpler learning curve for new contributors familiar with .NET conventions.",
    "metadata": {
      "source": "CleanArchitecture-main\\docs\\architecture-decisions\\adr-001-dotnet-di-adoption.md",
      "file_type": "documentation",
      "token_count": 176,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: adr-001-dotnet-di-adoption.md | Type: documentation | Part 2 of 3]\\n\\n## Decision\nBased on community feedback and a review of our project's requirements, we have decided to remove Autofac from this template and transition to using .NET's built-in dependency injection infrastructure. This decision aligns with the goal of simplifying the codebase and reducing external dependencies.\n\n## Consequences\n- **Simplified Codebase**: Removing Autofac results in a cleaner, more maintainable codebase that adheres to .NET standards.\n- **Reduced Complexity**: The transition eliminates the need for additional files and configurations specific to Autofac, making the project easier to understand for new contributors.\n- **Standardization**: Adopting .NET's built-in DI promotes consistency with other .NET projects, making it easier for developers familiar with the framework to contribute effectively.",
    "metadata": {
      "source": "CleanArchitecture-main\\docs\\architecture-decisions\\adr-001-dotnet-di-adoption.md",
      "file_type": "documentation",
      "token_count": 154,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: adr-001-dotnet-di-adoption.md | Type: documentation | Part 3 of 3]\\n\\n## References\n- [Issue #649: Why is this repo using Autofac instead of .NET's own DI infrastructure?](https://github.com/ardalis/CleanArchitecture/issues/649) - Discussion that led to this decision.\n- [Getting Started with Architecture Decision Records](https://ardalis.com/getting-started-with-architecture-decision-records/) - Resource on ADR best practices.",
    "metadata": {
      "source": "CleanArchitecture-main\\docs\\architecture-decisions\\adr-001-dotnet-di-adoption.md",
      "file_type": "documentation",
      "token_count": 82,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation]\\n\\n﻿## Use Cases Project\n\nIn Clean Architecture, the Use Cases (or Application Services) project is a relatively thin layer that wraps the domain model.\n\nUse Cases are typically organized by feature. These may be simple CRUD operations or much more complex activities.\n\nUse Cases should not depend directly on infrastructure concerns, making them simple to unit test in most cases.\n\nUse Cases are often grouped into Commands and Queries, following CQRS.\n\nHaving Use Cases as a separate project can reduce the amount of logic in UI and Infrastructure projects.\n\nFor simpler projects, the Use Cases project can be omitted, and its behavior moved into the UI project, either as using separate services or MediatR handlers, or by simply putting the logic into the API endpoints.",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\README.md",
      "file_type": "documentation",
      "token_count": 146,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation]\\n\\n﻿## Infrastructure Project\n\nIn Clean Architecture, Infrastructure concerns are kept separate from the core business rules (or domain model in DDD).\n\nThe only project that should have code concerned with EF, Files, Email, Web Services, Azure/AWS/GCP, etc is Infrastructure.\n\nInfrastructure should depend on Core (and, optionally, Use Cases) where abstractions (interfaces) exist.\n\nInfrastructure classes implement interfaces found in the Core (Use Cases) project(s).\n\nThese implementations are wired up at startup using DI. In this case using `Microsoft.Extensions.DependencyInjection` and extension methods defined in each project.\n\nNeed help? Check out the sample here:\nhttps://github.com/ardalis/CleanArchitecture/tree/main/sample\n\nStill need help?\nContact us at https://nimblepros.com",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\README.md",
      "file_type": "documentation",
      "token_count": 155,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation]\\n\\n﻿## Core (Domain Model) Project\n\nIn Clean Architecture, the central focus should be on Entities and business rules.\n\nIn Domain-Driven Design, this is the Domain Model.\n\nThis project should contain all of your Entities, Value Objects, and business logic.\n\nEntities that are related and should change together should be grouped into an Aggregate.\n\nEntities should leverage encapsulation and should minimize public setters.\n\nEntities can leverage Domain Events to communicate changes to other parts of the system.\n\nEntities can define Specifications that can be used to query for them.\n\nFor mutable access, Entities should be accessed through a Repository interface.\n\nRead-only ad hoc queries can use separate Query Services that don't use the Domain Model.\n\nNeed help? Check out the sample here:\nhttps://github.com/ardalis/CleanArchitecture/tree/main/sample\n\nStill need help?\nContact us at https://nimblepros.com",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\README.md",
      "file_type": "documentation",
      "token_count": 174,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 1 of 5]\\n\\n# Architecture Decision Records (ADR)\n\n## What is an Architecture Decision Record (ADR)?\nAn Architecture Decision Record (ADR) documents significant architecture decisions made throughout a project, capturing the context, rationale, and consequences of each decision. This promotes transparency and provides a historical reference for future design considerations.\n\n## Purpose of ADRs\n- **Knowledge Management**: Consolidates architectural knowledge and decisions.\n- **Collaboration**: Enhances team communication by documenting discussions and outcomes.\n- **Clarity**: Provides clear reasoning behind design choices, making it easier for new team members to understand past decisions.",
    "metadata": {
      "source": "CleanArchitecture-main\\docs\\architecture-decisions\\README.md",
      "file_type": "documentation",
      "token_count": 117,
      "chunk_index": 0,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 2 of 5]\\n\\n## Best Practices for Writing ADRs\n1. **Be Specific**: Each ADR should address a single architectural decision. Avoid conflating multiple decisions into one record.\n2. **Document Context**: Clearly explain the project’s context and relevant considerations that influenced the decision. Include team dynamics and priorities.\n3. **Rationale and Consequences**: Describe the reasons for the decision, including pros and cons, and outline the implications of the decision for the project and \n\nfuture architecture.\n4. **Immutable Records**: Once an ADR is created, avoid altering it. Instead, create a new ADR to reflect any changes or updates.\n5. **Timestamp Entries**: Include timestamps to track when each decision was made, especially for aspects that may evolve over time (e.g., costs, schedules).\n6. **Use Templates**: Utilize established templates for consistency and completeness in documenting ADRs.",
    "metadata": {
      "source": "CleanArchitecture-main\\docs\\architecture-decisions\\README.md",
      "file_type": "documentation",
      "token_count": 179,
      "chunk_index": 1,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 3 of 5]\\n\\n## Versioning ADRs\n- **Track Changes**: Each time an ADR is updated or a new version is created, increment the version number (e.g., `v1.0`, `v1.1`, etc.) to reflect changes clearly.\n- **Document Changes**: Include a \"Changelog\" section in the ADR to summarize what has changed in each version. This can include updates to the rationale, context, or decision consequences.\n- **Maintain Clarity**: Ensure the latest version is easily accessible while keeping older versions for reference. You might consider using a version control system (e.g., Git) to manage this effectively.",
    "metadata": {
      "source": "CleanArchitecture-main\\docs\\architecture-decisions\\README.md",
      "file_type": "documentation",
      "token_count": 132,
      "chunk_index": 2,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 4 of 5]\\n\\n## How to Start Using ADRs\n1. **Identify Decisions**: Collaborate with your team to identify significant architecture decisions that need documentation.\n2. **Select a Tool**: Choose a tool for documenting ADRs (e.g., markdown files in a Git repository, Google Docs, project management tools).\n3. **Create ADRs**: For each decision, create an ADR file in the `adr` directory, following naming conventions (e.g., `choose-database.md`).\n\n## File Name Conventions\n- Use a present tense imperative verb phrase.\n- Separate words with lowercase letters and dashes.\n- Use `.md` extension for markdown formatting.\n\n## Templates\nRefer to the following templates for structuring your ADRs:\n- [Decision record template by Michael Nygard](https://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions)\n- [Decision record template by Jeff Tyree and Art Akerman](https://github.com/adr/adr)\n- [MADR project templates](https://adr.github.io/madr/)",
    "metadata": {
      "source": "CleanArchitecture-main\\docs\\architecture-decisions\\README.md",
      "file_type": "documentation",
      "token_count": 222,
      "chunk_index": 3,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 5 of 5]\\n\\n## Teamwork Advice for ADRs\n- Foster a culture of collaborative decision-making and ensure ADRs are seen as valuable tools rather than bureaucratic requirements.\n- Consider using the term \"decisions\" instead of \"ADRs\" to encourage engagement.\n- Maintain living documents by updating existing ADRs with new information rather than rewriting them.\n\n## For More Information\n- [Architectural Decision Wikipedia](https://en.wikipedia.org/wiki/Architectural_decision)\n- [Markdown Architectural Decision Records](https://adr.github.io/)\n- [Tools for working with ADRs](https://github.com/adr/adr)\n\nBy following these guidelines, your team can effectively leverage ADRs to enhance architectural decision-making and project transparency while keeping a clear version history of all architectural decisions.",
    "metadata": {
      "source": "CleanArchitecture-main\\docs\\architecture-decisions\\README.md",
      "file_type": "documentation",
      "token_count": 159,
      "chunk_index": 4,
      "total_chunks": 5
    }
  },
  {
    "page_content": "[File: global.json | Type: config]\\n\\n{\n  \"sdk\": {\n    \"version\": \"9.0.100-rc.2.24474.11\",\n    \"rollForward\": \"latestMajor\"\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\global.json",
      "file_type": "config",
      "token_count": 38,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 1 of 2]\\n\\n﻿## Use Cases Project\n\nIn Clean Architecture, the Use Cases (or Application Services) project is a relatively thin layer that wraps the domain model.\n\nUse Cases are typically organized by feature. These may be simple CRUD operations or much more complex activities.\n\nUse Cases should not depend directly on infrastructure concerns, making them simple to unit test in most cases.\n\nUse Cases are often grouped into Commands and Queries, following CQRS.\n\nHaving Use Cases as a separate project can reduce the amount of logic in UI and Infrastructure projects.\n\nFor simpler projects, the Use Cases project can be omitted, and its behavior moved into the UI project, either as separate services or MediatR handlers, or by simply putting the logic into the API endpoints.\n\nFor ideas on organizing your Use Case project's folder structure, see this thread:\nhttps://twitter.com/ardalis/status/1686406393018945536",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\README.md",
      "file_type": "documentation",
      "token_count": 177,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 2 of 2]\\n\\nNeed help? Check out the sample here:\nhttps://github.com/ardalis/CleanArchitecture/tree/main/sample\n\nStill need help?\nContact us at https://nimblepros.com",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\README.md",
      "file_type": "documentation",
      "token_count": 37,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: template.json | Type: config | Part 1 of 2]\\n\\n{\n  \"$schema\": \"http://json.schemastore.org/template\",\n  \"author\": \"Steve Smith @ardalis, Erik Dahl\",\n  \"classifications\": [\n    \"Web\",\n    \"ASP.NET\",\n    \"Clean Architecture\"\n  ],\n  \"tags\": {\n    \"language\": \"C#\",\n    \"type\": \"project\"\n  },\n  \"identity\": \"Ardalis.CleanArchitecture.Template\",\n  \"name\": \"ASP.NET Clean Architecture Solution\",\n  \"shortName\": \"clean-arch\",\n  \"sourceName\": \"Clean.Architecture\",\n  \"preferNameDirectory\": true,\n  \"symbols\": {\n    \"aspire\": {\n      \"type\": \"parameter\",\n      \"datatype\": \"bool\",\n      \"defaultValue\": \"false\",\n      \"description\": \"Include .NET Aspire.\"\n    }\n  },\n  \"sources\": [\n    {\n      \"exclude\": [ \n        \".vs/**\",\n        \".vscode/**\",\n        \".git/**\",\n        \".github/**\",\n        \".template.config\",\n        \"sample/**\"\n      ],\n      \"modifiers\": [\n        {\n          \"condition\": \"(!aspire)\",\n          \"exclude\": [\n            \"src/Clean.Architecture.AspireHost/**\",\n            \"src/Clean.Architecture.ServiceDefaults/**\",",
    "metadata": {
      "source": "CleanArchitecture-main\\.template.config\\template.json",
      "file_type": "config",
      "token_count": 267,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: template.json | Type: config | Part 2 of 2]\\n\\n\"src/Clean.Architecture.ServiceDefaults/**\",\n            \"tests/Clean.Architecture.AspireTests/**\"\n          ]\n        },\n        {\n          \"condition\": \"(aspire)\",\n          \"include\": [\n            \"src/Clean.Architecture.AspireHost/**\",\n            \"src/Clean.Architecture.ServiceDefaults/**\",\n            \"tests/Clean.Architecture.AspireTests/**\"\n          ]\n        }\n      ]\n    }\n  ]\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\.template.config\\template.json",
      "file_type": "config",
      "token_count": 95,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: tasks.json | Type: config | Part 1 of 2]\\n\\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"build\",\n            \"command\": \"dotnet\",\n            \"type\": \"process\",\n            \"args\": [\n                \"build\",\n                \"${workspaceFolder}/Clean.Architecture.sln\",\n                \"/property:GenerateFullPaths=true\",\n                \"/consoleloggerparameters:NoSummary;ForceNoAlign\"\n            ],\n            \"problemMatcher\": \"$msCompile\"\n        },\n        {\n            \"label\": \"publish\",\n            \"command\": \"dotnet\",\n            \"type\": \"process\",\n            \"args\": [\n                \"publish\",\n                \"${workspaceFolder}/Clean.Architecture.sln\",\n                \"/property:GenerateFullPaths=true\",\n                \"/consoleloggerparameters:NoSummary;ForceNoAlign\"\n            ],\n            \"problemMatcher\": \"$msCompile\"\n        },\n        {\n            \"label\": \"watch\",\n            \"command\": \"dotnet\",\n            \"type\": \"process\",\n            \"args\": [\n                \"watch\",",
    "metadata": {
      "source": "CleanArchitecture-main\\.vscode\\tasks.json",
      "file_type": "config",
      "token_count": 210,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: tasks.json | Type: config | Part 2 of 2]\\n\\n\"type\": \"process\",\n            \"args\": [\n                \"watch\",\n                \"run\",\n                \"--project\",\n                \"${workspaceFolder}/Clean.Architecture.sln\"\n            ],\n            \"problemMatcher\": \"$msCompile\"\n        }\n    ]\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\.vscode\\tasks.json",
      "file_type": "config",
      "token_count": 50,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: launch.json | Type: config | Part 1 of 2]\\n\\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            // Use IntelliSense to find out which attributes exist for C# debugging\n            // Use hover for the description of the existing attributes\n            // For further information visit https://github.com/dotnet/vscode-csharp/blob/main/debugger-launchjson.md.\n            \"name\": \".NET Core Launch (web)\",\n            \"type\": \"coreclr\",\n            \"request\": \"launch\",\n            \"preLaunchTask\": \"build\",\n            // If you have changed target frameworks, make sure to update the program path.\n            \"program\": \"${workspaceFolder}/src/Clean.Architecture.Web/bin/Debug/net8.0/Clean.Architecture.Web.dll\",\n            \"args\": [],\n            \"cwd\": \"${workspaceFolder}/src/Clean.Architecture.Web\",\n            \"stopAtEntry\": false,\n            // Enable launching a web browser when ASP.NET Core starts. For more information: https://aka.ms/VSCode-CS-LaunchJson-WebBrowser\n            \"serverReadyAction\": {",
    "metadata": {
      "source": "CleanArchitecture-main\\.vscode\\launch.json",
      "file_type": "config",
      "token_count": 224,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: launch.json | Type: config | Part 2 of 2]\\n\\n\"serverReadyAction\": {\n                \"action\": \"openExternally\",\n                \"pattern\": \"\\\\bNow listening on:\\\\s+(https?://\\\\S+)\"\n            },\n            \"env\": {\n                \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n            },\n            \"sourceFileMap\": {\n                \"/Views\": \"${workspaceFolder}/Views\"\n            }\n        },\n        {\n            \"name\": \".NET Core Attach\",\n            \"type\": \"coreclr\",\n            \"request\": \"attach\"\n        }\n    ]\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\.vscode\\launch.json",
      "file_type": "config",
      "token_count": 106,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: appsettings.json | Type: config]\\n\\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\",\n      \"Aspire.Hosting.Dcp\": \"Warning\"\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.AspireHost\\appsettings.json",
      "file_type": "config",
      "token_count": 42,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: appsettings.Development.json | Type: config]\\n\\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.AspireHost\\appsettings.Development.json",
      "file_type": "config",
      "token_count": 31,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: appsettings.json | Type: config | Part 1 of 2]\\n\\n﻿{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=(localdb)\\\\v11.0;Database=cleanarchitecture;Trusted_Connection=True;MultipleActiveResultSets=true\",\n    \"SqliteConnection\": \"Data Source=database.sqlite\"\n  },\n  \"Serilog\": {\n    \"MinimumLevel\": {\n      \"Default\": \"Information\"\n    },\n    \"WriteTo\": [\n      {\n        \"Name\": \"Console\"\n      },\n      {\n        \"Name\": \"File\",\n        \"Args\": {\n          \"path\": \"log.txt\",\n          \"rollingInterval\": \"Day\"\n        }\n      }\n      //Uncomment this section if you'd like to push your logs to Azure Application Insights\n      //Full list of Serilog Sinks can be found here: https://github.com/serilog/serilog/wiki/Provided-Sinks\n      //{\n      //  \"Name\": \"ApplicationInsights\",\n      //  \"Args\": {\n      //    \"instrumentationKey\": \"\", //Fill in with your ApplicationInsights InstrumentationKey",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\appsettings.json",
      "file_type": "config",
      "token_count": 218,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: appsettings.json | Type: config | Part 2 of 2]\\n\\n//    \"instrumentationKey\": \"\", //Fill in with your ApplicationInsights InstrumentationKey\n      //    \"telemetryConverter\": \"Serilog.Sinks.ApplicationInsights.Sinks.ApplicationInsights.TelemetryConverters.TraceTelemetryConverter, Serilog.Sinks.ApplicationInsights\"\n      //  }\n      //}\n    ]\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\appsettings.json",
      "file_type": "config",
      "token_count": 70,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: launchSettings.json | Type: config | Part 1 of 2]\\n\\n{\n  \"$schema\": \"https://json.schemastore.org/launchsettings.json\",\n  \"profiles\": {\n    \"https\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"applicationUrl\": \"https://localhost:17143;http://localhost:15258\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\n        \"DOTNET_ENVIRONMENT\": \"Development\",\n        \"DOTNET_DASHBOARD_OTLP_ENDPOINT_URL\": \"https://localhost:21007\",\n        \"DOTNET_RESOURCE_SERVICE_ENDPOINT_URL\": \"https://localhost:22245\"\n      }\n    },\n    \"http\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"applicationUrl\": \"http://localhost:15258\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\n        \"DOTNET_ENVIRONMENT\": \"Development\",\n        \"DOTNET_DASHBOARD_OTLP_ENDPOINT_URL\": \"http://localhost:19187\",\n        \"DOTNET_RESOURCE_SERVICE_ENDPOINT_URL\": \"http://localhost:20134\"\n      }\n    }\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.AspireHost\\Properties\\launchSettings.json",
      "file_type": "config",
      "token_count": 251,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: launchSettings.json | Type: config | Part 2 of 2]\\n\\n\"DOTNET_RESOURCE_SERVICE_ENDPOINT_URL\": \"http://localhost:20134\"\n      }\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.AspireHost\\Properties\\launchSettings.json",
      "file_type": "config",
      "token_count": 23,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: launchSettings.json | Type: config]\\n\\n{\n  \"iisSettings\": {\n    \"windowsAuthentication\": false,\n    \"anonymousAuthentication\": true,\n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:57677/\",\n      \"sslPort\": 0\n    }\n  },\n  \"profiles\": {\n    \"https\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchUrl\": \"swagger\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      },\n      \"applicationUrl\": \"https://localhost:57678/\"\n    },\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\Properties\\launchSettings.json",
      "file_type": "config",
      "token_count": 164,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: xunit.runner.json | Type: config]\\n\\n﻿{\n  \"shadowCopy\": false,\n  \"parallelizeAssembly\": false,\n  \"parallelizeTestCollections\": false\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\xunit.runner.json",
      "file_type": "config",
      "token_count": 27,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: appsettings.Development.json | Type: config]\\n\\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.AspireHost\\appsettings.Development.json",
      "file_type": "config",
      "token_count": 31,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: xunit.runner.json | Type: config]\\n\\n﻿{\n  \"shadowCopy\": false,\n  \"parallelizeAssembly\": false,\n  \"parallelizeTestCollections\": false\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\xunit.runner.json",
      "file_type": "config",
      "token_count": 27,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: appsettings.json | Type: config]\\n\\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\",\n      \"Aspire.Hosting.Dcp\": \"Warning\"\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.AspireHost\\appsettings.json",
      "file_type": "config",
      "token_count": 42,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 1 of 32]\\n\\n[![.NET Core](https://github.com/ardalis/CleanArchitecture/workflows/.NET%20Core/badge.svg)](https://github.com/ardalis/CleanArchitecture/actions)\n[![publish Ardalis.CleanArchitecture Template to nuget](https://github.com/ardalis/CleanArchitecture/actions/workflows/publish.yml/badge.svg)](https://github.com/ardalis/CleanArchitecture/actions/workflows/publish.yml)\n[![Ardalis.CleanArchitecture.Template on NuGet](https://img.shields.io/nuget/v/Ardalis.CleanArchitecture.Template?label=Ardalis.CleanArchitecture.Template)](https://www.nuget.org/packages/Ardalis.CleanArchitecture.Template/)\n\n<a href=\"https://twitter.com/intent/follow?screen_name=ardalis\">\n    <img src=\"https://img.shields.io/twitter/follow/ardalis.svg?label=Follow%20@ardalis\" alt=\"Follow @ardalis\" />\n</a> &nbsp; <a href=\"https://twitter.com/intent/follow?screen_name=nimblepros\">\n    <img src=\"https://img.shields.io/twitter/follow/nimblepros.svg?label=Follow%20@nimblepros\" alt=\"Follow @nimblepros\" />\n</a>\n\n# Clean Architecture",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 278,
      "chunk_index": 0,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 2 of 32]\\n\\n# Clean Architecture\n\nA starting point for Clean Architecture with ASP.NET Core. [Clean Architecture](https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html) is just the latest in a series of names for the same loosely-coupled, dependency-inverted architecture. You will also find it named [hexagonal](http://alistair.cockburn.us/Hexagonal+architecture), [ports-and-adapters](http://www.dossier-andreas.net/software_architecture/ports_and_adapters.html), or [onion architecture](http://jeffreypalermo.com/blog/the-onion-architecture-part-1/).\n\nLearn more about Clean Architecture and this template in [NimblePros' Introducing Clean Architecture course](https://academy.nimblepros.com/p/learn-clean-architecture). Use code ARDALIS to save 20%.\n\nThis architecture is used in the [DDD Fundamentals course](https://www.pluralsight.com/courses/fundamentals-domain-driven-design) by [Steve Smith](https://ardalis.com) and [Julie Lerman](https://thedatafarm.com/).",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 243,
      "chunk_index": 1,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 3 of 32]\\n\\n:school: Contact Steve's company, [NimblePros](https://nimblepros.com/), for Clean Architecture or DDD training and/or implementation assistance for your team.\n\n## Take the Course!\n\n[Learn about how to implement Clean Architecture](https://academy.nimblepros.com/p/intro-to-clean-architecture) from [NimblePros](https://nimblepros.com) trainers [Sarah \"sadukie\" Dutkiewicz](https://blog.nimblepros.com/author/sadukie/) and [Steve \"ardalis\" Smith](https://blog.nimblepros.com/author/ardalis/).\n\n## Table Of Contents",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 143,
      "chunk_index": 2,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 4 of 32]\\n\\n- [Clean Architecture](#clean-architecture)\n  - [Troubleshooting Chrome Errors](#troubleshooting-chrome-errors)\n  - [Table Of Contents](#table-of-contents)\n  - [Give a Star! :star:](#give-a-star-star)\n  - [Versions](#versions)\n  - [Learn More](#learn-more)\n- [Getting Started](#getting-started)\n  - [Using the dotnet CLI template](#using-the-dotnet-cli-template)\n  - [What about Controllers and Razor Pages?](#what-about-controllers-and-razor-pages)\n    - [Add Ardalis.ApiEndpoints](#add-ardalisapiendpoints)\n    - [Add Controllers](#add-controllers)\n    - [Add Razor Pages](#add-razor-pages)\n  - [Using the GitHub Repository](#using-the-github-repository)\n  - [Running Migrations](#running-migrations)\n- [Goals](#goals)\n  - [History and Shameless Plug Section](#history-and-shameless-plug-section)\n- [Design Decisions and Dependencies](#design-decisions-and-dependencies)\n  - [Where To Validate](#where-to-validate)\n  - [The Core Project](#the-core-project)",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 264,
      "chunk_index": 3,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 5 of 32]\\n\\n- [Where To Validate](#where-to-validate)\n  - [The Core Project](#the-core-project)\n  - [The Use Cases Project](#the-use-cases-project)\n  - [The Infrastructure Project](#the-infrastructure-project)\n  - [The Web Project](#the-web-project)\n  - [The SharedKernel Project](#the-sharedkernel-project)\n  - [The Test Projects](#the-test-projects)\n- [Patterns Used](#patterns-used)\n  - [Domain Events](#domain-events)\n  - [Related Projects](#related-projects)",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 120,
      "chunk_index": 4,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 6 of 32]\\n\\n## Give a Star! :star:\n\nIf you like or are using this project to learn or start your solution, please give it a star. Thanks!\n\nOr if you're feeling really generous, we now support GitHub sponsorships - see the button above.\n\n## Sponsors\n\nI'm pleased to announce that [Amazon AWS's FOSS fund](https://github.com/aws/dotnet-foss) has chosen to award a 12-month sponsorship to this project. Thank you, and thanks to all of my other past and current sponsors!\n\n## Troubleshooting Chrome Errors\n\nBy default the site uses HTTPS and expects you to have a self-signed developer certificate for localhost use. If you get an error with Chrome [see this answer](https://stackoverflow.com/a/31900210/13729) for mitigation instructions.\n\n## Versions\n\nThe main branch is now using **.NET 9**. This corresponds with NuGet package version 10.x. Previous versions are available - see our [Releases](https://github.com/ardalis/CleanArchitecture/releases).\n\n## Learn More",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 217,
      "chunk_index": 5,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 7 of 32]\\n\\n## Learn More\n\n- [Live Stream Recordings Working on Clean Architecture](https://www.youtube.com/c/Ardalis/search?query=clean%20architecture)\n- [DotNetRocks Podcast Discussion with Steve \"ardalis\" Smith](https://player.fm/series/net-rocks/clean-architecture-with-steve-smith)\n- [Fritz and Friends Streaming Discussion with Steve \"ardalis\" Smith](https://www.youtube.com/watch?v=k8cZUW4MS3I)\n\n# Getting Started\n\nTo use this template, there are a few options:\n\n- Install using `dotnet new` (recommended)\n- Download this Repository (and modify as needed)\n\n## Using the dotnet CLI template\n\nFirst, install the template from [NuGet (https://www.nuget.org/packages/Ardalis.CleanArchitecture.Template/)](https://www.nuget.org/packages/Ardalis.CleanArchitecture.Template/):\n\n```powershell\ndotnet new install Ardalis.CleanArchitecture.Template\n```\n\nYou can see available options by running the command with the `-?` option:",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 224,
      "chunk_index": 6,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 8 of 32]\\n\\nYou can see available options by running the command with the `-?` option:\n\n```powershell\ndotnet new clean-arch -?\nASP.NET Clean Architecture Solution (C#)\nAuthor: Steve Smith @ardalis, Erik Dahl\n\nUsage:\n  dotnet new clean-arch [options] [template options]",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 64,
      "chunk_index": 7,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 9 of 32]\\n\\nUsage:\n  dotnet new clean-arch [options] [template options]\n\nOptions:\n  -n, --name <name>       The name for the output being created. If no name is specified, the name of the output\n                          directory is used.\n  -o, --output <output>   Location to place the generated output.\n  --dry-run               Displays a summary of what would happen if the given command line were run if it would result\n                          in a template creation.\n  --force                 Forces content to be generated even if it would change existing files.\n  --no-update-check       Disables checking for the template package updates when instantiating a template.\n  --project <project>     The project that should be used for context evaluation.\n  -lang, --language <C#>  Specifies the template language to instantiate.\n  --type <project>        Specifies the template type to instantiate.",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 186,
      "chunk_index": 8,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 10 of 32]\\n\\nTemplate options:\n  -as, --aspire  Include .NET Aspire.\n                 Type: bool\n                 Default: false\n```\n\nYou should see the template in the list of templates from `dotnet new list` after this installs successfully. Look for \"ASP.NET Clean Architecture Solution\" with Short Name of \"clean-arch\".\n\nNavigate to the parent directory in which you'd like the solution's folder to be created.\n\nRun this command to create the solution structure in a subfolder name `Your.ProjectName`:\n\n```\ndotnet new clean-arch -o Your.ProjectName\n```\n\nThe `Your.ProjectName` directory and solution file will be created, and inside that will be all of your new solution contents, properly namespaced and ready to run/test!\n\nExample:\n![powershell screenshot showing steps](https://user-images.githubusercontent.com/782127/101661723-9fd28e80-3a16-11eb-8be4-f9195d825ad6.png)\n\nThanks [@dahlsailrunner](https://github.com/dahlsailrunner) for your help getting this working!\n\n**Known Issues**:",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 234,
      "chunk_index": 9,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 11 of 32]\\n\\n**Known Issues**: \n\n- Don't include hyphens in the name. See [#201](https://github.com/ardalis/CleanArchitecture/issues/201).\n- Don't use 'Ardalis' as your namespace (conflicts with dependencies).\n\n## What about Controllers and Razor Pages?\n\nAs of version 9, this solution template only includes support for API Endpoints using the FastEndpoints library. If you want to use my ApiEndpoints library, Razor Pages, and/or Controllers you can use the last template that included them, [version 7.1](https://www.nuget.org/packages/Ardalis.CleanArchitecture.Template/7.1.0). Alternately, they're easily added to this template after installation.\n\n### Add Ardalis.ApiEndpoints\n\nTo use [Ardalis.ApiEndpoints](https://www.nuget.org/packages/Ardalis.ApiEndpoints) instead of (or in addition to) [FastEndpoints](https://fast-endpoints.com/), just add the reference and use the base classes from the documentation.\n\n```powershell\ndotnet add package Ardalis.ApiEndpoints\n```\n\n### Add Controllers",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 231,
      "chunk_index": 10,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 12 of 32]\\n\\n```powershell\ndotnet add package Ardalis.ApiEndpoints\n```\n\n### Add Controllers\n\nYou'll need to add support for controllers to the Program.cs file. You need:\n\n```csharp\nbuilder.Services.AddControllers(); // ControllersWithView if you need Views\n\n// and\n\napp.MapControllers();\n```\n\nOnce these are in place, you should be able to create a Controllers folder and (optionally) a Views folder and everything should work as expected. Personally I find Razor Pages to be much better than Controllers and Views so if you haven't fully investigated Razor Pages you might want to do so right about now before you choose Views.\n\n### Add Razor Pages\n\nYou'll need to add support for Razor Pages to the Program.cs file. You need:\n\n```csharp\nbuilder.Services.AddRazorPages();\n\n// and\n\napp.MapRazorPages();\n```\n\nThen you just add a Pages folder in the root of the project and go from there.\n\n## Using the GitHub Repository",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 197,
      "chunk_index": 11,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 13 of 32]\\n\\n## Using the GitHub Repository\n\nTo get started based on this repository, you need to get a copy locally. You have three options: fork, clone, or download. Most of the time, you probably just want to download.\n\nYou should **download the repository**, unblock the zip file, and extract it to a new folder if you just want to play with the project or you wish to use it as the starting point for an application.\n\nYou should **fork this repository** only if you plan on submitting a pull request. Or if you'd like to keep a copy of a snapshot of the repository in your own GitHub account.\n\nYou should **clone this repository** if you're one of the contributors and you have commit access to it. Otherwise you probably want one of the other options.\n\n## Running Migrations\n\nYou shouldn't need to do this to use this template, but if you want migrations set up properly in the Infrastructure project, you need to specify that project name when you run the migrations command.",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 203,
      "chunk_index": 12,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 14 of 32]\\n\\nIn Visual Studio, open the Package Manager Console, and run `Add-Migration InitialMigrationName -StartupProject Your.ProjectName.Web -Context AppDbContext -Project Your.ProjectName.Infrastructure`.\n\nIn a terminal with the CLI, the command is similar. Run this from the Web project directory:\n\n```powershell\ndotnet ef migrations add MIGRATIONNAME -c AppDbContext -p ../Your.ProjectName.Infrastructure/Your.ProjectName.Infrastructure.csproj -s Your.ProjectName.Web.csproj -o Data/Migrations\n```\n\nTo use SqlServer, change `options.UseSqlite(connectionString));` to `options.UseSqlServer(connectionString));` in the `Your.ProjectName.Infrastructure.StartupSetup` file. Also remember to replace the `SqliteConnection` with `DefaultConnection` in the `Your.ProjectName.Web.Program` file, which points to your Database Server.\n\nTo update the database use this command from the Web project folder (replace `Clean.Architecture` with your project's name):",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 197,
      "chunk_index": 13,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 15 of 32]\\n\\n```powershell\ndotnet ef database update -c AppDbContext -p ../Clean.Architecture.Infrastructure/Clean.Architecture.Infrastructure.csproj -s Clean.Architecture.Web.csproj\n```\n\n# Goals\n\nThe goal of this repository is to provide a basic solution structure that can be used to build Domain-Driven Design (DDD)-based or simply well-factored, SOLID applications using .NET Core. Learn more about these topics here:\n\n- [SOLID Principles for C# Developers](https://www.pluralsight.com/courses/csharp-solid-principles)\n- [Domain-Driven Design Fundamentals](https://www.pluralsight.com/courses/fundamentals-domain-driven-design)\n- [Refactoring to SOLID C# Code](https://www.pluralsight.com/courses/refactoring-solid-c-sharp-code)\n\nIf you're used to building applications as single-project or as a set of projects that follow the traditional UI -> Business Layer -> Data Access Layer \"N-Tier\" architecture, I recommend you check out these two courses (ideally before DDD Fundamentals):",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 226,
      "chunk_index": 14,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 16 of 32]\\n\\n- [Creating N-Tier Applications in C#, Part 1](https://www.pluralsight.com/courses/n-tier-apps-part1)\n- [Creating N-Tier Applications in C#, Part 2](https://www.pluralsight.com/courses/n-tier-csharp-part2)\n\nSteve Smith also maintains Microsoft's reference application, eShopOnWeb, and its associated free eBook. Check them out here:\n\n- [eShopOnWeb on GitHub](https://github.com/nimblepros/eShopOnWeb) (now supported by [NimblePros](https://nimblepros.com))\n- [Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure](https://aka.ms/webappebook) (eBook)",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 156,
      "chunk_index": 15,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 17 of 32]\\n\\nNote that the goal of this project and repository is **not** to provide a sample or reference application. It's meant to just be a template, but with enough pieces in place to show you where things belong as you set up your actual solution. Instead of useless \"Class1.cs\" there are a few real classes in place. Delete them as soon as you understand why they're there and where you should put your own, similar files. There *is* a sample application in the `/sample` folder, if you're looking for that.\n\n## History and Shameless Plug Section",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 117,
      "chunk_index": 16,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 18 of 32]\\n\\n## History and Shameless Plug Section\n\nI've used this starter kit to teach the basics of ASP.NET Core using Domain-Driven Design concepts and patterns for some time now (starting when ASP.NET Core was still in pre-release). Typically I teach a one- or two-day hands-on workshop ahead of events like DevIntersection, or private on-site workshops for companies looking to bring their teams up to speed with the latest development technologies and techniques. Feel free to [contact me](https://nimblepros.com/) if you'd like information about upcoming workshops.\n\n# Design Decisions and Dependencies",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 118,
      "chunk_index": 17,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 19 of 32]\\n\\n# Design Decisions and Dependencies\n\nThe goal of this solution template is to provide a fairly bare-bones starter kit for new projects. It does not include every possible framework, tool, or feature that a particular enterprise application might benefit from. Its choices of technology for things like data access are rooted in what is the most common, accessible technology for most business software developers using Microsoft's technology stack. It doesn't (currently) include extensive support for things like logging, monitoring, or analytics, though these can all be added easily. Below is a list of the technology dependencies it includes, and why they were chosen. Most of these can easily be swapped out for your technology of choice, since the nature of this architecture is to support modularity and encapsulation.\n\n## Where To Validate",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 156,
      "chunk_index": 18,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 20 of 32]\\n\\n## Where To Validate\n\nValidation of user input is a requirement of all software applications. The question is, where does it make sense to implement it in a concise and elegant manner? This solution template includes 4 separate projects, each of which might be responsible for performing validation as well as enforcing business invariants (which, given validation should already have occurred, are usually modeled as exceptions).\n\n- [When to Validate and When to Throw Exceptions](https://www.youtube.com/watch?v=dpPcnAT7n7M)\n\nThe domain model itself should generally rely on object-oriented design to ensure it is always in a consistent state. It leverages encapsulation and limits public state mutation access to achieve this, and it assumes that any arguments passed to it have already been validated, so null or other improper values yield exceptions, not validation results, in most cases.",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 172,
      "chunk_index": 19,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 21 of 32]\\n\\nThe use cases / application project includes the set of all commands and queries the system supports. It's frequently responsible for validating its own command and query objects. This is most easily done using a [chain of responsibility pattern](https://deviq.com/design-patterns/chain-of-responsibility-pattern) via MediatR behaviors or some other pipeline.\n\nThe Web project includes all API endpoints, which include their own request and response types, following the [REPR pattern](https://deviq.com/design-patterns/repr-design-pattern). The FastEndpoints library includes built-in support for validation using FluentValidation on the request types. This is a natural place to perform input validation as well.",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 137,
      "chunk_index": 20,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 22 of 32]\\n\\nHaving validation occur both within the API endpoints and then again at the use case level may be considered redundant. There are tradeoffs to adding essentially the same validation in two places, one for API requests and another for messages sent to Use Case handlers. Following defensive coding, it often makes sense to add validation in both places, as the overhead is minimal and the peace of mind and greater application robustness is often worth it.\n\n## The Core Project\n\nThe Core project is the center of the Clean Architecture design, and all other project dependencies should point toward it. As such, it has very few external dependencies. The Core project should include the Domain Model including things like:\n\n- Entities\n- Aggregates\n- Value Objects\n- Domain Events\n- Domain Event Handlers\n- Domain Services\n- Specifications\n- Interfaces\n- DTOs (sometimes)\n\nYou can learn more about these patterns and how to apply them here:",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 184,
      "chunk_index": 21,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 23 of 32]\\n\\nYou can learn more about these patterns and how to apply them here:\n\n- [DDD Fundamentals](https://www.pluralsight.com/courses/fundamentals-domain-driven-design)\n- [DDD Concepts](https://deviq.com/domain-driven-design/ddd-overview)\n\n## The Use Cases Project",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 60,
      "chunk_index": 22,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 24 of 32]\\n\\n## The Use Cases Project\n\nAn optional project, I've included it because many folks were demanding it and it's easier to remove than to add later. This is also often referred to as the *Application* or *Application Services* layer. The Use Cases project is organized following CQRS into Commands and Queries (I considered having folders for `Commands` and `Queries` but felt it added little - the folders per actual *command* or *query* is sufficient without extra nesting). Commands mutate the domain model and thus should always use Repository abstractions for their data access (Repositories are how one fetches and persists domain model types). Queries are readonly, and thus **do not need to use the repository pattern**, but instead can use whatever query service or approach is most convenient.",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 157,
      "chunk_index": 23,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 25 of 32]\\n\\nSince the Use Cases project is set up to depend on Core and does not depend on Infrastructure, there will still need to be abstractions defined for its data access. And it *can* use things like specifications, which can sometimes help encapsulate query logic as well as result type mapping. But it doesn't *have* to use repository/specification - it can just issue a SQL query or call a stored procedure if that's the most efficient way to get the data.",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 95,
      "chunk_index": 24,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 26 of 32]\\n\\nAlthough this is an optional project to include (without it, your API endpoints would just work directly with the domain model or query services), it does provide a nice UI-ignorant place to add automated tests, and lends itself toward applying policies for cross-cutting concerns using a Chain of Responsibility pattern around the message handlers (for things like validation, caching, auth, logging, timing, etc.). The template includes an example of this for logging, which is located in the [SharedKernel NuGet package](https://github.com/ardalis/Ardalis.SharedKernel/blob/main/src/Ardalis.SharedKernel/LoggingBehavior.cs).\n\n## The Infrastructure Project",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 131,
      "chunk_index": 25,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 27 of 32]\\n\\n## The Infrastructure Project\n\nMost of your application's dependencies on external resources should be implemented in classes defined in the Infrastructure project. These classes should implement interfaces defined in Core. If you have a very large project with many dependencies, it may make sense to have multiple Infrastructure projects (e.g. Infrastructure.Data), but for most projects one Infrastructure project with folders works fine. The template includes data access and domain event implementations, but you would also add things like email providers, file access, web api clients, etc. to this project so they're not adding coupling to your Core or UI projects.\n\n## The Web Project",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 122,
      "chunk_index": 26,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 28 of 32]\\n\\n## The Web Project\n\nThe entry point of the application is the ASP.NET Core web project (or possibly the AspireHost project, which in turn loads the Web project). This is actually a console application, with a `public static void Main` method in `Program.cs`. It leverages FastEndpoints and the REPR pattern to organize its API endpoints.\n\n## The SharedKernel Package\n\nA [Shared Kernel](https://deviq.com/domain-driven-design/shared-kernel) is used to share common elements between bounded contexts. It's a DDD term but many organizations leverage \"common\" projects or packages for things that are useful to share between several applications.",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 132,
      "chunk_index": 27,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 29 of 32]\\n\\nI recommend creating a separate SharedKernel project and solution if you will require sharing code between multiple [bounded contexts](https://ardalis.com/encapsulation-boundaries-large-and-small/) (see [DDD Fundamentals](https://www.pluralsight.com/courses/domain-driven-design-fundamentals)). I further recommend this be published as a NuGet package (most likely privately within your organization) and referenced as a NuGet dependency by those projects that require it.\n\nPreviously a project for SharedKernel was included in this project. However, for the above reasons I've made it a separate package, [Ardalis.SharedKernel](https://github.com/ardalis/Ardalis.SharedKernel), which **you should replace with your own when you use this template**.\n\nIf you want to see another [example of a SharedKernel package, the one I use in my updated Pluralsight DDD course is on NuGet here](https://www.nuget.org/packages/PluralsightDdd.SharedKernel/).\n\n## The Test Projects",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 211,
      "chunk_index": 28,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 30 of 32]\\n\\n## The Test Projects\n\nTest projects could be organized based on the kind of test (unit, functional, integration, performance, etc.) or by the project they are testing (Core, Infrastructure, Web), or both. For this simple starter kit, the test projects are organized based on the kind of test, with unit, functional and integration test projects existing in this solution. Functional tests are a special kind of [integration test](https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-8.0) that perform [subcutaneous testing](https://martinfowler.com/bliki/SubcutaneousTest.html) of the APIs of the Web project, without actually hosting a real website or going over the network. I've created a bunch of [test helpers](https://github.com/ardalis/HttpClientTestExtensions) to make these kinds of tests shorter and easier to maintain.\n\n# Patterns Used",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 192,
      "chunk_index": 29,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 31 of 32]\\n\\n# Patterns Used\n\nThis solution template has code built in to support a few common patterns, especially Domain-Driven Design patterns. Here is a brief overview of how a few of them work.\n\n## Domain Events\n\nDomain events are a great pattern for decoupling a trigger for an operation from its implementation. This is especially useful from within domain entities since the handlers of the events can have dependencies while the entities themselves typically do not. In the sample, you can see this in action with the `ToDoItem.MarkComplete()` method. The following sequence diagram demonstrates how the event and its handler are used when an item is marked complete through a web API endpoint.\n\n![Domain Event Sequence Diagram](https://user-images.githubusercontent.com/782127/75702680-216ce300-5c73-11ea-9187-ec656192ad3b.png)\n\n## Related Projects",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 176,
      "chunk_index": 30,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: README.md | Type: documentation | Part 32 of 32]\\n\\n## Related Projects\n\n- [ApiEndpoints](https://github.com/ardalis/apiendpoints)\n- [GuardClauses](https://github.com/ardalis/guardclauses)\n- [HttpClientTestExtensions](https://github.com/ardalis/HttpClientTestExtensions)\n- [Result](https://github.com/ardalis/result)\n- [SharedKernel](https://github.com/ardalis/Ardalis.SharedKernel)\n- [SmartEnum](https://github.com/ardalis/SmartEnum)\n- [Specification](https://github.com/ardalis/specification)\n- [FastEndpoints](https://fast-endpoints.com/)\n\n## Presentations and Videos on Clean Architecture\n\n- [What's New in Clean Architecture Template 9.1](https://www.youtube.com/watch?v=EJIgjL41em4)\n- [The REPR Pattern and Clean Architecture](https://www.youtube.com/watch?v=-AJcEJPwagQ)\n- [Clean Architecture with ASP.NET Core 8](https://www.youtube.com/watch?v=yF9SwL0p0Y0)\n- [Getting Started with Clean Architecture and .NET 8 (webinar)](https://www.youtube.com/watch?v=IsmyqNrfQQw)",
    "metadata": {
      "source": "CleanArchitecture-main\\README.md",
      "file_type": "documentation",
      "token_count": 257,
      "chunk_index": 31,
      "total_chunks": 32
    }
  },
  {
    "page_content": "[File: launchSettings.json | Type: config | Part 1 of 2]\\n\\n{\n  \"$schema\": \"https://json.schemastore.org/launchsettings.json\",\n  \"profiles\": {\n    \"https\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"applicationUrl\": \"https://localhost:17143;http://localhost:15258\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\n        \"DOTNET_ENVIRONMENT\": \"Development\",\n        \"DOTNET_DASHBOARD_OTLP_ENDPOINT_URL\": \"https://localhost:21007\",\n        \"DOTNET_RESOURCE_SERVICE_ENDPOINT_URL\": \"https://localhost:22245\"\n      }\n    },\n    \"http\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"applicationUrl\": \"http://localhost:15258\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\",\n        \"DOTNET_ENVIRONMENT\": \"Development\",\n        \"DOTNET_DASHBOARD_OTLP_ENDPOINT_URL\": \"http://localhost:19187\",\n        \"DOTNET_RESOURCE_SERVICE_ENDPOINT_URL\": \"http://localhost:20134\"\n      }\n    }\n  }",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.AspireHost\\Properties\\launchSettings.json",
      "file_type": "config",
      "token_count": 251,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: launchSettings.json | Type: config | Part 2 of 2]\\n\\n\"DOTNET_RESOURCE_SERVICE_ENDPOINT_URL\": \"http://localhost:20134\"\n      }\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.AspireHost\\Properties\\launchSettings.json",
      "file_type": "config",
      "token_count": 23,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: launchSettings.json | Type: config]\\n\\n{\n  \"iisSettings\": {\n    \"windowsAuthentication\": false,\n    \"anonymousAuthentication\": true,\n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:57678/\",\n      \"sslPort\": 0\n    }\n  },\n  \"profiles\": {\n    \"https\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchUrl\": \"swagger\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      },\n      \"applicationUrl\": \"https://localhost:57679/\"\n    },\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Properties\\launchSettings.json",
      "file_type": "config",
      "token_count": 164,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: appsettings.json | Type: config | Part 1 of 2]\\n\\n﻿{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=(localdb)\\\\v11.0;Database=cleanarchitecture;Trusted_Connection=True;MultipleActiveResultSets=true\",\n    \"SqliteConnection\": \"Data Source=database.sqlite\"\n  },\n  \"Serilog\": {\n    \"MinimumLevel\": {\n      \"Default\": \"Information\"\n    },\n    \"WriteTo\": [\n      {\n        \"Name\": \"Console\"\n      },\n      {\n        \"Name\": \"File\",\n        \"Args\": {\n          \"path\": \"log.txt\",\n          \"rollingInterval\": \"Day\"\n        }\n      }\n      //Uncomment this section if you'd like to push your logs to Azure Application Insights\n      //Full list of Serilog Sinks can be found here: https://github.com/serilog/serilog/wiki/Provided-Sinks\n      //{\n      //  \"Name\": \"ApplicationInsights\",\n      //  \"Args\": {\n      //    \"instrumentationKey\": \"\", //Fill in with your ApplicationInsights InstrumentationKey",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\appsettings.json",
      "file_type": "config",
      "token_count": 218,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: appsettings.json | Type: config | Part 2 of 2]\\n\\n//    \"instrumentationKey\": \"\", //Fill in with your ApplicationInsights InstrumentationKey\n      //    \"telemetryConverter\": \"Serilog.Sinks.ApplicationInsights.Sinks.ApplicationInsights.TelemetryConverters.TraceTelemetryConverter, Serilog.Sinks.ApplicationInsights\"\n      //  }\n      //}\n    ]\n  },\n  \"Mailserver\": {\n    \"Server\": \"localhost\",\n    \"Port\": 25\n  }\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\appsettings.json",
      "file_type": "config",
      "token_count": 92,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: xunit.runner.json | Type: config]\\n\\n﻿{\n  \"shadowCopy\": false,\n  \"parallelizeAssembly\": false,\n  \"parallelizeTestCollections\": false\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.FunctionalTests\\xunit.runner.json",
      "file_type": "config",
      "token_count": 27,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: xunit.runner.json | Type: config]\\n\\n﻿{\n  \"shadowCopy\": false,\n  \"parallelizeAssembly\": false,\n  \"parallelizeTestCollections\": false\n}",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\xunit.runner.json",
      "file_type": "config",
      "token_count": 27,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.Core.csproj | Type: project]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.1.3\" />\n\n  <PropertyGroup>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Ardalis.GuardClauses\" />\n    <PackageReference Include=\"Ardalis.Result\" />\n    <PackageReference Include=\"Ardalis.SmartEnum\" />\n    <PackageReference Include=\"Ardalis.Specification\" />\n    <PackageReference Include=\"MediatR\" />\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Abstractions\" />\n    <PackageReference Include=\"NimblePros.SharedKernel\" />\n    <PackageReference Include=\"Vogen\" />\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Core\\NimblePros.SampleToDo.Core.csproj",
      "file_type": "project",
      "token_count": 175,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.Infrastructure.csproj | Type: project | Part 1 of 2]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.1.3\" />\n  \n  <PropertyGroup>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\NimblePros.SampleToDo.Infrastructure.csproj",
      "file_type": "project",
      "token_count": 62,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.Infrastructure.csproj | Type: project | Part 2 of 2]\\n\\n<ItemGroup>\n    <PackageReference Include=\"Ardalis.Specification.EntityFrameworkCore\" />\n    <PackageReference Include=\"MailKit\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Relational\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" PrivateAssets=\"all\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Sqlite\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" />\n    <PackageReference Include=\"NimblePros.Metronome\" />\n    <PackageReference Include=\"NimblePros.SharedKernel\" />\n    <PackageReference Include=\"SQLite\" />\n    <PackageReference Include=\"Vogen\" />\n  </ItemGroup>\n  \n  <ItemGroup>\n    <ProjectReference Include=\"..\\NimblePros.SampleToDo.Core\\NimblePros.SampleToDo.Core.csproj\" />\n    <ProjectReference Include=\"..\\NimblePros.SampleToDo.UseCases\\NimblePros.SampleToDo.UseCases.csproj\" />\n  </ItemGroup>\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Infrastructure\\NimblePros.SampleToDo.Infrastructure.csproj",
      "file_type": "project",
      "token_count": 201,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.AspireHost.csproj | Type: project | Part 1 of 2]\\n\\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <Sdk Name=\"Aspire.AppHost.Sdk\" Version=\"9.0.0\" />\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsAspireHost>true</IsAspireHost>\n    <UserSecretsId>c540eeb6-e06b-4456-a539-be58dd8b88c7</UserSecretsId>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Aspire.Hosting.AppHost\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\NimblePros.SampleToDo.Web\\NimblePros.SampleToDo.Web.csproj\" />\n  </ItemGroup>\n  <ItemGroup>\n    <!-- The IsAspireProjectResource attribute tells .NET Aspire to treat this \n        reference as a standard project reference and not attempt to generate\n        a metadata file -->\n    <ProjectReference Include=\"..\\NimblePros.SampleToDo.ServiceDefaults\\NimblePros.SampleToDo.ServiceDefaults.csproj\"\n                      IsAspireProjectResource=\"false\" />\n  </ItemGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.AspireHost\\NimblePros.SampleToDo.AspireHost.csproj",
      "file_type": "project",
      "token_count": 270,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.AspireHost.csproj | Type: project | Part 2 of 2]\\n\\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.AspireHost\\NimblePros.SampleToDo.AspireHost.csproj",
      "file_type": "project",
      "token_count": 3,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.UseCases.csproj | Type: project]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Compile Remove=\"Projects\\AddContributorToItem\\**\" />\n    <EmbeddedResource Remove=\"Projects\\AddContributorToItem\\**\" />\n    <None Remove=\"Projects\\AddContributorToItem\\**\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Ardalis.Result\" />\n    <PackageReference Include=\"MediatR\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Relational\" />\n    <PackageReference Include=\"NimblePros.SharedKernel\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\NimblePros.SampleToDo.Core\\NimblePros.SampleToDo.Core.csproj\" />\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.UseCases\\NimblePros.SampleToDo.UseCases.csproj",
      "file_type": "project",
      "token_count": 197,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.ServiceDefaults.csproj | Type: project]\\n\\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsAspireSharedProject>true</IsAspireSharedProject>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\n\n    <PackageReference Include=\"Microsoft.Extensions.Http.Resilience\" />\n    <PackageReference Include=\"Microsoft.Extensions.ServiceDiscovery\" />\n    <PackageReference Include=\"OpenTelemetry.Exporter.OpenTelemetryProtocol\" />\n    <PackageReference Include=\"OpenTelemetry.Extensions.Hosting\" />\n    <PackageReference Include=\"OpenTelemetry.Instrumentation.AspNetCore\" />\n    <PackageReference Include=\"OpenTelemetry.Instrumentation.Http\" />\n    <PackageReference Include=\"OpenTelemetry.Instrumentation.Runtime\" />\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.ServiceDefaults\\NimblePros.SampleToDo.ServiceDefaults.csproj",
      "file_type": "project",
      "token_count": 178,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.Web.csproj | Type: project | Part 1 of 3]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.1.3\" />\n  \n  <PropertyGroup>\n    <PreserveCompilationContext>true</PreserveCompilationContext>\n    <OutputType>Exe</OutputType>\n    <WebProjectMode>true</WebProjectMode>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <GenerateDocumentationFile>True</GenerateDocumentationFile>\n    <!--<DocumentationFile>bin\\swagger-docs.xml</DocumentationFile>-->\n  </PropertyGroup>\n  \n  <ItemGroup>\n    <PackageReference Include=\"Ardalis.ListStartupServices\" />\n    <PackageReference Include=\"Ardalis.Result\" />\n    <PackageReference Include=\"Ardalis.Result.AspNetCore\" />\n    <PackageReference Include=\"FastEndpoints\" />\n    <PackageReference Include=\"FastEndpoints.ApiExplorer\" />\n    <PackageReference Include=\"FastEndpoints.Swagger\" />\n    <PackageReference Include=\"FastEndpoints.Swagger.Swashbuckle\" />\n    <PackageReference Include=\"FluentValidation\" />",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\NimblePros.SampleToDo.Web.csproj",
      "file_type": "project",
      "token_count": 233,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.Web.csproj | Type: project | Part 2 of 3]\\n\\n<PackageReference Include=\"FluentValidation\" />\n    <PackageReference Include=\"FluentValidation.DependencyInjectionExtensions\" />\n    <PackageReference Include=\"MediatR\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.NewtonsoftJson\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" PrivateAssets=\"all\" />\n    <PackageReference Include=\"NimblePros.Metronome\" />\n    <PackageReference Include=\"NimblePros.SharedKernel\" />\n    <PackageReference Include=\"Serilog.Sinks.ApplicationInsights\" />\n    <PackageReference Include=\"Serilog.AspNetCore\" />\n    <!--<PackageReference Include=\"Swashbuckle.AspNetCore\" />\n    <PackageReference Include=\"Swashbuckle.AspNetCore.Annotations\" />-->\n  </ItemGroup>\n  \n  <ItemGroup>\n    <ProjectReference Include=\"..\\NimblePros.SampleToDo.Infrastructure\\NimblePros.SampleToDo.Infrastructure.csproj\" />\n    <ProjectReference Include=\"..\\NimblePros.SampleToDo.UseCases\\NimblePros.SampleToDo.UseCases.csproj\" />\n  </ItemGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\NimblePros.SampleToDo.Web.csproj",
      "file_type": "project",
      "token_count": 219,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.Web.csproj | Type: project | Part 3 of 3]\\n\\n</ItemGroup>\n  \n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\src\\NimblePros.SampleToDo.Web\\NimblePros.SampleToDo.Web.csproj",
      "file_type": "project",
      "token_count": 8,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.FunctionalTests.csproj | Type: project | Part 1 of 3]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.1.3\" />\n  \n  <PropertyGroup>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n  \n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" />\n    <PackageReference Include=\"NimblePros.SharedKernel\" />\n    <PackageReference Include=\"Shouldly\" />\n    <PackageReference Include=\"Testcontainers\" />\n    <PackageReference Include=\"xunit\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\NimblePros.SampleToDo.FunctionalTests.csproj",
      "file_type": "project",
      "token_count": 225,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.FunctionalTests.csproj | Type: project | Part 2 of 3]\\n\\n</PackageReference>\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Testing\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.InMemory\" />\n    <PackageReference Include=\"Newtonsoft.Json\" />\n    <PackageReference Include=\"Ardalis.HttpClientTestExtensions\" />\n  </ItemGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\NimblePros.SampleToDo.FunctionalTests.csproj",
      "file_type": "project",
      "token_count": 60,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.FunctionalTests.csproj | Type: project | Part 3 of 3]\\n\\n<ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\NimblePros.SampleToDo.Web\\NimblePros.SampleToDo.Web.csproj\" />\n    <ProjectReference Include=\"..\\NimblePros.SampleToDo.UnitTests\\NimblePros.SampleToDo.UnitTests.csproj\" />\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.FunctionalTests\\NimblePros.SampleToDo.FunctionalTests.csproj",
      "file_type": "project",
      "token_count": 68,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.IntegrationTests.csproj | Type: project | Part 1 of 2]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.1.3\" />\n\n  <PropertyGroup>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n  \n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" />\n    <PackageReference Include=\"NimblePros.SharedKernel\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"xunit\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Testing\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.InMemory\" />\n  </ItemGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.IntegrationTests\\NimblePros.SampleToDo.IntegrationTests.csproj",
      "file_type": "project",
      "token_count": 234,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.IntegrationTests.csproj | Type: project | Part 2 of 2]\\n\\n<ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\NimblePros.SampleToDo.Infrastructure\\NimblePros.SampleToDo.Infrastructure.csproj\" />\n    <ProjectReference Include=\"..\\NimblePros.SampleToDo.UnitTests\\NimblePros.SampleToDo.UnitTests.csproj\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <None Update=\"xunit.runner.json\">\n\t  <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.IntegrationTests\\NimblePros.SampleToDo.IntegrationTests.csproj",
      "file_type": "project",
      "token_count": 109,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Clean.Architecture.Core.csproj | Type: project]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.1.3\" />\n\n  <ItemGroup>\n    <PackageReference Include=\"Ardalis.GuardClauses\" />\n    <PackageReference Include=\"Ardalis.Result\" />\n    <PackageReference Include=\"Ardalis.SharedKernel\" />\n    <PackageReference Include=\"Ardalis.SmartEnum\" />\n    <PackageReference Include=\"Ardalis.Specification\" />\n    <PackageReference Include=\"MediatR\" />\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Abstractions\" />\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Core\\Clean.Architecture.Core.csproj",
      "file_type": "project",
      "token_count": 134,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Clean.Architecture.AspireHost.csproj | Type: project | Part 1 of 2]\\n\\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <Sdk Name=\"Aspire.AppHost.Sdk\" Version=\"9.0.0-rc.1.24511.1\" />\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsAspireHost>true</IsAspireHost>\n    <UserSecretsId>c540eeb6-e06b-4456-a539-be58dd8b88c7</UserSecretsId>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Aspire.Hosting.AppHost\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\Clean.Architecture.Web\\Clean.Architecture.Web.csproj\" />\n  </ItemGroup>\n  <ItemGroup>\n    <!-- The IsAspireProjectResource attribute tells .NET Aspire to treat this \n        reference as a standard project reference and not attempt to generate\n        a metadata file -->\n    <ProjectReference Include=\"..\\Clean.Architecture.ServiceDefaults\\Clean.Architecture.ServiceDefaults.csproj\"\n                      IsAspireProjectResource=\"false\" />\n  </ItemGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.AspireHost\\Clean.Architecture.AspireHost.csproj",
      "file_type": "project",
      "token_count": 271,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Clean.Architecture.AspireHost.csproj | Type: project | Part 2 of 2]\\n\\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.AspireHost\\Clean.Architecture.AspireHost.csproj",
      "file_type": "project",
      "token_count": 3,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.UnitTests.csproj | Type: project | Part 1 of 3]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.1.3\" />\n\n  <PropertyGroup>\n    <PreserveCompilationContext>true</PreserveCompilationContext>\n    <Nullable>enable</Nullable>\n    <ImplicitUsings>enable</ImplicitUsings>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Compile Remove=\"Core\\Services\\ToDoItemSearchService_GetAllIncompleteItems.cs\" />\n    <Compile Remove=\"Core\\Services\\ToDoItemSearchService_GetNextIncompleteItem.cs\" />\n  </ItemGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\NimblePros.SampleToDo.UnitTests.csproj",
      "file_type": "project",
      "token_count": 122,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.UnitTests.csproj | Type: project | Part 2 of 3]\\n\\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" />\n    <PackageReference Include=\"NimblePros.SharedKernel\" />\n    <PackageReference Include=\"NSubstitute\" />\n    <PackageReference Include=\"Shouldly\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"ReportGenerator\" />\n    <PackageReference Include=\"xunit\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <None Update=\"xunit.runner.json\">\n\t  <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n\n  <ItemGroup>\n    <Folder Include=\"Core\\Services\\\" />\n  </ItemGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\NimblePros.SampleToDo.UnitTests.csproj",
      "file_type": "project",
      "token_count": 236,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.UnitTests.csproj | Type: project | Part 3 of 3]\\n\\n<ItemGroup>\n    <Folder Include=\"Core\\Services\\\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\NimblePros.SampleToDo.Core\\NimblePros.SampleToDo.Core.csproj\" />\n    <ProjectReference Include=\"..\\..\\src\\NimblePros.SampleToDo.UseCases\\NimblePros.SampleToDo.UseCases.csproj\" />\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\tests\\NimblePros.SampleToDo.UnitTests\\NimblePros.SampleToDo.UnitTests.csproj",
      "file_type": "project",
      "token_count": 90,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: Clean.Architecture.ServiceDefaults.csproj | Type: project]\\n\\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsAspireSharedProject>true</IsAspireSharedProject>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\n\n    <PackageReference Include=\"Microsoft.Extensions.Http.Resilience\" />\n    <PackageReference Include=\"Microsoft.Extensions.ServiceDiscovery\" />\n    <PackageReference Include=\"OpenTelemetry.Exporter.OpenTelemetryProtocol\" />\n    <PackageReference Include=\"OpenTelemetry.Extensions.Hosting\" />\n    <PackageReference Include=\"OpenTelemetry.Instrumentation.AspNetCore\" />\n    <PackageReference Include=\"OpenTelemetry.Instrumentation.Http\" />\n    <PackageReference Include=\"OpenTelemetry.Instrumentation.Runtime\" />\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.ServiceDefaults\\Clean.Architecture.ServiceDefaults.csproj",
      "file_type": "project",
      "token_count": 191,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Clean.Architecture.UseCases.csproj | Type: project]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <ItemGroup>\n    <PackageReference Include=\"Ardalis.Result\" />\n    <PackageReference Include=\"MediatR\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\Clean.Architecture.Core\\Clean.Architecture.Core.csproj\" />\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.UseCases\\Clean.Architecture.UseCases.csproj",
      "file_type": "project",
      "token_count": 78,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Clean.Architecture.Infrastructure.csproj | Type: project | Part 1 of 3]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.1.3\" />",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Clean.Architecture.Infrastructure.csproj",
      "file_type": "project",
      "token_count": 31,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: Clean.Architecture.Infrastructure.csproj | Type: project | Part 2 of 3]\\n\\n<ItemGroup>\n    <PackageReference Include=\"Ardalis.SharedKernel\" />\n    <PackageReference Include=\"Ardalis.Specification.EntityFrameworkCore\" />\n    <PackageReference Include=\"Azure.Identity\" />\n    <PackageReference Include=\"MailKit\" />\n    <PackageReference Include=\"MediatR\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Relational\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" PrivateAssets=\"all\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Sqlite\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" />\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" />\n    <PackageReference Include=\"Microsoft.Extensions.Logging\" />\n    <PackageReference Include=\"Microsoft.Extensions.Options.ConfigurationExtensions\" />\n    <PackageReference Include=\"SQLite\" />\n  </ItemGroup>\n  \n  <ItemGroup>\n    <ProjectReference Include=\"..\\Clean.Architecture.Core\\Clean.Architecture.Core.csproj\" />",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Clean.Architecture.Infrastructure.csproj",
      "file_type": "project",
      "token_count": 190,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: Clean.Architecture.Infrastructure.csproj | Type: project | Part 3 of 3]\\n\\n<ProjectReference Include=\"..\\Clean.Architecture.Core\\Clean.Architecture.Core.csproj\" />\n    <ProjectReference Include=\"..\\Clean.Architecture.UseCases\\Clean.Architecture.UseCases.csproj\" />\n  </ItemGroup>\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Infrastructure\\Clean.Architecture.Infrastructure.csproj",
      "file_type": "project",
      "token_count": 52,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: Clean.Architecture.FunctionalTests.csproj | Type: project | Part 1 of 2]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.1.3\" />\n\n  <ItemGroup>\n    <PackageReference Include=\"Shouldly\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" />\n    <PackageReference Include=\"xunit\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Testing\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.InMemory\" />\n    <PackageReference Include=\"Ardalis.HttpClientTestExtensions\" />\n  </ItemGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.FunctionalTests\\Clean.Architecture.FunctionalTests.csproj",
      "file_type": "project",
      "token_count": 214,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Clean.Architecture.FunctionalTests.csproj | Type: project | Part 2 of 2]\\n\\n<ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Clean.Architecture.Infrastructure\\Clean.Architecture.Infrastructure.csproj\" />\n    <ProjectReference Include=\"..\\..\\src\\Clean.Architecture.UseCases\\Clean.Architecture.UseCases.csproj\" />\n    <ProjectReference Include=\"..\\..\\src\\Clean.Architecture.Web\\Clean.Architecture.Web.csproj\" />\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.FunctionalTests\\Clean.Architecture.FunctionalTests.csproj",
      "file_type": "project",
      "token_count": 88,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Clean.Architecture.AspireTests.csproj | Type: project]\\n\\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <IsPackable>false</IsPackable>\n    <IsTestProject>true</IsTestProject>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Aspire.Hosting.Testing\"/>\n    <PackageReference Include=\"coverlet.collector\"/>\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\"/>\n    <PackageReference Include=\"xunit\"/>\n    <PackageReference Include=\"xunit.runner.visualstudio\"/>\n  </ItemGroup>\n\n  <ItemGroup>\n    <Using Include=\"System.Net\" />\n    <Using Include=\"Microsoft.Extensions.DependencyInjection\" />\n    <Using Include=\"Aspire.Hosting.ApplicationModel\" />\n    <Using Include=\"Aspire.Hosting.Testing\" />\n    <Using Include=\"Xunit\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Clean.Architecture.AspireHost\\Clean.Architecture.AspireHost.csproj\" />\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.AspireTests\\Clean.Architecture.AspireTests.csproj",
      "file_type": "project",
      "token_count": 244,
      "chunk_index": 0,
      "total_chunks": 1
    }
  },
  {
    "page_content": "[File: Clean.Architecture.Web.csproj | Type: project | Part 1 of 2]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.1.3\" />\n\n  <PropertyGroup>\n    <PreserveCompilationContext>true</PreserveCompilationContext>\n    <OutputType>Exe</OutputType>\n    <WebProjectMode>true</WebProjectMode>\n    <GenerateDocumentationFile>True</GenerateDocumentationFile>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Ardalis.ListStartupServices\" />\n    <PackageReference Include=\"Ardalis.Result\" />\n    <PackageReference Include=\"Ardalis.Result.AspNetCore\" />\n    <PackageReference Include=\"FastEndpoints\" />\n    <PackageReference Include=\"FastEndpoints.Swagger\" />\n    <PackageReference Include=\"MediatR\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"Serilog.AspNetCore\" />\n  </ItemGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Clean.Architecture.Web.csproj",
      "file_type": "project",
      "token_count": 232,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Clean.Architecture.Web.csproj | Type: project | Part 2 of 2]\\n\\n<ItemGroup>\n    <ProjectReference Include=\"..\\Clean.Architecture.Infrastructure\\Clean.Architecture.Infrastructure.csproj\" />\n    <ProjectReference Include=\"..\\Clean.Architecture.UseCases\\Clean.Architecture.UseCases.csproj\" />\n    <!--#if (aspire)-->\n    <ProjectReference Include=\"..\\Clean.Architecture.ServiceDefaults\\Clean.Architecture.ServiceDefaults.csproj\" />\n    <!--#endif -->\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\src\\Clean.Architecture.Web\\Clean.Architecture.Web.csproj",
      "file_type": "project",
      "token_count": 95,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Clean.Architecture.IntegrationTests.csproj | Type: project | Part 1 of 2]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.1.3\" />\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"xunit\" />\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Testing\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.InMemory\" />\n  </ItemGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.IntegrationTests\\Clean.Architecture.IntegrationTests.csproj",
      "file_type": "project",
      "token_count": 189,
      "chunk_index": 0,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Clean.Architecture.IntegrationTests.csproj | Type: project | Part 2 of 2]\\n\\n<ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Clean.Architecture.Infrastructure\\Clean.Architecture.Infrastructure.csproj\" />\n    <ProjectReference Include=\"..\\Clean.Architecture.UnitTests\\Clean.Architecture.UnitTests.csproj\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <None Update=\"xunit.runner.json\">\n\t  <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.IntegrationTests\\Clean.Architecture.IntegrationTests.csproj",
      "file_type": "project",
      "token_count": 101,
      "chunk_index": 1,
      "total_chunks": 2
    }
  },
  {
    "page_content": "[File: Clean.Architecture.UnitTests.csproj | Type: project | Part 1 of 3]\\n\\n﻿<Project Sdk=\"Microsoft.NET.Sdk\">\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.1.3\" />\n\n  <PropertyGroup>\n    <PreserveCompilationContext>true</PreserveCompilationContext>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Compile Remove=\"Core\\Services\\ToDoItemSearchService_GetAllIncompleteItems.cs\" />\n    <Compile Remove=\"Core\\Services\\ToDoItemSearchService_GetNextIncompleteItem.cs\" />\n  </ItemGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\Clean.Architecture.UnitTests.csproj",
      "file_type": "project",
      "token_count": 102,
      "chunk_index": 0,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: Clean.Architecture.UnitTests.csproj | Type: project | Part 2 of 3]\\n\\n<ItemGroup>\n    <PackageReference Include=\"Shouldly\" />\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" />\n    <PackageReference Include=\"NSubstitute\" />\n    <PackageReference Include=\"xunit.runner.visualstudio\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"coverlet.collector\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n    <PackageReference Include=\"ReportGenerator\" />\n    <PackageReference Include=\"xunit\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <None Update=\"xunit.runner.json\">\n\t  <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n\n  <ItemGroup>\n    <Folder Include=\"Core\\Services\\\" />\n  </ItemGroup>",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\Clean.Architecture.UnitTests.csproj",
      "file_type": "project",
      "token_count": 222,
      "chunk_index": 1,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: Clean.Architecture.UnitTests.csproj | Type: project | Part 3 of 3]\\n\\n<ItemGroup>\n    <Folder Include=\"Core\\Services\\\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <ProjectReference Include=\"..\\..\\src\\Clean.Architecture.Core\\Clean.Architecture.Core.csproj\" />\n    <ProjectReference Include=\"..\\..\\src\\Clean.Architecture.UseCases\\Clean.Architecture.UseCases.csproj\" />\n  </ItemGroup>\n\n</Project>",
    "metadata": {
      "source": "CleanArchitecture-main\\tests\\Clean.Architecture.UnitTests\\Clean.Architecture.UnitTests.csproj",
      "file_type": "project",
      "token_count": 82,
      "chunk_index": 2,
      "total_chunks": 3
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 1 of 15]\\n\\n﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.0.31815.197\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{106AE906-5075-410A-B941-912F811848EE}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{B31B4797-1D9F-4288-808C-BE9A31A98C7D}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NimblePros.SampleToDo.Web\", \"src\\NimblePros.SampleToDo.Web\\NimblePros.SampleToDo.Web.csproj\", \"{C9751CB7-4CD6-4633-A99A-4F6ADD525437}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NimblePros.SampleToDo.Core\", \"src\\NimblePros.SampleToDo.Core\\NimblePros.SampleToDo.Core.csproj\", \"{4548EB20-1D1B-477B-AF6E-DD55653A6583}\"\nEndProject",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 344,
      "chunk_index": 0,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 2 of 15]\\n\\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NimblePros.SampleToDo.Infrastructure\", \"src\\NimblePros.SampleToDo.Infrastructure\\NimblePros.SampleToDo.Infrastructure.csproj\", \"{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{250F283E-FE2F-4BBD-9E63-A2265B84E23F}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\t\tCleanArchitecture.nuspec = CleanArchitecture.nuspec\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tDirectory.Packages.props = Directory.Packages.props\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NimblePros.SampleToDo.FunctionalTests\", \"tests\\NimblePros.SampleToDo.FunctionalTests\\NimblePros.SampleToDo.FunctionalTests.csproj\", \"{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}\"\n\tProjectSection(ProjectDependencies) = postProject\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437} = {C9751CB7-4CD6-4633-A99A-4F6ADD525437}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 373,
      "chunk_index": 1,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 3 of 15]\\n\\n{C9751CB7-4CD6-4633-A99A-4F6ADD525437} = {C9751CB7-4CD6-4633-A99A-4F6ADD525437}\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NimblePros.SampleToDo.IntegrationTests\", \"tests\\NimblePros.SampleToDo.IntegrationTests\\NimblePros.SampleToDo.IntegrationTests.csproj\", \"{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}\"\n\tProjectSection(ProjectDependencies) = postProject\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D} = {220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"NimblePros.SampleToDo.UnitTests\", \"tests\\NimblePros.SampleToDo.UnitTests\\NimblePros.SampleToDo.UnitTests.csproj\", \"{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"NimblePros.SampleToDo.UseCases\", \"src\\NimblePros.SampleToDo.UseCases\\NimblePros.SampleToDo.UseCases.csproj\", \"{B74A78FF-B79E-4C38-A9C7-084A90990CAD}\"\nEndProject",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 406,
      "chunk_index": 2,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 4 of 15]\\n\\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"NimblePros.SampleToDo.AspireHost\", \"src\\NimblePros.SampleToDo.AspireHost\\NimblePros.SampleToDo.AspireHost.csproj\", \"{A386838E-3D47-0E25-E489-902B7426F983}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"NimblePros.SampleToDo.ServiceDefaults\", \"src\\NimblePros.SampleToDo.ServiceDefaults\\NimblePros.SampleToDo.ServiceDefaults.csproj\", \"{6EFB0B52-15DF-2406-DA11-569E9010FD25}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tDebug|x64 = Debug|x64\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|Any CPU = Release|Any CPU\n\t\tRelease|x64 = Release|x64\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|Any CPU.Build.0 = Debug|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 348,
      "chunk_index": 3,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 5 of 15]\\n\\n{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|x64.Build.0 = Release|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|x86.Build.0 = Release|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|Any CPU.ActiveCfg = Debug|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 451,
      "chunk_index": 4,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 6 of 15]\\n\\n{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|x64.Build.0 = Release|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|x86.Build.0 = Release|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 451,
      "chunk_index": 5,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 7 of 15]\\n\\n{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|x86.Build.0 = Release|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|x64.Build.0 = Release|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|x86.ActiveCfg = Release|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 506,
      "chunk_index": 6,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 8 of 15]\\n\\n{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|x86.Build.0 = Release|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|x64.Build.0 = Release|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 481,
      "chunk_index": 7,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 9 of 15]\\n\\n{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|x64.Build.0 = Release|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|x86.Build.0 = Release|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|x64.ActiveCfg = Release|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 466,
      "chunk_index": 8,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 10 of 15]\\n\\n{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|x64.Build.0 = Release|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|x86.Build.0 = Release|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|Any CPU.Build.0 = Release|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 487,
      "chunk_index": 9,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 11 of 15]\\n\\n{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|x64.Build.0 = Release|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|x86.Build.0 = Release|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|Any CPU.ActiveCfg = Release|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 471,
      "chunk_index": 10,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 12 of 15]\\n\\n{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|x64.Build.0 = Release|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|x86.Build.0 = Release|Any CPU\n\t\t{A386838E-3D47-0E25-E489-902B7426F983}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{A386838E-3D47-0E25-E489-902B7426F983}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{A386838E-3D47-0E25-E489-902B7426F983}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{A386838E-3D47-0E25-E489-902B7426F983}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{A386838E-3D47-0E25-E489-902B7426F983}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{A386838E-3D47-0E25-E489-902B7426F983}.Debug|x86.Build.0 = Debug|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 445,
      "chunk_index": 11,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 13 of 15]\\n\\n{A386838E-3D47-0E25-E489-902B7426F983}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{A386838E-3D47-0E25-E489-902B7426F983}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{A386838E-3D47-0E25-E489-902B7426F983}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{A386838E-3D47-0E25-E489-902B7426F983}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{A386838E-3D47-0E25-E489-902B7426F983}.Release|x64.Build.0 = Release|Any CPU\n\t\t{A386838E-3D47-0E25-E489-902B7426F983}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{A386838E-3D47-0E25-E489-902B7426F983}.Release|x86.Build.0 = Release|Any CPU\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Debug|x86.ActiveCfg = Debug|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 444,
      "chunk_index": 12,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 14 of 15]\\n\\n{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Release|x64.Build.0 = Release|Any CPU\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25}.Release|x86.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437} = {106AE906-5075-410A-B941-912F811848EE}\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583} = {106AE906-5075-410A-B941-912F811848EE}",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 428,
      "chunk_index": 13,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: NimblePros.SampleToDo.sln | Type: project | Part 15 of 15]\\n\\n{4548EB20-1D1B-477B-AF6E-DD55653A6583} = {106AE906-5075-410A-B941-912F811848EE}\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D} = {106AE906-5075-410A-B941-912F811848EE}\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C} = {B31B4797-1D9F-4288-808C-BE9A31A98C7D}\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17} = {B31B4797-1D9F-4288-808C-BE9A31A98C7D}\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5} = {B31B4797-1D9F-4288-808C-BE9A31A98C7D}\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD} = {106AE906-5075-410A-B941-912F811848EE}\n\t\t{A386838E-3D47-0E25-E489-902B7426F983} = {106AE906-5075-410A-B941-912F811848EE}\n\t\t{6EFB0B52-15DF-2406-DA11-569E9010FD25} = {106AE906-5075-410A-B941-912F811848EE}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {B0F19343-8185-4A9F-9165-0EA8544BC925}\n\tEndGlobalSection\nEndGlobal",
    "metadata": {
      "source": "CleanArchitecture-main\\sample\\NimblePros.SampleToDo.sln",
      "file_type": "project",
      "token_count": 456,
      "chunk_index": 14,
      "total_chunks": 15
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 1 of 17]\\n\\n﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.0.31815.197\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{106AE906-5075-410A-B941-912F811848EE}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"tests\", \"tests\", \"{B31B4797-1D9F-4288-808C-BE9A31A98C7D}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Clean.Architecture.Web\", \"src\\Clean.Architecture.Web\\Clean.Architecture.Web.csproj\", \"{C9751CB7-4CD6-4633-A99A-4F6ADD525437}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Clean.Architecture.Core\", \"src\\Clean.Architecture.Core\\Clean.Architecture.Core.csproj\", \"{4548EB20-1D1B-477B-AF6E-DD55653A6583}\"\nEndProject",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 332,
      "chunk_index": 0,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 2 of 17]\\n\\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Clean.Architecture.Infrastructure\", \"src\\Clean.Architecture.Infrastructure\\Clean.Architecture.Infrastructure.csproj\", \"{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{250F283E-FE2F-4BBD-9E63-A2265B84E23F}\"\n\tProjectSection(SolutionItems) = preProject\n\t\t.editorconfig = .editorconfig\n\t\tCleanArchitecture.nuspec = CleanArchitecture.nuspec\n\t\tDirectory.Build.props = Directory.Build.props\n\t\tDirectory.Packages.props = Directory.Packages.props\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Clean.Architecture.FunctionalTests\", \"tests\\Clean.Architecture.FunctionalTests\\Clean.Architecture.FunctionalTests.csproj\", \"{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}\"\n\tProjectSection(ProjectDependencies) = postProject\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437} = {C9751CB7-4CD6-4633-A99A-4F6ADD525437}\n\tEndProjectSection",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 364,
      "chunk_index": 1,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 3 of 17]\\n\\nEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Clean.Architecture.IntegrationTests\", \"tests\\Clean.Architecture.IntegrationTests\\Clean.Architecture.IntegrationTests.csproj\", \"{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}\"\n\tProjectSection(ProjectDependencies) = postProject\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D} = {220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}\n\tEndProjectSection\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Clean.Architecture.UnitTests\", \"tests\\Clean.Architecture.UnitTests\\Clean.Architecture.UnitTests.csproj\", \"{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Clean.Architecture.UseCases\", \"src\\Clean.Architecture.UseCases\\Clean.Architecture.UseCases.csproj\", \"{B74A78FF-B79E-4C38-A9C7-084A90990CAD}\"\nEndProject\n#if (aspire)",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 347,
      "chunk_index": 2,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 4 of 17]\\n\\nEndProject\n#if (aspire)\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Clean.Architecture.ServiceDefaults\", \"src\\Clean.Architecture.ServiceDefaults\\Clean.Architecture.ServiceDefaults.csproj\", \"{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Clean.Architecture.AspireHost\", \"src\\Clean.Architecture.AspireHost\\Clean.Architecture.AspireHost.csproj\", \"{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Clean.Architecture.AspireTests\", \"tests\\Clean.Architecture.AspireTests\\Clean.Architecture.AspireTests.csproj\", \"{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}\"\nEndProject\n#endif\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tDebug|x64 = Debug|x64\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|Any CPU = Release|Any CPU\n\t\tRelease|x64 = Release|x64\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 354,
      "chunk_index": 3,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 5 of 17]\\n\\nRelease|x64 = Release|x64\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|x64.Build.0 = Release|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 410,
      "chunk_index": 4,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 6 of 17]\\n\\n{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|x64.Build.0 = Release|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437}.Release|x86.Build.0 = Release|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|x64.ActiveCfg = Release|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 451,
      "chunk_index": 5,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 7 of 17]\\n\\n{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|x64.Build.0 = Release|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583}.Release|x86.Build.0 = Release|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|Any CPU.Build.0 = Release|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 491,
      "chunk_index": 6,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 8 of 17]\\n\\n{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|x64.Build.0 = Release|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D}.Release|x86.Build.0 = Release|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|Any CPU.ActiveCfg = Release|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 490,
      "chunk_index": 7,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 9 of 17]\\n\\n{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|x64.Build.0 = Release|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C}.Release|x86.Build.0 = Release|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|x86.Build.0 = Debug|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 469,
      "chunk_index": 8,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 10 of 17]\\n\\n{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|x64.Build.0 = Release|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17}.Release|x86.Build.0 = Release|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|x86.ActiveCfg = Debug|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 478,
      "chunk_index": 9,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 11 of 17]\\n\\n{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|x64.Build.0 = Release|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5}.Release|x86.Build.0 = Release|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|x64.Build.0 = Debug|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 483,
      "chunk_index": 10,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 12 of 17]\\n\\n{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|x64.Build.0 = Release|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD}.Release|x86.Build.0 = Release|Any CPU\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Debug|x64.ActiveCfg = Debug|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 457,
      "chunk_index": 11,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 13 of 17]\\n\\n{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Release|x64.Build.0 = Release|Any CPU\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2}.Release|x86.Build.0 = Release|Any CPU\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Debug|Any CPU.Build.0 = Debug|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 475,
      "chunk_index": 12,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 14 of 17]\\n\\n{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Release|x64.Build.0 = Release|Any CPU\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870}.Release|x86.Build.0 = Release|Any CPU\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 474,
      "chunk_index": 13,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 15 of 17]\\n\\n{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Release|x64.Build.0 = Release|Any CPU\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Release|x86.Build.0 = Release|Any CPU\n\tEndGlobalSection",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 467,
      "chunk_index": 14,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 16 of 17]\\n\\n{07D864BA-6245-D5C0-5C79-BB55D27ACBBF}.Release|x86.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{C9751CB7-4CD6-4633-A99A-4F6ADD525437} = {106AE906-5075-410A-B941-912F811848EE}\n\t\t{4548EB20-1D1B-477B-AF6E-DD55653A6583} = {106AE906-5075-410A-B941-912F811848EE}\n\t\t{220361D6-9C76-4E3F-BD34-3C7B50E2CA4D} = {106AE906-5075-410A-B941-912F811848EE}\n\t\t{7D84EFEE-A7D9-44AD-A0A3-38EC7882D94C} = {B31B4797-1D9F-4288-808C-BE9A31A98C7D}\n\t\t{0776DC14-9000-47A4-A3F4-ECBCF8CEBC17} = {B31B4797-1D9F-4288-808C-BE9A31A98C7D}\n\t\t{1DC7F5A0-DDF7-4975-84EB-05F4FC1B6AB5} = {B31B4797-1D9F-4288-808C-BE9A31A98C7D}\n\t\t{B74A78FF-B79E-4C38-A9C7-084A90990CAD} = {106AE906-5075-410A-B941-912F811848EE}\n\t\t{08E69B3B-4418-40BD-80EC-B38C0ECFBAE2} = {106AE906-5075-410A-B941-912F811848EE}\n\t\t{C7039CB5-4F76-4F19-ABD7-C755FAB2A870} = {106AE906-5075-410A-B941-912F811848EE}",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 530,
      "chunk_index": 15,
      "total_chunks": 17
    }
  },
  {
    "page_content": "[File: Clean.Architecture.sln | Type: project | Part 17 of 17]\\n\\n{C7039CB5-4F76-4F19-ABD7-C755FAB2A870} = {106AE906-5075-410A-B941-912F811848EE}\n\t\t{07D864BA-6245-D5C0-5C79-BB55D27ACBBF} = {B31B4797-1D9F-4288-808C-BE9A31A98C7D}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {B0F19343-8185-4A9F-9165-0EA8544BC925}\n\tEndGlobalSection\nEndGlobal",
    "metadata": {
      "source": "CleanArchitecture-main\\Clean.Architecture.sln",
      "file_type": "project",
      "token_count": 154,
      "chunk_index": 16,
      "total_chunks": 17
    }
  }
]